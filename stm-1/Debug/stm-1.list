
stm-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006264  08006264  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800626c  0800626c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba4  20000060  080062d4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c04  080062d4  00024c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133aa  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e60  00000000  00000000  0003347d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  000362e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3c  00000000  00000000  000372d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000308a  00000000  00000000  00037f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e45  00000000  00000000  0003af96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bac3  00000000  00000000  0004cddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046bc  00000000  00000000  000e88a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000ecf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006174 	.word	0x08006174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006174 	.word	0x08006174

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_ADC_ConvCpltCallback>:
  .priority = (osPriority_t) osPriorityLow,
};
/* USER CODE BEGIN PV */
uint32_t ADC_Buffer;
uint32_t buf_rx[12];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(hadc);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 fe1f 	bl	80011c8 <HAL_ADC_GetValue>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000590:	801a      	strh	r2, [r3, #0]
	ADC_Buffer = adc_value;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_ADC_ConvCpltCallback+0x50>)
 800059a:	601a      	str	r2, [r3, #0]

	char buf[20];
	sprintf(buf, "value : %d\n\r", adc_value);
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x4c>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	490a      	ldr	r1, [pc, #40]	; (80005d0 <HAL_ADC_ConvCpltCallback+0x54>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 f93f 	bl	800582c <siprintf>
	HAL_UART_Transmit(&huart2, buf, 20, 1000);
 80005ae:	f107 010c 	add.w	r1, r7, #12
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	2214      	movs	r2, #20
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <HAL_ADC_ConvCpltCallback+0x58>)
 80005ba:	f001 fff7 	bl	80025ac <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	20000160 	.word	0x20000160
 80005d0:	080061a4 	.word	0x080061a4
 80005d4:	20000110 	.word	0x20000110

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fb70 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f82a 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f938 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f90c 	bl	8000804 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ec:	f000 f88e 	bl	800070c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 f8de 	bl	80007b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f4:	f002 fbca 	bl	8002d8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <main+0x48>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0x4c>)
 80005fe:	f002 fc0f 	bl	8002e20 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <main+0x50>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of MessageSend */
  MessageSendHandle = osThreadNew(StartMessageSend, NULL, &MessageSend_attributes);
 8000608:	4a08      	ldr	r2, [pc, #32]	; (800062c <main+0x54>)
 800060a:	2100      	movs	r1, #0
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <main+0x58>)
 800060e:	f002 fc07 	bl	8002e20 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <main+0x5c>)
 8000616:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000618:	f002 fbdc 	bl	8002dd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x44>
 800061e:	bf00      	nop
 8000620:	080061d0 	.word	0x080061d0
 8000624:	08000935 	.word	0x08000935
 8000628:	20000158 	.word	0x20000158
 800062c:	080061f4 	.word	0x080061f4
 8000630:	08000951 	.word	0x08000951
 8000634:	2000015c 	.word	0x2000015c

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f910 	bl	800586c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a8:	2310      	movs	r3, #16
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fa8c 	bl	8001bdc <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ca:	f000 f95f 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fcee 	bl	80020cc <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f949 	bl	800098c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x9c>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800072a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_ADC1_Init+0x98>)
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_ADC1_Init+0xa0>)
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000768:	2201      	movs	r2, #1
 800076a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_ADC1_Init+0x98>)
 800076e:	f000 fb19 	bl	8000da4 <HAL_ADC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f908 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_ADC1_Init+0x98>)
 800078e:	f000 fd3d 	bl	800120c <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000798:	f000 f8f8 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000080 	.word	0x20000080
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART1_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x4c>)
 80007e8:	f001 fe90 	bl	800250c <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f8cb 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000c8 	.word	0x200000c8
 8000800:	40011000 	.word	0x40011000

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0x4c>)
 800083c:	f001 fe66 	bl	800250c <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f8a1 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000110 	.word	0x20000110
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2c      	ldr	r2, [pc, #176]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_GPIO_Init+0xd4>)
 80008e4:	f001 f960 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_GPIO_Init+0xd8>)
 8000900:	f000 ffce 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000904:	2320      	movs	r3, #32
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_GPIO_Init+0xd4>)
 800091c:	f000 ffc0 	bl	80018a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020800 	.word	0x40020800

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start_IT(&hadc1);
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <StartDefaultTask+0x18>)
 800093e:	f000 fa75 	bl	8000e2c <HAL_ADC_Start_IT>
    osDelay(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f002 fafe 	bl	8002f44 <osDelay>
	HAL_ADC_Start_IT(&hadc1);
 8000948:	e7f8      	b.n	800093c <StartDefaultTask+0x8>
 800094a:	bf00      	nop
 800094c:	20000080 	.word	0x20000080

08000950 <StartMessageSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMessageSend */
void StartMessageSend(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMessageSend */
  /* Infinite loop */
  for(;;)
  {
	  char tx_buffer[10];
	  sprintf(tx_buffer, "%d", ADC_Buffer);
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <StartMessageSend+0x30>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4908      	ldr	r1, [pc, #32]	; (8000984 <StartMessageSend+0x34>)
 8000962:	4618      	mov	r0, r3
 8000964:	f004 ff62 	bl	800582c <siprintf>
	HAL_UART_Transmit(&huart1, tx_buffer, 4, 100);
 8000968:	f107 010c 	add.w	r1, r7, #12
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	2204      	movs	r2, #4
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <StartMessageSend+0x38>)
 8000972:	f001 fe1b 	bl	80025ac <HAL_UART_Transmit>
    osDelay(3000);
 8000976:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800097a:	f002 fae3 	bl	8002f44 <osDelay>
  {
 800097e:	e7eb      	b.n	8000958 <StartMessageSend+0x8>
 8000980:	20000160 	.word	0x20000160
 8000984:	080061b4 	.word	0x080061b4
 8000988:	200000c8 	.word	0x200000c8

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <HAL_MspInit+0x54>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_MspInit+0x54>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 ff28 	bl	8001832 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_ADC_MspInit+0x8c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12f      	bne.n	8000a72 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_ADC_MspInit+0x90>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_ADC_MspInit+0x90>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_ADC_MspInit+0x90>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_ADC_MspInit+0x90>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <HAL_ADC_MspInit+0x90>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_ADC_MspInit+0x90>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_ADC_MspInit+0x94>)
 8000a5e:	f000 ff1f 	bl	80018a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	2012      	movs	r0, #18
 8000a68:	f000 fee3 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a6c:	2012      	movs	r0, #18
 8000a6e:	f000 fefc 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a32      	ldr	r2, [pc, #200]	; (8000b70 <HAL_UART_MspInit+0xe8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12d      	bne.n	8000b06 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a30      	ldr	r2, [pc, #192]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ae2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af4:	2307      	movs	r3, #7
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481e      	ldr	r0, [pc, #120]	; (8000b78 <HAL_UART_MspInit+0xf0>)
 8000b00:	f000 fece 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b04:	e030      	b.n	8000b68 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <HAL_UART_MspInit+0xf4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d12b      	bne.n	8000b68 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_UART_MspInit+0xec>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_UART_MspInit+0xf0>)
 8000b64:	f000 fe9c 	bl	80018a0 <HAL_GPIO_Init>
}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40004400 	.word	0x40004400

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8d8 	bl	8000d64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb4:	f003 fdd4 	bl	8004760 <xTaskGetSchedulerState>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d001      	beq.n	8000bc2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bbe:	f004 fbbb 	bl	8005338 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <ADC_IRQHandler+0x10>)
 8000bce:	f000 f9eb 	bl	8000fa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000080 	.word	0x20000080

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f004 fe36 	bl	800587c <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20020000 	.word	0x20020000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000164 	.word	0x20000164
 8000c44:	20004c08 	.word	0x20004c08

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f004 fdf5 	bl	8005888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fc9b 	bl	80005d8 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cb0:	08006274 	.word	0x08006274
  ldr r2, =_sbss
 8000cb4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cb8:	20004c04 	.word	0x20004c04

08000cbc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <DMA1_Stream0_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 fd97 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f808 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fe50 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fdaf 	bl	8001886 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d40:	f000 fd77 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000168 	.word	0x20000168

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000168 	.word	0x20000168

08000da4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e033      	b.n	8000e22 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fe14 	bl	80009f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d118      	bne.n	8000e14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dea:	f023 0302 	bic.w	r3, r3, #2
 8000dee:	f043 0202 	orr.w	r2, r3, #2
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fb3a 	bl	8001470 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f023 0303 	bic.w	r3, r3, #3
 8000e0a:	f043 0201 	orr.w	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
 8000e12:	e001      	b.n	8000e18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Start_IT+0x1a>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e0a1      	b.n	8000f8a <HAL_ADC_Start_IT+0x15e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d018      	beq.n	8000e8e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0201 	orr.w	r2, r2, #1
 8000e6a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <HAL_ADC_Start_IT+0x16c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <HAL_ADC_Start_IT+0x170>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9a      	lsrs	r2, r3, #18
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e80:	e002      	b.n	8000e88 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f9      	bne.n	8000e82 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d169      	bne.n	8000f70 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ec6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eda:	d106      	bne.n	8000eea <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f023 0206 	bic.w	r2, r3, #6
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ee8:	e002      	b.n	8000ef0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_ADC_Start_IT+0x174>)
 8000efa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f04:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6812      	ldr	r2, [r2, #0]
 8000f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d129      	bne.n	8000f88 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	e020      	b.n	8000f88 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <HAL_ADC_Start_IT+0x178>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d11b      	bne.n	8000f88 <HAL_ADC_Start_IT+0x15c>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d114      	bne.n	8000f88 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	e00b      	b.n	8000f88 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f043 0210 	orr.w	r2, r3, #16
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f80:	f043 0201 	orr.w	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	40012300 	.word	0x40012300
 8000fa4:	40012000 	.word	0x40012000

08000fa8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d049      	beq.n	8001072 <HAL_ADC_IRQHandler+0xca>
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d046      	beq.n	8001072 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d105      	bne.n	8000ffc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d12b      	bne.n	8001062 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800100e:	2b00      	cmp	r3, #0
 8001010:	d127      	bne.n	8001062 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800102a:	2b00      	cmp	r3, #0
 800102c:	d119      	bne.n	8001062 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0220 	bic.w	r2, r2, #32
 800103c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d105      	bne.n	8001062 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f043 0201 	orr.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fa8a 	bl	800057c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f06f 0212 	mvn.w	r2, #18
 8001070:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001080:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d057      	beq.n	8001138 <HAL_ADC_IRQHandler+0x190>
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d054      	beq.n	8001138 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d139      	bne.n	8001128 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d12b      	bne.n	8001128 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d124      	bne.n	8001128 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11d      	bne.n	8001128 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d119      	bne.n	8001128 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001102:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d105      	bne.n	8001128 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fa9d 	bl	8001668 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f06f 020c 	mvn.w	r2, #12
 8001136:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d017      	beq.n	800117e <HAL_ADC_IRQHandler+0x1d6>
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d014      	beq.n	800117e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10d      	bne.n	800117e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f837 	bl	80011e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f06f 0201 	mvn.w	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800118c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d015      	beq.n	80011c0 <HAL_ADC_IRQHandler+0x218>
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d012      	beq.n	80011c0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f043 0202 	orr.w	r2, r3, #2
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f06f 0220 	mvn.w	r2, #32
 80011ae:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f820 	bl	80011f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f06f 0220 	mvn.w	r2, #32
 80011be:	601a      	str	r2, [r3, #0]
  }
}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1c>
 8001224:	2302      	movs	r3, #2
 8001226:	e113      	b.n	8001450 <HAL_ADC_ConfigChannel+0x244>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d925      	bls.n	8001284 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1e      	subs	r3, #30
 800124e:	2207      	movs	r2, #7
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43da      	mvns	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d9      	ldr	r1, [r3, #12]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	4603      	mov	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4403      	add	r3, r0
 8001276:	3b1e      	subs	r3, #30
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	e022      	b.n	80012ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6919      	ldr	r1, [r3, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	2207      	movs	r2, #7
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	400a      	ands	r2, r1
 80012a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6919      	ldr	r1, [r3, #16]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4403      	add	r3, r0
 80012c0:	409a      	lsls	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d824      	bhi.n	800131c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3b05      	subs	r3, #5
 80012e4:	221f      	movs	r2, #31
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b05      	subs	r3, #5
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	e04c      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d824      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	3b23      	subs	r3, #35	; 0x23
 8001336:	221f      	movs	r2, #31
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43da      	mvns	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	400a      	ands	r2, r1
 8001344:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b23      	subs	r3, #35	; 0x23
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
 800136c:	e023      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	3b41      	subs	r3, #65	; 0x41
 8001380:	221f      	movs	r2, #31
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	400a      	ands	r2, r1
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b41      	subs	r3, #65	; 0x41
 80013aa:	fa00 f203 	lsl.w	r2, r0, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_ADC_ConfigChannel+0x250>)
 80013b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_ADC_ConfigChannel+0x254>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d10f      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d8>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b12      	cmp	r3, #18
 80013ca:	d10b      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_ADC_ConfigChannel+0x254>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_ADC_ConfigChannel+0x258>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d003      	beq.n	8001400 <HAL_ADC_ConfigChannel+0x1f4>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d122      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_ADC_ConfigChannel+0x258>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d111      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_ADC_ConfigChannel+0x25c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_ADC_ConfigChannel+0x260>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9a      	lsrs	r2, r3, #18
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001438:	e002      	b.n	8001440 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	40012300 	.word	0x40012300
 8001460:	40012000 	.word	0x40012000
 8001464:	10000012 	.word	0x10000012
 8001468:	20000000 	.word	0x20000000
 800146c:	431bde83 	.word	0x431bde83

08001470 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001478:	4b79      	ldr	r3, [pc, #484]	; (8001660 <ADC_Init+0x1f0>)
 800147a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	431a      	orrs	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	021a      	lsls	r2, r3, #8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	4a58      	ldr	r2, [pc, #352]	; (8001664 <ADC_Init+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6899      	ldr	r1, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e00f      	b.n	800156e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800155c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800156c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0202 	bic.w	r2, r2, #2
 800157c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7e1b      	ldrb	r3, [r3, #24]
 8001588:	005a      	lsls	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01b      	beq.n	80015d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6859      	ldr	r1, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	3b01      	subs	r3, #1
 80015c8:	035a      	lsls	r2, r3, #13
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	e007      	b.n	80015e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	3b01      	subs	r3, #1
 8001600:	051a      	lsls	r2, r3, #20
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6899      	ldr	r1, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001626:	025a      	lsls	r2, r3, #9
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800163e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6899      	ldr	r1, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	029a      	lsls	r2, r3, #10
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40012300 	.word	0x40012300
 8001664:	0f000001 	.word	0x0f000001

08001668 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <__NVIC_EnableIRQ+0x38>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff29 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff3e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff31 	bl	80016e0 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e159      	b.n	8001b70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8148 	bne.w	8001b6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d005      	beq.n	80018f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d130      	bne.n	8001954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0201 	and.w	r2, r3, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b03      	cmp	r3, #3
 800195e:	d017      	beq.n	8001990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d123      	bne.n	80019e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	08da      	lsrs	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3208      	adds	r2, #8
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0203 	and.w	r2, r3, #3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a2 	beq.w	8001b6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a42:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_GPIO_Init+0x2ec>)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a49      	ldr	r2, [pc, #292]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x202>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <HAL_GPIO_Init+0x2f4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x1fe>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a47      	ldr	r2, [pc, #284]	; (8001b98 <HAL_GPIO_Init+0x2f8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a46      	ldr	r2, [pc, #280]	; (8001b9c <HAL_GPIO_Init+0x2fc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x1f6>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a45      	ldr	r2, [pc, #276]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x1f2>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e008      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x204>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab4:	4935      	ldr	r1, [pc, #212]	; (8001b8c <HAL_GPIO_Init+0x2ec>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae6:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b10:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b64:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_GPIO_Init+0x304>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	f67f aea2 	bls.w	80018bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40013800 	.word	0x40013800
 8001b90:	40020000 	.word	0x40020000
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40020800 	.word	0x40020800
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc4:	e003      	b.n	8001bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e267      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d075      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfa:	4b88      	ldr	r3, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d00c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c06:	4b85      	ldr	r3, [pc, #532]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d112      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b82      	ldr	r3, [pc, #520]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b7e      	ldr	r3, [pc, #504]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x108>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d157      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e242      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x74>
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x98>
 8001c5a:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a6f      	ldr	r2, [pc, #444]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b6d      	ldr	r3, [pc, #436]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6c      	ldr	r2, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xb0>
 8001c74:	4b69      	ldr	r3, [pc, #420]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a68      	ldr	r2, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a65      	ldr	r2, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f87a 	bl	8000d8c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f876 	bl	8000d8c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e207      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b5b      	ldr	r3, [pc, #364]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xc0>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f866 	bl	8000d8c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f862 	bl	8000d8c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1f3      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xe8>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d11c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0a:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e1c7      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4937      	ldr	r1, [pc, #220]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e03a      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCC_OscConfig+0x244>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff f81b 	bl	8000d8c <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff f817 	bl	8000d8c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1a8      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4925      	ldr	r1, [pc, #148]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCC_OscConfig+0x244>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe fffa 	bl	8000d8c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7fe fff6 	bl	8000d8c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e187      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d036      	beq.n	8001e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_RCC_OscConfig+0x248>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7fe ffda 	bl	8000d8c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7fe ffd6 	bl	8000d8c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e167      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_OscConfig+0x240>)
 8001df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x200>
 8001dfa:	e01b      	b.n	8001e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_OscConfig+0x248>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e02:	f7fe ffc3 	bl	8000d8c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e08:	e00e      	b.n	8001e28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7fe ffbf 	bl	8000d8c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d907      	bls.n	8001e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e150      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	42470000 	.word	0x42470000
 8001e24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ea      	bne.n	8001e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8097 	beq.w	8001f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b7d      	ldr	r3, [pc, #500]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b77      	ldr	r3, [pc, #476]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b74      	ldr	r3, [pc, #464]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a73      	ldr	r2, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe ff7f 	bl	8000d8c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7fe ff7b 	bl	8000d8c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e10c      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x474>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2ea>
 8001eb8:	4b64      	ldr	r3, [pc, #400]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a63      	ldr	r2, [pc, #396]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	e01c      	b.n	8001f00 <HAL_RCC_OscConfig+0x324>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x30c>
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	4a5b      	ldr	r2, [pc, #364]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0x324>
 8001ee8:	4b58      	ldr	r3, [pc, #352]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef4:	4b55      	ldr	r3, [pc, #340]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7fe ff40 	bl	8000d8c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7fe ff3c 	bl	8000d8c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0cb      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ee      	beq.n	8001f10 <HAL_RCC_OscConfig+0x334>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7fe ff2a 	bl	8000d8c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ff26 	bl	8000d8c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0b5      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ee      	bne.n	8001f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f64:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	4a38      	ldr	r2, [pc, #224]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a1 	beq.w	80020bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d05c      	beq.n	8002040 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d141      	bne.n	8002012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_OscConfig+0x478>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fefa 	bl	8000d8c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fef6 	bl	8000d8c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e087      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	061b      	lsls	r3, r3, #24
 8001fde:	491b      	ldr	r1, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x478>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fecf 	bl	8000d8c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fecb 	bl	8000d8c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e05c      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x416>
 8002010:	e054      	b.n	80020bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_OscConfig+0x478>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe feb8 	bl	8000d8c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe feb4 	bl	8000d8c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e045      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_OscConfig+0x470>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x444>
 800203e:	e03d      	b.n	80020bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e038      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
 800204c:	40023800 	.word	0x40023800
 8002050:	40007000 	.word	0x40007000
 8002054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x4ec>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d028      	beq.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d121      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d11a      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002088:	4013      	ands	r3, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800208e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002090:	4293      	cmp	r3, r2
 8002092:	d111      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	3b01      	subs	r3, #1
 80020a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0cc      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b68      	ldr	r3, [pc, #416]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d90c      	bls.n	8002108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0b8      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800212a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	494d      	ldr	r1, [pc, #308]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d044      	beq.n	80021ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d119      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07f      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002186:	2b03      	cmp	r3, #3
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06f      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e067      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4934      	ldr	r1, [pc, #208]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7fe fde6 	bl	8000d8c <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fde2 	bl	8000d8c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e04f      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d20c      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e032      	b.n	800227a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4916      	ldr	r1, [pc, #88]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002252:	f000 f821 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490a      	ldr	r1, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fd46 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00
 8002288:	40023800 	.word	0x40023800
 800228c:	08006218 	.word	0x08006218
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800229c:	b094      	sub	sp, #80	; 0x50
 800229e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	647b      	str	r3, [r7, #68]	; 0x44
 80022a4:	2300      	movs	r3, #0
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a8:	2300      	movs	r3, #0
 80022aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b0:	4b79      	ldr	r3, [pc, #484]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d00d      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x40>
 80022bc:	2b08      	cmp	r3, #8
 80022be:	f200 80e1 	bhi.w	8002484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x34>
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ca:	e0db      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b73      	ldr	r3, [pc, #460]	; (800249c <HAL_RCC_GetSysClockFreq+0x204>)
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022d0:	e0db      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80022d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022d6:	e0d8      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d8:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e2:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	2200      	movs	r2, #0
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
 8002306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800230a:	4622      	mov	r2, r4
 800230c:	462b      	mov	r3, r5
 800230e:	f04f 0000 	mov.w	r0, #0
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	0159      	lsls	r1, r3, #5
 8002318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800231c:	0150      	lsls	r0, r2, #5
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4621      	mov	r1, r4
 8002324:	1a51      	subs	r1, r2, r1
 8002326:	6139      	str	r1, [r7, #16]
 8002328:	4629      	mov	r1, r5
 800232a:	eb63 0301 	sbc.w	r3, r3, r1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800233c:	4659      	mov	r1, fp
 800233e:	018b      	lsls	r3, r1, #6
 8002340:	4651      	mov	r1, sl
 8002342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002346:	4651      	mov	r1, sl
 8002348:	018a      	lsls	r2, r1, #6
 800234a:	4651      	mov	r1, sl
 800234c:	ebb2 0801 	subs.w	r8, r2, r1
 8002350:	4659      	mov	r1, fp
 8002352:	eb63 0901 	sbc.w	r9, r3, r1
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236a:	4690      	mov	r8, r2
 800236c:	4699      	mov	r9, r3
 800236e:	4623      	mov	r3, r4
 8002370:	eb18 0303 	adds.w	r3, r8, r3
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	462b      	mov	r3, r5
 8002378:	eb49 0303 	adc.w	r3, r9, r3
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800238a:	4629      	mov	r1, r5
 800238c:	024b      	lsls	r3, r1, #9
 800238e:	4621      	mov	r1, r4
 8002390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002394:	4621      	mov	r1, r4
 8002396:	024a      	lsls	r2, r1, #9
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239e:	2200      	movs	r2, #0
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023a8:	f7fd ff6a 	bl	8000280 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b4:	e058      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b38      	ldr	r3, [pc, #224]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	2200      	movs	r2, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	4611      	mov	r1, r2
 80023c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023c6:	623b      	str	r3, [r7, #32]
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023d0:	4642      	mov	r2, r8
 80023d2:	464b      	mov	r3, r9
 80023d4:	f04f 0000 	mov.w	r0, #0
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	0159      	lsls	r1, r3, #5
 80023de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e2:	0150      	lsls	r0, r2, #5
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4641      	mov	r1, r8
 80023ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80023ee:	4649      	mov	r1, r9
 80023f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002408:	ebb2 040a 	subs.w	r4, r2, sl
 800240c:	eb63 050b 	sbc.w	r5, r3, fp
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	00eb      	lsls	r3, r5, #3
 800241a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800241e:	00e2      	lsls	r2, r4, #3
 8002420:	4614      	mov	r4, r2
 8002422:	461d      	mov	r5, r3
 8002424:	4643      	mov	r3, r8
 8002426:	18e3      	adds	r3, r4, r3
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	464b      	mov	r3, r9
 800242c:	eb45 0303 	adc.w	r3, r5, r3
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800243e:	4629      	mov	r1, r5
 8002440:	028b      	lsls	r3, r1, #10
 8002442:	4621      	mov	r1, r4
 8002444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002448:	4621      	mov	r1, r4
 800244a:	028a      	lsls	r2, r1, #10
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002452:	2200      	movs	r2, #0
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	61fa      	str	r2, [r7, #28]
 8002458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800245c:	f7fd ff10 	bl	8000280 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4613      	mov	r3, r2
 8002466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_GetSysClockFreq+0x200>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	3301      	adds	r3, #1
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800247a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002482:	e002      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetSysClockFreq+0x204>)
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800248c:	4618      	mov	r0, r3
 800248e:	3750      	adds	r7, #80	; 0x50
 8002490:	46bd      	mov	sp, r7
 8002492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	007a1200 	.word	0x007a1200

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a9b      	lsrs	r3, r3, #10
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4903      	ldr	r1, [pc, #12]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	08006228 	.word	0x08006228

080024e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024e8:	f7ff ffdc 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0b5b      	lsrs	r3, r3, #13
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08006228 	.word	0x08006228

0800250c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e042      	b.n	80025a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe faa8 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2224      	movs	r2, #36	; 0x24
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f973 	bl	800283c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d175      	bne.n	80026b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_UART_Transmit+0x2c>
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e06e      	b.n	80026ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2221      	movs	r2, #33	; 0x21
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ea:	f7fe fbcf 	bl	8000d8c <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002604:	d108      	bne.n	8002618 <HAL_UART_Transmit+0x6c>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e003      	b.n	8002620 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002620:	e02e      	b.n	8002680 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2200      	movs	r2, #0
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f848 	bl	80026c2 <UART_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e03a      	b.n	80026ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002658:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	3302      	adds	r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e007      	b.n	8002672 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3301      	adds	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1cb      	bne.n	8002622 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f814 	bl	80026c2 <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e006      	b.n	80026ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d2:	e03b      	b.n	800274c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026da:	d037      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026dc:	f7fe fb56 	bl	8000d8c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	6a3a      	ldr	r2, [r7, #32]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d302      	bcc.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e03a      	b.n	800276c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b80      	cmp	r3, #128	; 0x80
 8002708:	d020      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0x8a>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d01d      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b08      	cmp	r3, #8
 800271c:	d116      	bne.n	800274c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f81d 	bl	8002774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2208      	movs	r2, #8
 800273e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e00f      	b.n	800276c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4013      	ands	r3, r2
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	429a      	cmp	r2, r3
 8002768:	d0b4      	beq.n	80026d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b095      	sub	sp, #84	; 0x54
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800279c:	643a      	str	r2, [r7, #64]	; 0x40
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e5      	bne.n	800277c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3314      	adds	r3, #20
 80027b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	61fb      	str	r3, [r7, #28]
   return(result);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d8:	e841 2300 	strex	r3, r2, [r1]
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d119      	bne.n	8002820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 0310 	bic.w	r3, r3, #16
 8002802:	647b      	str	r3, [r7, #68]	; 0x44
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800280c:	61ba      	str	r2, [r7, #24]
 800280e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	e841 2300 	strex	r3, r2, [r1]
 8002818:	613b      	str	r3, [r7, #16]
   return(result);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e5      	bne.n	80027ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800282e:	bf00      	nop
 8002830:	3754      	adds	r7, #84	; 0x54
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b0c0      	sub	sp, #256	; 0x100
 8002842:	af00      	add	r7, sp, #0
 8002844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002858:	68d9      	ldr	r1, [r3, #12]
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	ea40 0301 	orr.w	r3, r0, r1
 8002864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	431a      	orrs	r2, r3
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	431a      	orrs	r2, r3
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002894:	f021 010c 	bic.w	r1, r1, #12
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028a2:	430b      	orrs	r3, r1
 80028a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b6:	6999      	ldr	r1, [r3, #24]
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	ea40 0301 	orr.w	r3, r0, r1
 80028c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b8f      	ldr	r3, [pc, #572]	; (8002b08 <UART_SetConfig+0x2cc>)
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d005      	beq.n	80028dc <UART_SetConfig+0xa0>
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b8d      	ldr	r3, [pc, #564]	; (8002b0c <UART_SetConfig+0x2d0>)
 80028d8:	429a      	cmp	r2, r3
 80028da:	d104      	bne.n	80028e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028dc:	f7ff fe02 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 80028e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028e4:	e003      	b.n	80028ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028e6:	f7ff fde9 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80028ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f8:	f040 810c 	bne.w	8002b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002900:	2200      	movs	r2, #0
 8002902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800290a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800290e:	4622      	mov	r2, r4
 8002910:	462b      	mov	r3, r5
 8002912:	1891      	adds	r1, r2, r2
 8002914:	65b9      	str	r1, [r7, #88]	; 0x58
 8002916:	415b      	adcs	r3, r3
 8002918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800291a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800291e:	4621      	mov	r1, r4
 8002920:	eb12 0801 	adds.w	r8, r2, r1
 8002924:	4629      	mov	r1, r5
 8002926:	eb43 0901 	adc.w	r9, r3, r1
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800293a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800293e:	4690      	mov	r8, r2
 8002940:	4699      	mov	r9, r3
 8002942:	4623      	mov	r3, r4
 8002944:	eb18 0303 	adds.w	r3, r8, r3
 8002948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800294c:	462b      	mov	r3, r5
 800294e:	eb49 0303 	adc.w	r3, r9, r3
 8002952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800296a:	460b      	mov	r3, r1
 800296c:	18db      	adds	r3, r3, r3
 800296e:	653b      	str	r3, [r7, #80]	; 0x50
 8002970:	4613      	mov	r3, r2
 8002972:	eb42 0303 	adc.w	r3, r2, r3
 8002976:	657b      	str	r3, [r7, #84]	; 0x54
 8002978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800297c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002980:	f7fd fc7e 	bl	8000280 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <UART_SetConfig+0x2d4>)
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	011c      	lsls	r4, r3, #4
 8002992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800299c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029a4:	4642      	mov	r2, r8
 80029a6:	464b      	mov	r3, r9
 80029a8:	1891      	adds	r1, r2, r2
 80029aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80029ac:	415b      	adcs	r3, r3
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029b4:	4641      	mov	r1, r8
 80029b6:	eb12 0a01 	adds.w	sl, r2, r1
 80029ba:	4649      	mov	r1, r9
 80029bc:	eb43 0b01 	adc.w	fp, r3, r1
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d4:	4692      	mov	sl, r2
 80029d6:	469b      	mov	fp, r3
 80029d8:	4643      	mov	r3, r8
 80029da:	eb1a 0303 	adds.w	r3, sl, r3
 80029de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029e2:	464b      	mov	r3, r9
 80029e4:	eb4b 0303 	adc.w	r3, fp, r3
 80029e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a00:	460b      	mov	r3, r1
 8002a02:	18db      	adds	r3, r3, r3
 8002a04:	643b      	str	r3, [r7, #64]	; 0x40
 8002a06:	4613      	mov	r3, r2
 8002a08:	eb42 0303 	adc.w	r3, r2, r3
 8002a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a16:	f7fd fc33 	bl	8000280 <__aeabi_uldivmod>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <UART_SetConfig+0x2d4>)
 8002a22:	fba3 2301 	umull	r2, r3, r3, r1
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2264      	movs	r2, #100	; 0x64
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	1acb      	subs	r3, r1, r3
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a36:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <UART_SetConfig+0x2d4>)
 8002a38:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a44:	441c      	add	r4, r3
 8002a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a58:	4642      	mov	r2, r8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	1891      	adds	r1, r2, r2
 8002a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a60:	415b      	adcs	r3, r3
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a68:	4641      	mov	r1, r8
 8002a6a:	1851      	adds	r1, r2, r1
 8002a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002a6e:	4649      	mov	r1, r9
 8002a70:	414b      	adcs	r3, r1
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a80:	4659      	mov	r1, fp
 8002a82:	00cb      	lsls	r3, r1, #3
 8002a84:	4651      	mov	r1, sl
 8002a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a8a:	4651      	mov	r1, sl
 8002a8c:	00ca      	lsls	r2, r1, #3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	4642      	mov	r2, r8
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a9c:	464b      	mov	r3, r9
 8002a9e:	460a      	mov	r2, r1
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002abc:	460b      	mov	r3, r1
 8002abe:	18db      	adds	r3, r3, r3
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	eb42 0303 	adc.w	r3, r2, r3
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ad2:	f7fd fbd5 	bl	8000280 <__aeabi_uldivmod>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <UART_SetConfig+0x2d4>)
 8002adc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	2164      	movs	r1, #100	; 0x64
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3332      	adds	r3, #50	; 0x32
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <UART_SetConfig+0x2d4>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	f003 0207 	and.w	r2, r3, #7
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4422      	add	r2, r4
 8002b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b04:	e106      	b.n	8002d14 <UART_SetConfig+0x4d8>
 8002b06:	bf00      	nop
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b26:	4642      	mov	r2, r8
 8002b28:	464b      	mov	r3, r9
 8002b2a:	1891      	adds	r1, r2, r2
 8002b2c:	6239      	str	r1, [r7, #32]
 8002b2e:	415b      	adcs	r3, r3
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b36:	4641      	mov	r1, r8
 8002b38:	1854      	adds	r4, r2, r1
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	eb43 0501 	adc.w	r5, r3, r1
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	00eb      	lsls	r3, r5, #3
 8002b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4e:	00e2      	lsls	r2, r4, #3
 8002b50:	4614      	mov	r4, r2
 8002b52:	461d      	mov	r5, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	18e3      	adds	r3, r4, r3
 8002b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	eb45 0303 	adc.w	r3, r5, r3
 8002b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b82:	4629      	mov	r1, r5
 8002b84:	008b      	lsls	r3, r1, #2
 8002b86:	4621      	mov	r1, r4
 8002b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	008a      	lsls	r2, r1, #2
 8002b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b94:	f7fd fb74 	bl	8000280 <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <UART_SetConfig+0x4e4>)
 8002b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	011c      	lsls	r4, r3, #4
 8002ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	1891      	adds	r1, r2, r2
 8002bbe:	61b9      	str	r1, [r7, #24]
 8002bc0:	415b      	adcs	r3, r3
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc8:	4641      	mov	r1, r8
 8002bca:	1851      	adds	r1, r2, r1
 8002bcc:	6139      	str	r1, [r7, #16]
 8002bce:	4649      	mov	r1, r9
 8002bd0:	414b      	adcs	r3, r1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be0:	4659      	mov	r1, fp
 8002be2:	00cb      	lsls	r3, r1, #3
 8002be4:	4651      	mov	r1, sl
 8002be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bea:	4651      	mov	r1, sl
 8002bec:	00ca      	lsls	r2, r1, #3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	189b      	adds	r3, r3, r2
 8002bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	460a      	mov	r2, r1
 8002c00:	eb42 0303 	adc.w	r3, r2, r3
 8002c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c20:	4649      	mov	r1, r9
 8002c22:	008b      	lsls	r3, r1, #2
 8002c24:	4641      	mov	r1, r8
 8002c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	008a      	lsls	r2, r1, #2
 8002c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c32:	f7fd fb25 	bl	8000280 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4b38      	ldr	r3, [pc, #224]	; (8002d20 <UART_SetConfig+0x4e4>)
 8002c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2264      	movs	r2, #100	; 0x64
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	1acb      	subs	r3, r1, r3
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	3332      	adds	r3, #50	; 0x32
 8002c50:	4a33      	ldr	r2, [pc, #204]	; (8002d20 <UART_SetConfig+0x4e4>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5c:	441c      	add	r4, r3
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	673b      	str	r3, [r7, #112]	; 0x70
 8002c66:	677a      	str	r2, [r7, #116]	; 0x74
 8002c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	464b      	mov	r3, r9
 8002c70:	1891      	adds	r1, r2, r2
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	415b      	adcs	r3, r3
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	1851      	adds	r1, r2, r1
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	4649      	mov	r1, r9
 8002c84:	414b      	adcs	r3, r1
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c94:	4659      	mov	r1, fp
 8002c96:	00cb      	lsls	r3, r1, #3
 8002c98:	4651      	mov	r1, sl
 8002c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	00ca      	lsls	r2, r1, #3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4642      	mov	r2, r8
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cae:	464b      	mov	r3, r9
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	eb42 0303 	adc.w	r3, r2, r3
 8002cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cc2:	667a      	str	r2, [r7, #100]	; 0x64
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	008b      	lsls	r3, r1, #2
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cda:	4641      	mov	r1, r8
 8002cdc:	008a      	lsls	r2, r1, #2
 8002cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ce2:	f7fd facd 	bl	8000280 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <UART_SetConfig+0x4e4>)
 8002cec:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	2164      	movs	r1, #100	; 0x64
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	3332      	adds	r3, #50	; 0x32
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <UART_SetConfig+0x4e4>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	f003 020f 	and.w	r2, r3, #15
 8002d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4422      	add	r2, r4
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d20:	51eb851f 	.word	0x51eb851f

08002d24 <__NVIC_SetPriority>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	; (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	; (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f06f 0004 	mvn.w	r0, #4
 8002d82:	f7ff ffcf 	bl	8002d24 <__NVIC_SetPriority>
#endif
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d92:	f3ef 8305 	mrs	r3, IPSR
 8002d96:	603b      	str	r3, [r7, #0]
  return(result);
 8002d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d9e:	f06f 0305 	mvn.w	r3, #5
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	e00c      	b.n	8002dc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <osKernelInitialize+0x44>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <osKernelInitialize+0x44>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	e002      	b.n	8002dc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002dc0:	687b      	ldr	r3, [r7, #4]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000016c 	.word	0x2000016c

08002dd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dda:	f3ef 8305 	mrs	r3, IPSR
 8002dde:	603b      	str	r3, [r7, #0]
  return(result);
 8002de0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <osKernelStart+0x1a>
    stat = osErrorISR;
 8002de6:	f06f 0305 	mvn.w	r3, #5
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	e010      	b.n	8002e10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <osKernelStart+0x48>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d109      	bne.n	8002e0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002df6:	f7ff ffbf 	bl	8002d78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <osKernelStart+0x48>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e00:	f001 f866 	bl	8003ed0 <vTaskStartScheduler>
      stat = osOK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	e002      	b.n	8002e10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e10:	687b      	ldr	r3, [r7, #4]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000016c 	.word	0x2000016c

08002e20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	; 0x38
 8002e24:	af04      	add	r7, sp, #16
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e30:	f3ef 8305 	mrs	r3, IPSR
 8002e34:	617b      	str	r3, [r7, #20]
  return(result);
 8002e36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d17e      	bne.n	8002f3a <osThreadNew+0x11a>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07b      	beq.n	8002f3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e46:	2318      	movs	r3, #24
 8002e48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d045      	beq.n	8002ee6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <osThreadNew+0x48>
        name = attr->name;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <osThreadNew+0x6e>
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b38      	cmp	r3, #56	; 0x38
 8002e80:	d805      	bhi.n	8002e8e <osThreadNew+0x6e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <osThreadNew+0x72>
        return (NULL);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e054      	b.n	8002f3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <osThreadNew+0xa8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b5b      	cmp	r3, #91	; 0x5b
 8002eb0:	d90a      	bls.n	8002ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <osThreadNew+0xa8>
        mem = 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e010      	b.n	8002eea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10c      	bne.n	8002eea <osThreadNew+0xca>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d108      	bne.n	8002eea <osThreadNew+0xca>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <osThreadNew+0xca>
          mem = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e001      	b.n	8002eea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d110      	bne.n	8002f12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ef8:	9202      	str	r2, [sp, #8]
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	6a3a      	ldr	r2, [r7, #32]
 8002f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fe0c 	bl	8003b24 <xTaskCreateStatic>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e013      	b.n	8002f3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d110      	bne.n	8002f3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fe57 	bl	8003bde <xTaskCreate>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <osThreadNew+0x11a>
            hTask = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f3a:	693b      	ldr	r3, [r7, #16]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3728      	adds	r7, #40	; 0x28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f4c:	f3ef 8305 	mrs	r3, IPSR
 8002f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <osDelay+0x1c>
    stat = osErrorISR;
 8002f58:	f06f 0305 	mvn.w	r3, #5
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e007      	b.n	8002f70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 ff7c 	bl	8003e68 <vTaskDelay>
    }
  }

  return (stat);
 8002f70:	68fb      	ldr	r3, [r7, #12]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a06      	ldr	r2, [pc, #24]	; (8002fac <vApplicationGetIdleTaskMemory+0x30>)
 8002f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000170 	.word	0x20000170
 8002fac:	200001cc 	.word	0x200001cc

08002fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8002fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8002fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	200003cc 	.word	0x200003cc
 8002fe0:	20000428 	.word	0x20000428

08002fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f103 0208 	add.w	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f103 0208 	add.w	r2, r3, #8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f103 0208 	add.w	r2, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309c:	d103      	bne.n	80030a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e00c      	b.n	80030c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3308      	adds	r3, #8
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e002      	b.n	80030b4 <vListInsert+0x2e>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d2f6      	bcs.n	80030ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6852      	ldr	r2, [r2, #4]
 8003118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	d103      	bne.n	800312c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1e5a      	subs	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003176:	f002 f84d 	bl	8005214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	441a      	add	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	3b01      	subs	r3, #1
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	441a      	add	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	22ff      	movs	r2, #255	; 0xff
 80031ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	22ff      	movs	r2, #255	; 0xff
 80031c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d114      	bne.n	80031f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01a      	beq.n	800320a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3310      	adds	r3, #16
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f903 	bl	80043e4 <xTaskRemoveFromEventList>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <xQueueGenericReset+0xcc>)
 80031e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	e009      	b.n	800320a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3310      	adds	r3, #16
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fef2 	bl	8002fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3324      	adds	r3, #36	; 0x24
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff feed 	bl	8002fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800320a:	f002 f833 	bl	8005274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	; 0x38
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <xQueueGenericCreateStatic+0x52>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <xQueueGenericCreateStatic+0x56>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <xQueueGenericCreateStatic+0x58>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	623b      	str	r3, [r7, #32]
}
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <xQueueGenericCreateStatic+0x7e>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <xQueueGenericCreateStatic+0x82>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <xQueueGenericCreateStatic+0x84>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	61fb      	str	r3, [r7, #28]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032ba:	2350      	movs	r3, #80	; 0x50
 80032bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b50      	cmp	r3, #80	; 0x50
 80032c2:	d00a      	beq.n	80032da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	61bb      	str	r3, [r7, #24]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f805 	bl	800330c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003304:	4618      	mov	r0, r3
 8003306:	3730      	adds	r7, #48	; 0x30
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e002      	b.n	800332e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800333a:	2101      	movs	r1, #1
 800333c:	69b8      	ldr	r0, [r7, #24]
 800333e:	f7ff ff05 	bl	800314c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003362:	2300      	movs	r3, #0
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <xQueueGenericSend+0x32>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <xQueueGenericSend+0x40>
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <xQueueGenericSend+0x44>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <xQueueGenericSend+0x46>
 8003398:	2300      	movs	r3, #0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <xQueueGenericSend+0x60>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d103      	bne.n	80033c2 <xQueueGenericSend+0x6e>
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <xQueueGenericSend+0x72>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <xQueueGenericSend+0x74>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	623b      	str	r3, [r7, #32]
}
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033e2:	f001 f9bd 	bl	8004760 <xTaskGetSchedulerState>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <xQueueGenericSend+0x9e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <xQueueGenericSend+0xa2>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <xQueueGenericSend+0xa4>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <xQueueGenericSend+0xbe>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	61fb      	str	r3, [r7, #28]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003412:	f001 feff 	bl	8005214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <xQueueGenericSend+0xd4>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d129      	bne.n	800347c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800342e:	f000 fa0b 	bl	8003848 <prvCopyDataToQueue>
 8003432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	3324      	adds	r3, #36	; 0x24
 8003440:	4618      	mov	r0, r3
 8003442:	f000 ffcf 	bl	80043e4 <xTaskRemoveFromEventList>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800344c:	4b3f      	ldr	r3, [pc, #252]	; (800354c <xQueueGenericSend+0x1f8>)
 800344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	e00a      	b.n	8003474 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003464:	4b39      	ldr	r3, [pc, #228]	; (800354c <xQueueGenericSend+0x1f8>)
 8003466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003474:	f001 fefe 	bl	8005274 <vPortExitCritical>
				return pdPASS;
 8003478:	2301      	movs	r3, #1
 800347a:	e063      	b.n	8003544 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003482:	f001 fef7 	bl	8005274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003486:	2300      	movs	r3, #0
 8003488:	e05c      	b.n	8003544 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	2b00      	cmp	r3, #0
 800348e:	d106      	bne.n	800349e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	4618      	mov	r0, r3
 8003496:	f001 f809 	bl	80044ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800349a:	2301      	movs	r3, #1
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800349e:	f001 fee9 	bl	8005274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034a2:	f000 fd7b 	bl	8003f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034a6:	f001 feb5 	bl	8005214 <vPortEnterCritical>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b6:	d103      	bne.n	80034c0 <xQueueGenericSend+0x16c>
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c6:	b25b      	sxtb	r3, r3
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034cc:	d103      	bne.n	80034d6 <xQueueGenericSend+0x182>
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d6:	f001 fecd 	bl	8005274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034da:	1d3a      	adds	r2, r7, #4
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fff8 	bl	80044d8 <xTaskCheckForTimeOut>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d124      	bne.n	8003538 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f0:	f000 faa2 	bl	8003a38 <prvIsQueueFull>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	3310      	adds	r3, #16
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 ff1e 	bl	8004344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350a:	f000 fa2d 	bl	8003968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800350e:	f000 fd53 	bl	8003fb8 <xTaskResumeAll>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	f47f af7c 	bne.w	8003412 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <xQueueGenericSend+0x1f8>)
 800351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	e772      	b.n	8003412 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800352c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800352e:	f000 fa1b 	bl	8003968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003532:	f000 fd41 	bl	8003fb8 <xTaskResumeAll>
 8003536:	e76c      	b.n	8003412 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353a:	f000 fa15 	bl	8003968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800353e:	f000 fd3b 	bl	8003fb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003544:	4618      	mov	r0, r3
 8003546:	3738      	adds	r7, #56	; 0x38
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b090      	sub	sp, #64	; 0x40
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <xQueueGenericSendFromISR+0x3c>
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <xQueueGenericSendFromISR+0x40>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <xQueueGenericSendFromISR+0x42>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d103      	bne.n	80035ba <xQueueGenericSendFromISR+0x6a>
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <xQueueGenericSendFromISR+0x6e>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <xQueueGenericSendFromISR+0x70>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	623b      	str	r3, [r7, #32]
}
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035da:	f001 fefd 	bl	80053d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035de:	f3ef 8211 	mrs	r2, BASEPRI
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	61fa      	str	r2, [r7, #28]
 80035f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <xQueueGenericSendFromISR+0xbc>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d12f      	bne.n	800366c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003622:	f000 f911 	bl	8003848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003626:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362e:	d112      	bne.n	8003656 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d016      	beq.n	8003666 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363a:	3324      	adds	r3, #36	; 0x24
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fed1 	bl	80043e4 <xTaskRemoveFromEventList>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00e      	beq.n	8003666 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e007      	b.n	8003666 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800365a:	3301      	adds	r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	b25a      	sxtb	r2, r3
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003666:	2301      	movs	r3, #1
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800366a:	e001      	b.n	8003670 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800366c:	2300      	movs	r3, #0
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800367a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800367e:	4618      	mov	r0, r3
 8003680:	3740      	adds	r7, #64	; 0x40
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <xQueueReceive+0x30>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	623b      	str	r3, [r7, #32]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <xQueueReceive+0x3e>
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <xQueueReceive+0x42>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <xQueueReceive+0x44>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xQueueReceive+0x5e>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61fb      	str	r3, [r7, #28]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e6:	f001 f83b 	bl	8004760 <xTaskGetSchedulerState>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <xQueueReceive+0x6e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <xQueueReceive+0x72>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <xQueueReceive+0x74>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueReceive+0x8e>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	61bb      	str	r3, [r7, #24]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003716:	f001 fd7d 	bl	8005214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01f      	beq.n	8003766 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800372a:	f000 f8f7 	bl	800391c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	1e5a      	subs	r2, r3, #1
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00f      	beq.n	800375e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	3310      	adds	r3, #16
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fe4e 	bl	80043e4 <xTaskRemoveFromEventList>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <xQueueReceive+0x1bc>)
 8003750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800375e:	f001 fd89 	bl	8005274 <vPortExitCritical>
				return pdPASS;
 8003762:	2301      	movs	r3, #1
 8003764:	e069      	b.n	800383a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800376c:	f001 fd82 	bl	8005274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003770:	2300      	movs	r3, #0
 8003772:	e062      	b.n	800383a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800377a:	f107 0310 	add.w	r3, r7, #16
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fe94 	bl	80044ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003784:	2301      	movs	r3, #1
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003788:	f001 fd74 	bl	8005274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800378c:	f000 fc06 	bl	8003f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003790:	f001 fd40 	bl	8005214 <vPortEnterCritical>
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800379a:	b25b      	sxtb	r3, r3
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a0:	d103      	bne.n	80037aa <xQueueReceive+0x122>
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b6:	d103      	bne.n	80037c0 <xQueueReceive+0x138>
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c0:	f001 fd58 	bl	8005274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c4:	1d3a      	adds	r2, r7, #4
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fe83 	bl	80044d8 <xTaskCheckForTimeOut>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d123      	bne.n	8003820 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037da:	f000 f917 	bl	8003a0c <prvIsQueueEmpty>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d017      	beq.n	8003814 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	3324      	adds	r3, #36	; 0x24
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fda9 	bl	8004344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f4:	f000 f8b8 	bl	8003968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037f8:	f000 fbde 	bl	8003fb8 <xTaskResumeAll>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d189      	bne.n	8003716 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <xQueueReceive+0x1bc>)
 8003804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	e780      	b.n	8003716 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003816:	f000 f8a7 	bl	8003968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800381a:	f000 fbcd 	bl	8003fb8 <xTaskResumeAll>
 800381e:	e77a      	b.n	8003716 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003822:	f000 f8a1 	bl	8003968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003826:	f000 fbc7 	bl	8003fb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800382a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382c:	f000 f8ee 	bl	8003a0c <prvIsQueueEmpty>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	f43f af6f 	beq.w	8003716 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800383a:	4618      	mov	r0, r3
 800383c:	3730      	adds	r7, #48	; 0x30
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10d      	bne.n	8003882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d14d      	bne.n	800390a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 ff92 	bl	800479c <xTaskPriorityDisinherit>
 8003878:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	e043      	b.n	800390a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d119      	bne.n	80038bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6858      	ldr	r0, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	461a      	mov	r2, r3
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	f002 f81e 	bl	80058d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	441a      	add	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d32b      	bcc.n	800390a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	e026      	b.n	800390a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68d8      	ldr	r0, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	461a      	mov	r2, r3
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	f002 f804 	bl	80058d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	425b      	negs	r3, r3
 80038d6:	441a      	add	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d207      	bcs.n	80038f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	425b      	negs	r3, r3
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d105      	bne.n	800390a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3b01      	subs	r3, #1
 8003908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003912:	697b      	ldr	r3, [r7, #20]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d018      	beq.n	8003960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	441a      	add	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	429a      	cmp	r2, r3
 8003946:	d303      	bcc.n	8003950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68d9      	ldr	r1, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	461a      	mov	r2, r3
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	f001 ffba 	bl	80058d4 <memcpy>
	}
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003970:	f001 fc50 	bl	8005214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800397a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800397c:	e011      	b.n	80039a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3324      	adds	r3, #36	; 0x24
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fd2a 	bl	80043e4 <xTaskRemoveFromEventList>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003996:	f000 fe01 	bl	800459c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	3b01      	subs	r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	dce9      	bgt.n	800397e <prvUnlockQueue+0x16>
 80039aa:	e000      	b.n	80039ae <prvUnlockQueue+0x46>
					break;
 80039ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	22ff      	movs	r2, #255	; 0xff
 80039b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039b6:	f001 fc5d 	bl	8005274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039ba:	f001 fc2b 	bl	8005214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039c6:	e011      	b.n	80039ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d012      	beq.n	80039f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3310      	adds	r3, #16
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fd05 	bl	80043e4 <xTaskRemoveFromEventList>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039e0:	f000 fddc 	bl	800459c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039e4:	7bbb      	ldrb	r3, [r7, #14]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	dce9      	bgt.n	80039c8 <prvUnlockQueue+0x60>
 80039f4:	e000      	b.n	80039f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a00:	f001 fc38 	bl	8005274 <vPortExitCritical>
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a14:	f001 fbfe 	bl	8005214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e001      	b.n	8003a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a2a:	f001 fc23 	bl	8005274 <vPortExitCritical>

	return xReturn;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a40:	f001 fbe8 	bl	8005214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d102      	bne.n	8003a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e001      	b.n	8003a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a5a:	f001 fc0b 	bl	8005274 <vPortExitCritical>

	return xReturn;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e014      	b.n	8003aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a78:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <vQueueAddToRegistry+0x50>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <vQueueAddToRegistry+0x50>)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <vQueueAddToRegistry+0x50>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a9a:	e006      	b.n	8003aaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b07      	cmp	r3, #7
 8003aa6:	d9e7      	bls.n	8003a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000828 	.word	0x20000828

08003abc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003acc:	f001 fba2 	bl	8005214 <vPortEnterCritical>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003adc:	d103      	bne.n	8003ae6 <vQueueWaitForMessageRestricted+0x2a>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aec:	b25b      	sxtb	r3, r3
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af2:	d103      	bne.n	8003afc <vQueueWaitForMessageRestricted+0x40>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003afc:	f001 fbba 	bl	8005274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	3324      	adds	r3, #36	; 0x24
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fc3b 	bl	800438c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b16:	6978      	ldr	r0, [r7, #20]
 8003b18:	f7ff ff26 	bl	8003968 <prvUnlockQueue>
	}
 8003b1c:	bf00      	nop
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	; 0x38
 8003b28:	af04      	add	r7, sp, #16
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	623b      	str	r3, [r7, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xTaskCreateStatic+0x46>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	61fb      	str	r3, [r7, #28]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b6a:	235c      	movs	r3, #92	; 0x5c
 8003b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b5c      	cmp	r3, #92	; 0x5c
 8003b72:	d00a      	beq.n	8003b8a <xTaskCreateStatic+0x66>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	61bb      	str	r3, [r7, #24]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01e      	beq.n	8003bd0 <xTaskCreateStatic+0xac>
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01b      	beq.n	8003bd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003baa:	2300      	movs	r3, #0
 8003bac:	9303      	str	r3, [sp, #12]
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	9302      	str	r3, [sp, #8]
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f850 	bl	8003c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bca:	f000 f8dd 	bl	8003d88 <prvAddNewTaskToReadyList>
 8003bce:	e001      	b.n	8003bd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bd4:	697b      	ldr	r3, [r7, #20]
	}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3728      	adds	r7, #40	; 0x28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b08c      	sub	sp, #48	; 0x30
 8003be2:	af04      	add	r7, sp, #16
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 fc30 	bl	8005458 <pvPortMalloc>
 8003bf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c00:	205c      	movs	r0, #92	; 0x5c
 8003c02:	f001 fc29 	bl	8005458 <pvPortMalloc>
 8003c06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
 8003c14:	e005      	b.n	8003c22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c16:	6978      	ldr	r0, [r7, #20]
 8003c18:	f001 fcea 	bl	80055f0 <vPortFree>
 8003c1c:	e001      	b.n	8003c22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d017      	beq.n	8003c58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	2300      	movs	r3, #0
 8003c34:	9303      	str	r3, [sp, #12]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f80e 	bl	8003c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c4c:	69f8      	ldr	r0, [r7, #28]
 8003c4e:	f000 f89b 	bl	8003d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e002      	b.n	8003c5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	21a5      	movs	r1, #165	; 0xa5
 8003c82:	f001 fdf3 	bl	800586c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c90:	3b01      	subs	r3, #1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	617b      	str	r3, [r7, #20]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01f      	beq.n	8003d06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e012      	b.n	8003cf2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	7819      	ldrb	r1, [r3, #0]
 8003cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3334      	adds	r3, #52	; 0x34
 8003cdc:	460a      	mov	r2, r1
 8003cde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b0f      	cmp	r3, #15
 8003cf6:	d9e9      	bls.n	8003ccc <prvInitialiseNewTask+0x64>
 8003cf8:	e000      	b.n	8003cfc <prvInitialiseNewTask+0x94>
			{
				break;
 8003cfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d04:	e003      	b.n	8003d0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	2b37      	cmp	r3, #55	; 0x37
 8003d12:	d901      	bls.n	8003d18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d14:	2337      	movs	r3, #55	; 0x37
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	2200      	movs	r2, #0
 8003d28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f978 	bl	8003024 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	3318      	adds	r3, #24
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f973 	bl	8003024 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	2200      	movs	r2, #0
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	69b8      	ldr	r0, [r7, #24]
 8003d68:	f001 f928 	bl	8004fbc <pxPortInitialiseStack>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d7e:	bf00      	nop
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d90:	f001 fa40 	bl	8005214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <prvAddNewTaskToReadyList+0xc4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <prvAddNewTaskToReadyList+0xc4>)
 8003d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003da6:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <prvAddNewTaskToReadyList+0xc4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d110      	bne.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003db4:	f000 fc16 	bl	80045e4 <prvInitialiseTaskLists>
 8003db8:	e00d      	b.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <prvAddNewTaskToReadyList+0xcc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d802      	bhi.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <prvAddNewTaskToReadyList+0xd0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <prvAddNewTaskToReadyList+0xd0>)
 8003dde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <prvAddNewTaskToReadyList+0xd0>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <prvAddNewTaskToReadyList+0xd4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d903      	bls.n	8003dfc <prvAddNewTaskToReadyList+0x74>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <prvAddNewTaskToReadyList+0xd4>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <prvAddNewTaskToReadyList+0xd8>)
 8003e0a:	441a      	add	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f7ff f913 	bl	800303e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e18:	f001 fa2c 	bl	8005274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <prvAddNewTaskToReadyList+0xcc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvAddNewTaskToReadyList+0xc8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d207      	bcs.n	8003e42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <prvAddNewTaskToReadyList+0xdc>)
 8003e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000d3c 	.word	0x20000d3c
 8003e50:	20000868 	.word	0x20000868
 8003e54:	20000d48 	.word	0x20000d48
 8003e58:	20000d58 	.word	0x20000d58
 8003e5c:	20000d44 	.word	0x20000d44
 8003e60:	2000086c 	.word	0x2000086c
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d017      	beq.n	8003eaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <vTaskDelay+0x60>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <vTaskDelay+0x30>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60bb      	str	r3, [r7, #8]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e98:	f000 f880 	bl	8003f9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fcea 	bl	8004878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ea4:	f000 f888 	bl	8003fb8 <xTaskResumeAll>
 8003ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d107      	bne.n	8003ec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <vTaskDelay+0x64>)
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000d64 	.word	0x20000d64
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ede:	463a      	mov	r2, r7
 8003ee0:	1d39      	adds	r1, r7, #4
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff f848 	bl	8002f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	9202      	str	r2, [sp, #8]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	460a      	mov	r2, r1
 8003efe:	4921      	ldr	r1, [pc, #132]	; (8003f84 <vTaskStartScheduler+0xb4>)
 8003f00:	4821      	ldr	r0, [pc, #132]	; (8003f88 <vTaskStartScheduler+0xb8>)
 8003f02:	f7ff fe0f 	bl	8003b24 <xTaskCreateStatic>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <vTaskStartScheduler+0xbc>)
 8003f0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f0c:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <vTaskStartScheduler+0xbc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f14:	2301      	movs	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e001      	b.n	8003f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d102      	bne.n	8003f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f24:	f000 fcfc 	bl	8004920 <xTimerCreateTimerTask>
 8003f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d116      	bne.n	8003f5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	613b      	str	r3, [r7, #16]
}
 8003f42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <vTaskStartScheduler+0xc0>)
 8003f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <vTaskStartScheduler+0xc4>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <vTaskStartScheduler+0xc8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f58:	f001 f8ba 	bl	80050d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f5c:	e00e      	b.n	8003f7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f64:	d10a      	bne.n	8003f7c <vTaskStartScheduler+0xac>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fb      	str	r3, [r7, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <vTaskStartScheduler+0xaa>
}
 8003f7c:	bf00      	nop
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	080061b8 	.word	0x080061b8
 8003f88:	080045b5 	.word	0x080045b5
 8003f8c:	20000d60 	.word	0x20000d60
 8003f90:	20000d5c 	.word	0x20000d5c
 8003f94:	20000d48 	.word	0x20000d48
 8003f98:	20000d40 	.word	0x20000d40

08003f9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <vTaskSuspendAll+0x18>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	4a03      	ldr	r2, [pc, #12]	; (8003fb4 <vTaskSuspendAll+0x18>)
 8003fa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20000d64 	.word	0x20000d64

08003fb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fc6:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <xTaskResumeAll+0x118>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	603b      	str	r3, [r7, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fe4:	f001 f916 	bl	8005214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fe8:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <xTaskResumeAll+0x118>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	4a38      	ldr	r2, [pc, #224]	; (80040d0 <xTaskResumeAll+0x118>)
 8003ff0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff2:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <xTaskResumeAll+0x118>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d162      	bne.n	80040c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <xTaskResumeAll+0x11c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d05e      	beq.n	80040c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004002:	e02f      	b.n	8004064 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <xTaskResumeAll+0x120>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3318      	adds	r3, #24
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff f871 	bl	80030f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3304      	adds	r3, #4
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff f86c 	bl	80030f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <xTaskResumeAll+0x124>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d903      	bls.n	8004034 <xTaskResumeAll+0x7c>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <xTaskResumeAll+0x124>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <xTaskResumeAll+0x128>)
 8004042:	441a      	add	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f7fe fff7 	bl	800303e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4b23      	ldr	r3, [pc, #140]	; (80040e4 <xTaskResumeAll+0x12c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <xTaskResumeAll+0x130>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004064:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <xTaskResumeAll+0x120>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1cb      	bne.n	8004004 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004072:	f000 fb55 	bl	8004720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <xTaskResumeAll+0x134>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004082:	f000 f847 	bl	8004114 <xTaskIncrementTick>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800408c:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <xTaskResumeAll+0x130>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3b01      	subs	r3, #1
 8004096:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f1      	bne.n	8004082 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800409e:	4b13      	ldr	r3, [pc, #76]	; (80040ec <xTaskResumeAll+0x134>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <xTaskResumeAll+0x130>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <xTaskResumeAll+0x138>)
 80040b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040c0:	f001 f8d8 	bl	8005274 <vPortExitCritical>

	return xAlreadyYielded;
 80040c4:	68bb      	ldr	r3, [r7, #8]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000d64 	.word	0x20000d64
 80040d4:	20000d3c 	.word	0x20000d3c
 80040d8:	20000cfc 	.word	0x20000cfc
 80040dc:	20000d44 	.word	0x20000d44
 80040e0:	2000086c 	.word	0x2000086c
 80040e4:	20000868 	.word	0x20000868
 80040e8:	20000d50 	.word	0x20000d50
 80040ec:	20000d4c 	.word	0x20000d4c
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <xTaskGetTickCount+0x1c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004100:	687b      	ldr	r3, [r7, #4]
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000d40 	.word	0x20000d40

08004114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <xTaskIncrementTick+0x148>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 808f 	bne.w	8004246 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004128:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <xTaskIncrementTick+0x14c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004130:	4a4b      	ldr	r2, [pc, #300]	; (8004260 <xTaskIncrementTick+0x14c>)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d120      	bne.n	800417e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800413c:	4b49      	ldr	r3, [pc, #292]	; (8004264 <xTaskIncrementTick+0x150>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <xTaskIncrementTick+0x48>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	603b      	str	r3, [r7, #0]
}
 8004158:	bf00      	nop
 800415a:	e7fe      	b.n	800415a <xTaskIncrementTick+0x46>
 800415c:	4b41      	ldr	r3, [pc, #260]	; (8004264 <xTaskIncrementTick+0x150>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <xTaskIncrementTick+0x154>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3f      	ldr	r2, [pc, #252]	; (8004264 <xTaskIncrementTick+0x150>)
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <xTaskIncrementTick+0x154>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	4b3e      	ldr	r3, [pc, #248]	; (800426c <xTaskIncrementTick+0x158>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	4a3d      	ldr	r2, [pc, #244]	; (800426c <xTaskIncrementTick+0x158>)
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	f000 fad1 	bl	8004720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800417e:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <xTaskIncrementTick+0x15c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	429a      	cmp	r2, r3
 8004186:	d349      	bcc.n	800421c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <xTaskIncrementTick+0x150>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004192:	4b37      	ldr	r3, [pc, #220]	; (8004270 <xTaskIncrementTick+0x15c>)
 8004194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004198:	601a      	str	r2, [r3, #0]
					break;
 800419a:	e03f      	b.n	800421c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800419c:	4b31      	ldr	r3, [pc, #196]	; (8004264 <xTaskIncrementTick+0x150>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d203      	bcs.n	80041bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041b4:	4a2e      	ldr	r2, [pc, #184]	; (8004270 <xTaskIncrementTick+0x15c>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041ba:	e02f      	b.n	800421c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3304      	adds	r3, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe ff99 	bl	80030f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	3318      	adds	r3, #24
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe ff90 	bl	80030f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <xTaskIncrementTick+0x160>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d903      	bls.n	80041ec <xTaskIncrementTick+0xd8>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	4a22      	ldr	r2, [pc, #136]	; (8004274 <xTaskIncrementTick+0x160>)
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <xTaskIncrementTick+0x164>)
 80041fa:	441a      	add	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3304      	adds	r3, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f7fe ff1b 	bl	800303e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <xTaskIncrementTick+0x168>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	429a      	cmp	r2, r3
 8004214:	d3b8      	bcc.n	8004188 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800421a:	e7b5      	b.n	8004188 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800421c:	4b17      	ldr	r3, [pc, #92]	; (800427c <xTaskIncrementTick+0x168>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	4915      	ldr	r1, [pc, #84]	; (8004278 <xTaskIncrementTick+0x164>)
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d901      	bls.n	8004238 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <xTaskIncrementTick+0x16c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004240:	2301      	movs	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e004      	b.n	8004250 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <xTaskIncrementTick+0x170>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <xTaskIncrementTick+0x170>)
 800424e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004250:	697b      	ldr	r3, [r7, #20]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000d64 	.word	0x20000d64
 8004260:	20000d40 	.word	0x20000d40
 8004264:	20000cf4 	.word	0x20000cf4
 8004268:	20000cf8 	.word	0x20000cf8
 800426c:	20000d54 	.word	0x20000d54
 8004270:	20000d5c 	.word	0x20000d5c
 8004274:	20000d44 	.word	0x20000d44
 8004278:	2000086c 	.word	0x2000086c
 800427c:	20000868 	.word	0x20000868
 8004280:	20000d50 	.word	0x20000d50
 8004284:	20000d4c 	.word	0x20000d4c

08004288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800428e:	4b28      	ldr	r3, [pc, #160]	; (8004330 <vTaskSwitchContext+0xa8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004296:	4b27      	ldr	r3, [pc, #156]	; (8004334 <vTaskSwitchContext+0xac>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800429c:	e041      	b.n	8004322 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800429e:	4b25      	ldr	r3, [pc, #148]	; (8004334 <vTaskSwitchContext+0xac>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <vTaskSwitchContext+0xb0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e010      	b.n	80042ce <vTaskSwitchContext+0x46>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	607b      	str	r3, [r7, #4]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <vTaskSwitchContext+0x3e>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	491b      	ldr	r1, [pc, #108]	; (800433c <vTaskSwitchContext+0xb4>)
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0e4      	beq.n	80042ac <vTaskSwitchContext+0x24>
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <vTaskSwitchContext+0xb4>)
 80042ee:	4413      	add	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3308      	adds	r3, #8
 8004304:	429a      	cmp	r2, r3
 8004306:	d104      	bne.n	8004312 <vTaskSwitchContext+0x8a>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a09      	ldr	r2, [pc, #36]	; (8004340 <vTaskSwitchContext+0xb8>)
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4a06      	ldr	r2, [pc, #24]	; (8004338 <vTaskSwitchContext+0xb0>)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6013      	str	r3, [r2, #0]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000d64 	.word	0x20000d64
 8004334:	20000d50 	.word	0x20000d50
 8004338:	20000d44 	.word	0x20000d44
 800433c:	2000086c 	.word	0x2000086c
 8004340:	20000868 	.word	0x20000868

08004344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <vTaskPlaceOnEventList+0x44>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3318      	adds	r3, #24
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe fe87 	bl	8003086 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004378:	2101      	movs	r1, #1
 800437a:	6838      	ldr	r0, [r7, #0]
 800437c:	f000 fa7c 	bl	8004878 <prvAddCurrentTaskToDelayedList>
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000868 	.word	0x20000868

0800438c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	617b      	str	r3, [r7, #20]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3318      	adds	r3, #24
 80043ba:	4619      	mov	r1, r3
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7fe fe3e 	bl	800303e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80043c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	68b8      	ldr	r0, [r7, #8]
 80043d2:	f000 fa51 	bl	8004878 <prvAddCurrentTaskToDelayedList>
	}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000868 	.word	0x20000868

080043e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60fb      	str	r3, [r7, #12]
}
 800440c:	bf00      	nop
 800440e:	e7fe      	b.n	800440e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	3318      	adds	r3, #24
 8004414:	4618      	mov	r0, r3
 8004416:	f7fe fe6f 	bl	80030f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800441a:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <xTaskRemoveFromEventList+0xb0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11d      	bne.n	800445e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fe66 	bl	80030f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	4b19      	ldr	r3, [pc, #100]	; (8004498 <xTaskRemoveFromEventList+0xb4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d903      	bls.n	8004440 <xTaskRemoveFromEventList+0x5c>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4a16      	ldr	r2, [pc, #88]	; (8004498 <xTaskRemoveFromEventList+0xb4>)
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <xTaskRemoveFromEventList+0xb8>)
 800444e:	441a      	add	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	3304      	adds	r3, #4
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f7fe fdf1 	bl	800303e <vListInsertEnd>
 800445c:	e005      	b.n	800446a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3318      	adds	r3, #24
 8004462:	4619      	mov	r1, r3
 8004464:	480e      	ldr	r0, [pc, #56]	; (80044a0 <xTaskRemoveFromEventList+0xbc>)
 8004466:	f7fe fdea 	bl	800303e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <xTaskRemoveFromEventList+0xc0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	429a      	cmp	r2, r3
 8004476:	d905      	bls.n	8004484 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <xTaskRemoveFromEventList+0xc4>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e001      	b.n	8004488 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004488:	697b      	ldr	r3, [r7, #20]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000d64 	.word	0x20000d64
 8004498:	20000d44 	.word	0x20000d44
 800449c:	2000086c 	.word	0x2000086c
 80044a0:	20000cfc 	.word	0x20000cfc
 80044a4:	20000868 	.word	0x20000868
 80044a8:	20000d50 	.word	0x20000d50

080044ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <vTaskInternalSetTimeOutState+0x24>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <vTaskInternalSetTimeOutState+0x28>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	605a      	str	r2, [r3, #4]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000d54 	.word	0x20000d54
 80044d4:	20000d40 	.word	0x20000d40

080044d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	613b      	str	r3, [r7, #16]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60fb      	str	r3, [r7, #12]
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800451a:	f000 fe7b 	bl	8005214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <xTaskCheckForTimeOut+0xbc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004536:	d102      	bne.n	800453e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e023      	b.n	8004586 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <xTaskCheckForTimeOut+0xc0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d007      	beq.n	800455a <xTaskCheckForTimeOut+0x82>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	e015      	b.n	8004586 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	d20b      	bcs.n	800457c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff9b 	bl	80044ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e004      	b.n	8004586 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004586:	f000 fe75 	bl	8005274 <vPortExitCritical>

	return xReturn;
 800458a:	69fb      	ldr	r3, [r7, #28]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000d40 	.word	0x20000d40
 8004598:	20000d54 	.word	0x20000d54

0800459c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <vTaskMissedYield+0x14>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20000d50 	.word	0x20000d50

080045b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045bc:	f000 f852 	bl	8004664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <prvIdleTask+0x28>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d9f9      	bls.n	80045bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <prvIdleTask+0x2c>)
 80045ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045d8:	e7f0      	b.n	80045bc <prvIdleTask+0x8>
 80045da:	bf00      	nop
 80045dc:	2000086c 	.word	0x2000086c
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	e00c      	b.n	800460a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <prvInitialiseTaskLists+0x60>)
 80045fc:	4413      	add	r3, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fcf0 	bl	8002fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3301      	adds	r3, #1
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b37      	cmp	r3, #55	; 0x37
 800460e:	d9ef      	bls.n	80045f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004610:	480d      	ldr	r0, [pc, #52]	; (8004648 <prvInitialiseTaskLists+0x64>)
 8004612:	f7fe fce7 	bl	8002fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <prvInitialiseTaskLists+0x68>)
 8004618:	f7fe fce4 	bl	8002fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800461c:	480c      	ldr	r0, [pc, #48]	; (8004650 <prvInitialiseTaskLists+0x6c>)
 800461e:	f7fe fce1 	bl	8002fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004622:	480c      	ldr	r0, [pc, #48]	; (8004654 <prvInitialiseTaskLists+0x70>)
 8004624:	f7fe fcde 	bl	8002fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004628:	480b      	ldr	r0, [pc, #44]	; (8004658 <prvInitialiseTaskLists+0x74>)
 800462a:	f7fe fcdb 	bl	8002fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <prvInitialiseTaskLists+0x78>)
 8004630:	4a05      	ldr	r2, [pc, #20]	; (8004648 <prvInitialiseTaskLists+0x64>)
 8004632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <prvInitialiseTaskLists+0x7c>)
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <prvInitialiseTaskLists+0x68>)
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	2000086c 	.word	0x2000086c
 8004648:	20000ccc 	.word	0x20000ccc
 800464c:	20000ce0 	.word	0x20000ce0
 8004650:	20000cfc 	.word	0x20000cfc
 8004654:	20000d10 	.word	0x20000d10
 8004658:	20000d28 	.word	0x20000d28
 800465c:	20000cf4 	.word	0x20000cf4
 8004660:	20000cf8 	.word	0x20000cf8

08004664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800466a:	e019      	b.n	80046a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800466c:	f000 fdd2 	bl	8005214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <prvCheckTasksWaitingTermination+0x50>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe fd3b 	bl	80030f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <prvCheckTasksWaitingTermination+0x54>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3b01      	subs	r3, #1
 8004688:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <prvCheckTasksWaitingTermination+0x54>)
 800468a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800468c:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <prvCheckTasksWaitingTermination+0x58>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3b01      	subs	r3, #1
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <prvCheckTasksWaitingTermination+0x58>)
 8004694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004696:	f000 fded 	bl	8005274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f810 	bl	80046c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <prvCheckTasksWaitingTermination+0x58>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e1      	bne.n	800466c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000d10 	.word	0x20000d10
 80046b8:	20000d3c 	.word	0x20000d3c
 80046bc:	20000d24 	.word	0x20000d24

080046c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d108      	bne.n	80046e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 ff8a 	bl	80055f0 <vPortFree>
				vPortFree( pxTCB );
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 ff87 	bl	80055f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046e2:	e018      	b.n	8004716 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d103      	bne.n	80046f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 ff7e 	bl	80055f0 <vPortFree>
	}
 80046f4:	e00f      	b.n	8004716 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d00a      	beq.n	8004716 <prvDeleteTCB+0x56>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <prvDeleteTCB+0x54>
	}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvResetNextTaskUnblockTime+0x38>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <prvResetNextTaskUnblockTime+0x3c>)
 8004732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004738:	e008      	b.n	800474c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <prvResetNextTaskUnblockTime+0x38>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <prvResetNextTaskUnblockTime+0x3c>)
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	20000cf4 	.word	0x20000cf4
 800475c:	20000d5c 	.word	0x20000d5c

08004760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <xTaskGetSchedulerState+0x34>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800476e:	2301      	movs	r3, #1
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	e008      	b.n	8004786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <xTaskGetSchedulerState+0x38>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800477c:	2302      	movs	r3, #2
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	e001      	b.n	8004786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004786:	687b      	ldr	r3, [r7, #4]
	}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	20000d48 	.word	0x20000d48
 8004798:	20000d64 	.word	0x20000d64

0800479c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d056      	beq.n	8004860 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <xTaskPriorityDisinherit+0xd0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d00a      	beq.n	80047d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	60fb      	str	r3, [r7, #12]
}
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60bb      	str	r3, [r7, #8]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	429a      	cmp	r2, r3
 8004804:	d02c      	beq.n	8004860 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d128      	bne.n	8004860 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fc70 	bl	80030f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <xTaskPriorityDisinherit+0xd4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d903      	bls.n	8004840 <xTaskPriorityDisinherit+0xa4>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <xTaskPriorityDisinherit+0xd4>)
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4a09      	ldr	r2, [pc, #36]	; (8004874 <xTaskPriorityDisinherit+0xd8>)
 800484e:	441a      	add	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7fe fbf1 	bl	800303e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004860:	697b      	ldr	r3, [r7, #20]
	}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000868 	.word	0x20000868
 8004870:	20000d44 	.word	0x20000d44
 8004874:	2000086c 	.word	0x2000086c

08004878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004882:	4b21      	ldr	r3, [pc, #132]	; (8004908 <prvAddCurrentTaskToDelayedList+0x90>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <prvAddCurrentTaskToDelayedList+0x94>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3304      	adds	r3, #4
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fc32 	bl	80030f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800489a:	d10a      	bne.n	80048b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <prvAddCurrentTaskToDelayedList+0x94>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4819      	ldr	r0, [pc, #100]	; (8004910 <prvAddCurrentTaskToDelayedList+0x98>)
 80048ac:	f7fe fbc7 	bl	800303e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048b0:	e026      	b.n	8004900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048ba:	4b14      	ldr	r3, [pc, #80]	; (800490c <prvAddCurrentTaskToDelayedList+0x94>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d209      	bcs.n	80048de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <prvAddCurrentTaskToDelayedList+0x94>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f7fe fbd5 	bl	8003086 <vListInsert>
}
 80048dc:	e010      	b.n	8004900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <prvAddCurrentTaskToDelayedList+0x94>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f7fe fbcb 	bl	8003086 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <prvAddCurrentTaskToDelayedList+0xa4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d202      	bcs.n	8004900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <prvAddCurrentTaskToDelayedList+0xa4>)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000d40 	.word	0x20000d40
 800490c:	20000868 	.word	0x20000868
 8004910:	20000d28 	.word	0x20000d28
 8004914:	20000cf8 	.word	0x20000cf8
 8004918:	20000cf4 	.word	0x20000cf4
 800491c:	20000d5c 	.word	0x20000d5c

08004920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800492a:	f000 fb07 	bl	8004f3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800492e:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <xTimerCreateTimerTask+0x80>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d021      	beq.n	800497a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800493e:	1d3a      	adds	r2, r7, #4
 8004940:	f107 0108 	add.w	r1, r7, #8
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fb31 	bl	8002fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	9202      	str	r2, [sp, #8]
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	2302      	movs	r3, #2
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2300      	movs	r3, #0
 800495e:	460a      	mov	r2, r1
 8004960:	4910      	ldr	r1, [pc, #64]	; (80049a4 <xTimerCreateTimerTask+0x84>)
 8004962:	4811      	ldr	r0, [pc, #68]	; (80049a8 <xTimerCreateTimerTask+0x88>)
 8004964:	f7ff f8de 	bl	8003b24 <xTaskCreateStatic>
 8004968:	4603      	mov	r3, r0
 800496a:	4a10      	ldr	r2, [pc, #64]	; (80049ac <xTimerCreateTimerTask+0x8c>)
 800496c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <xTimerCreateTimerTask+0x8c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004976:	2301      	movs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	613b      	str	r3, [r7, #16]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004996:	697b      	ldr	r3, [r7, #20]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000d98 	.word	0x20000d98
 80049a4:	080061c0 	.word	0x080061c0
 80049a8:	08004ae5 	.word	0x08004ae5
 80049ac:	20000d9c 	.word	0x20000d9c

080049b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xTimerGenericCommand+0x2e>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	623b      	str	r3, [r7, #32]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <xTimerGenericCommand+0x98>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d02a      	beq.n	8004a3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	dc18      	bgt.n	8004a2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049f8:	f7ff feb2 	bl	8004760 <xTaskGetSchedulerState>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d109      	bne.n	8004a16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a02:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <xTimerGenericCommand+0x98>)
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	f107 0110 	add.w	r1, r7, #16
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0e:	f7fe fca1 	bl	8003354 <xQueueGenericSend>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24
 8004a14:	e012      	b.n	8004a3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <xTimerGenericCommand+0x98>)
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	f107 0110 	add.w	r1, r7, #16
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2200      	movs	r2, #0
 8004a22:	f7fe fc97 	bl	8003354 <xQueueGenericSend>
 8004a26:	6278      	str	r0, [r7, #36]	; 0x24
 8004a28:	e008      	b.n	8004a3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <xTimerGenericCommand+0x98>)
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	f107 0110 	add.w	r1, r7, #16
 8004a32:	2300      	movs	r3, #0
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	f7fe fd8b 	bl	8003550 <xQueueGenericSendFromISR>
 8004a3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000d98 	.word	0x20000d98

08004a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a56:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <prvProcessExpiredTimer+0x94>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe fb47 	bl	80030f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d022      	beq.n	8004abe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	18d1      	adds	r1, r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	6978      	ldr	r0, [r7, #20]
 8004a86:	f000 f8d1 	bl	8004c2c <prvInsertTimerInActiveList>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01f      	beq.n	8004ad0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a90:	2300      	movs	r3, #0
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2300      	movs	r3, #0
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	2100      	movs	r1, #0
 8004a9a:	6978      	ldr	r0, [r7, #20]
 8004a9c:	f7ff ff88 	bl	80049b0 <xTimerGenericCommand>
 8004aa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d113      	bne.n	8004ad0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60fb      	str	r3, [r7, #12]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	6978      	ldr	r0, [r7, #20]
 8004ad6:	4798      	blx	r3
}
 8004ad8:	bf00      	nop
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000d90 	.word	0x20000d90

08004ae4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f857 	bl	8004ba4 <prvGetNextExpireTime>
 8004af6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4619      	mov	r1, r3
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f803 	bl	8004b08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b02:	f000 f8d5 	bl	8004cb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b06:	e7f1      	b.n	8004aec <prvTimerTask+0x8>

08004b08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b12:	f7ff fa43 	bl	8003f9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f866 	bl	8004bec <prvSampleTimeNow>
 8004b20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d130      	bne.n	8004b8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <prvProcessTimerOrBlockTask+0x3c>
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d806      	bhi.n	8004b44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b36:	f7ff fa3f 	bl	8003fb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ff85 	bl	8004a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b42:	e024      	b.n	8004b8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <prvProcessTimerOrBlockTask+0x90>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <prvProcessTimerOrBlockTask+0x50>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <prvProcessTimerOrBlockTask+0x52>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <prvProcessTimerOrBlockTask+0x94>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f7fe ffa7 	bl	8003abc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b6e:	f7ff fa23 	bl	8003fb8 <xTaskResumeAll>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <prvProcessTimerOrBlockTask+0x98>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
}
 8004b88:	e001      	b.n	8004b8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b8a:	f7ff fa15 	bl	8003fb8 <xTaskResumeAll>
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000d94 	.word	0x20000d94
 8004b9c:	20000d98 	.word	0x20000d98
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <prvGetNextExpireTime+0x44>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <prvGetNextExpireTime+0x16>
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	e000      	b.n	8004bbc <prvGetNextExpireTime+0x18>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <prvGetNextExpireTime+0x44>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e001      	b.n	8004bd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000d90 	.word	0x20000d90

08004bec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bf4:	f7ff fa7e 	bl	80040f4 <xTaskGetTickCount>
 8004bf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <prvSampleTimeNow+0x3c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d205      	bcs.n	8004c10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c04:	f000 f936 	bl	8004e74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e002      	b.n	8004c16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c16:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <prvSampleTimeNow+0x3c>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000da0 	.word	0x20000da0

08004c2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d812      	bhi.n	8004c78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e01b      	b.n	8004c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c66:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <prvInsertTimerInActiveList+0x7c>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f7fe fa08 	bl	8003086 <vListInsert>
 8004c76:	e012      	b.n	8004c9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d206      	bcs.n	8004c8e <prvInsertTimerInActiveList+0x62>
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e007      	b.n	8004c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <prvInsertTimerInActiveList+0x80>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fe f9f4 	bl	8003086 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c9e:	697b      	ldr	r3, [r7, #20]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000d94 	.word	0x20000d94
 8004cac:	20000d90 	.word	0x20000d90

08004cb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cb6:	e0ca      	b.n	8004e4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da18      	bge.n	8004cf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cbe:	1d3b      	adds	r3, r7, #4
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	61fb      	str	r3, [r7, #28]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce6:	6850      	ldr	r0, [r2, #4]
 8004ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cea:	6892      	ldr	r2, [r2, #8]
 8004cec:	4611      	mov	r1, r2
 8004cee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f2c0 80ab 	blt.w	8004e4e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d004      	beq.n	8004d0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	3304      	adds	r3, #4
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fe f9f5 	bl	80030f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d0e:	463b      	mov	r3, r7
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff6b 	bl	8004bec <prvSampleTimeNow>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b09      	cmp	r3, #9
 8004d1c:	f200 8096 	bhi.w	8004e4c <prvProcessReceivedCommands+0x19c>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <prvProcessReceivedCommands+0x78>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d51 	.word	0x08004d51
 8004d34:	08004dc5 	.word	0x08004dc5
 8004d38:	08004dd9 	.word	0x08004dd9
 8004d3c:	08004e23 	.word	0x08004e23
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d51 	.word	0x08004d51
 8004d48:	08004dc5 	.word	0x08004dc5
 8004d4c:	08004dd9 	.word	0x08004dd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	18d1      	adds	r1, r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d70:	f7ff ff5c 	bl	8004c2c <prvInsertTimerInActiveList>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d069      	beq.n	8004e4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05e      	beq.n	8004e4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	441a      	add	r2, r3
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da2:	f7ff fe05 	bl	80049b0 <xTimerGenericCommand>
 8004da6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d14f      	bne.n	8004e4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	61bb      	str	r3, [r7, #24]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004dd6:	e03a      	b.n	8004e4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	617b      	str	r3, [r7, #20]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	18d1      	adds	r1, r2, r3
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1c:	f7ff ff06 	bl	8004c2c <prvInsertTimerInActiveList>
					break;
 8004e20:	e015      	b.n	8004e4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e32:	f000 fbdd 	bl	80055f0 <vPortFree>
 8004e36:	e00a      	b.n	8004e4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e4a:	e000      	b.n	8004e4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004e4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e4e:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <prvProcessReceivedCommands+0x1c0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	1d39      	adds	r1, r7, #4
 8004e54:	2200      	movs	r2, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fc16 	bl	8003688 <xQueueReceive>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f47f af2a 	bne.w	8004cb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3730      	adds	r7, #48	; 0x30
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000d98 	.word	0x20000d98

08004e74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e7a:	e048      	b.n	8004f0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e7c:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <prvSwitchTimerLists+0xc0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e86:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <prvSwitchTimerLists+0xc0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe f92f 	bl	80030f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02e      	beq.n	8004f0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d90e      	bls.n	8004ee0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ece:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <prvSwitchTimerLists+0xc0>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7fe f8d4 	bl	8003086 <vListInsert>
 8004ede:	e016      	b.n	8004f0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff fd60 	bl	80049b0 <xTimerGenericCommand>
 8004ef0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	603b      	str	r3, [r7, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <prvSwitchTimerLists+0xc0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1b1      	bne.n	8004e7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <prvSwitchTimerLists+0xc0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <prvSwitchTimerLists+0xc4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <prvSwitchTimerLists+0xc0>)
 8004f24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f26:	4a04      	ldr	r2, [pc, #16]	; (8004f38 <prvSwitchTimerLists+0xc4>)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000d90 	.word	0x20000d90
 8004f38:	20000d94 	.word	0x20000d94

08004f3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f42:	f000 f967 	bl	8005214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f46:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <prvCheckForValidListAndQueue+0x60>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d120      	bne.n	8004f90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f4e:	4814      	ldr	r0, [pc, #80]	; (8004fa0 <prvCheckForValidListAndQueue+0x64>)
 8004f50:	f7fe f848 	bl	8002fe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f54:	4813      	ldr	r0, [pc, #76]	; (8004fa4 <prvCheckForValidListAndQueue+0x68>)
 8004f56:	f7fe f845 	bl	8002fe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f5a:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <prvCheckForValidListAndQueue+0x6c>)
 8004f5c:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <prvCheckForValidListAndQueue+0x64>)
 8004f5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f60:	4b12      	ldr	r3, [pc, #72]	; (8004fac <prvCheckForValidListAndQueue+0x70>)
 8004f62:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <prvCheckForValidListAndQueue+0x68>)
 8004f64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f66:	2300      	movs	r3, #0
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <prvCheckForValidListAndQueue+0x74>)
 8004f6c:	4a11      	ldr	r2, [pc, #68]	; (8004fb4 <prvCheckForValidListAndQueue+0x78>)
 8004f6e:	2110      	movs	r1, #16
 8004f70:	200a      	movs	r0, #10
 8004f72:	f7fe f953 	bl	800321c <xQueueGenericCreateStatic>
 8004f76:	4603      	mov	r3, r0
 8004f78:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <prvCheckForValidListAndQueue+0x60>)
 8004f7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f7c:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <prvCheckForValidListAndQueue+0x60>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <prvCheckForValidListAndQueue+0x60>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	490b      	ldr	r1, [pc, #44]	; (8004fb8 <prvCheckForValidListAndQueue+0x7c>)
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fe fd6c 	bl	8003a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f90:	f000 f970 	bl	8005274 <vPortExitCritical>
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000d98 	.word	0x20000d98
 8004fa0:	20000d68 	.word	0x20000d68
 8004fa4:	20000d7c 	.word	0x20000d7c
 8004fa8:	20000d90 	.word	0x20000d90
 8004fac:	20000d94 	.word	0x20000d94
 8004fb0:	20000e44 	.word	0x20000e44
 8004fb4:	20000da4 	.word	0x20000da4
 8004fb8:	080061c8 	.word	0x080061c8

08004fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b04      	subs	r3, #4
 8004fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3b04      	subs	r3, #4
 8004fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fec:	4a0c      	ldr	r2, [pc, #48]	; (8005020 <pxPortInitialiseStack+0x64>)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b14      	subs	r3, #20
 8004ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3b04      	subs	r3, #4
 8005002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f06f 0202 	mvn.w	r2, #2
 800500a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3b20      	subs	r3, #32
 8005010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005012:	68fb      	ldr	r3, [r7, #12]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	08005025 	.word	0x08005025

08005024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800502e:	4b12      	ldr	r3, [pc, #72]	; (8005078 <prvTaskExitError+0x54>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005036:	d00a      	beq.n	800504e <prvTaskExitError+0x2a>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	60fb      	str	r3, [r7, #12]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <prvTaskExitError+0x28>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60bb      	str	r3, [r7, #8]
}
 8005060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005062:	bf00      	nop
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0fc      	beq.n	8005064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	2000000c 	.word	0x2000000c
 800507c:	00000000 	.word	0x00000000

08005080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <pxCurrentTCBConst2>)
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	6808      	ldr	r0, [r1, #0]
 8005086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	f380 8809 	msr	PSP, r0
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8811 	msr	BASEPRI, r0
 800509a:	4770      	bx	lr
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst2>:
 80050a0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050a8:	4808      	ldr	r0, [pc, #32]	; (80050cc <prvPortStartFirstTask+0x24>)
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f380 8808 	msr	MSP, r0
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8814 	msr	CONTROL, r0
 80050ba:	b662      	cpsie	i
 80050bc:	b661      	cpsie	f
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	df00      	svc	0
 80050c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ca:	bf00      	nop
 80050cc:	e000ed08 	.word	0xe000ed08

080050d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050d6:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <xPortStartScheduler+0x120>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a46      	ldr	r2, [pc, #280]	; (80051f4 <xPortStartScheduler+0x124>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10a      	bne.n	80050f6 <xPortStartScheduler+0x26>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	613b      	str	r3, [r7, #16]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050f6:	4b3e      	ldr	r3, [pc, #248]	; (80051f0 <xPortStartScheduler+0x120>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3f      	ldr	r2, [pc, #252]	; (80051f8 <xPortStartScheduler+0x128>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10a      	bne.n	8005116 <xPortStartScheduler+0x46>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60fb      	str	r3, [r7, #12]
}
 8005112:	bf00      	nop
 8005114:	e7fe      	b.n	8005114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005116:	4b39      	ldr	r3, [pc, #228]	; (80051fc <xPortStartScheduler+0x12c>)
 8005118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	22ff      	movs	r2, #255	; 0xff
 8005126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005138:	b2da      	uxtb	r2, r3
 800513a:	4b31      	ldr	r3, [pc, #196]	; (8005200 <xPortStartScheduler+0x130>)
 800513c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800513e:	4b31      	ldr	r3, [pc, #196]	; (8005204 <xPortStartScheduler+0x134>)
 8005140:	2207      	movs	r2, #7
 8005142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005144:	e009      	b.n	800515a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005146:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <xPortStartScheduler+0x134>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3b01      	subs	r3, #1
 800514c:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <xPortStartScheduler+0x134>)
 800514e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	b2db      	uxtb	r3, r3
 8005158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d0ef      	beq.n	8005146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005166:	4b27      	ldr	r3, [pc, #156]	; (8005204 <xPortStartScheduler+0x134>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1c3 0307 	rsb	r3, r3, #7
 800516e:	2b04      	cmp	r3, #4
 8005170:	d00a      	beq.n	8005188 <xPortStartScheduler+0xb8>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	60bb      	str	r3, [r7, #8]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <xPortStartScheduler+0x134>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <xPortStartScheduler+0x134>)
 8005190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <xPortStartScheduler+0x134>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800519a:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <xPortStartScheduler+0x134>)
 800519c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051a6:	4b18      	ldr	r3, [pc, #96]	; (8005208 <xPortStartScheduler+0x138>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a17      	ldr	r2, [pc, #92]	; (8005208 <xPortStartScheduler+0x138>)
 80051ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <xPortStartScheduler+0x138>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a14      	ldr	r2, [pc, #80]	; (8005208 <xPortStartScheduler+0x138>)
 80051b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051be:	f000 f8dd 	bl	800537c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <xPortStartScheduler+0x13c>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051c8:	f000 f8fc 	bl	80053c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051cc:	4b10      	ldr	r3, [pc, #64]	; (8005210 <xPortStartScheduler+0x140>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0f      	ldr	r2, [pc, #60]	; (8005210 <xPortStartScheduler+0x140>)
 80051d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80051d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051d8:	f7ff ff66 	bl	80050a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051dc:	f7ff f854 	bl	8004288 <vTaskSwitchContext>
	prvTaskExitError();
 80051e0:	f7ff ff20 	bl	8005024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	e000ed00 	.word	0xe000ed00
 80051f4:	410fc271 	.word	0x410fc271
 80051f8:	410fc270 	.word	0x410fc270
 80051fc:	e000e400 	.word	0xe000e400
 8005200:	20000e94 	.word	0x20000e94
 8005204:	20000e98 	.word	0x20000e98
 8005208:	e000ed20 	.word	0xe000ed20
 800520c:	2000000c 	.word	0x2000000c
 8005210:	e000ef34 	.word	0xe000ef34

08005214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	607b      	str	r3, [r7, #4]
}
 800522c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <vPortEnterCritical+0x58>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3301      	adds	r3, #1
 8005234:	4a0d      	ldr	r2, [pc, #52]	; (800526c <vPortEnterCritical+0x58>)
 8005236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <vPortEnterCritical+0x58>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d10f      	bne.n	8005260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <vPortEnterCritical+0x5c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <vPortEnterCritical+0x4c>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	603b      	str	r3, [r7, #0]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <vPortEnterCritical+0x4a>
	}
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	2000000c 	.word	0x2000000c
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800527a:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <vPortExitCritical+0x50>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <vPortExitCritical+0x24>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	607b      	str	r3, [r7, #4]
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <vPortExitCritical+0x50>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <vPortExitCritical+0x50>)
 80052a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <vPortExitCritical+0x50>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <vPortExitCritical+0x42>
 80052aa:	2300      	movs	r3, #0
 80052ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	f383 8811 	msr	BASEPRI, r3
}
 80052b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	2000000c 	.word	0x2000000c
	...

080052d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052d0:	f3ef 8009 	mrs	r0, PSP
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4b15      	ldr	r3, [pc, #84]	; (8005330 <pxCurrentTCBConst>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	f01e 0f10 	tst.w	lr, #16
 80052e0:	bf08      	it	eq
 80052e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	6010      	str	r0, [r2, #0]
 80052ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052f4:	f380 8811 	msr	BASEPRI, r0
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f7fe ffc2 	bl	8004288 <vTaskSwitchContext>
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f380 8811 	msr	BASEPRI, r0
 800530c:	bc09      	pop	{r0, r3}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005316:	f01e 0f10 	tst.w	lr, #16
 800531a:	bf08      	it	eq
 800531c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005320:	f380 8809 	msr	PSP, r0
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst>:
 8005330:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005352:	f7fe fedf 	bl	8004114 <xTaskIncrementTick>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <xPortSysTickHandler+0x40>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <vPortSetupTimerInterrupt+0x34>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <vPortSetupTimerInterrupt+0x38>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <vPortSetupTimerInterrupt+0x3c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <vPortSetupTimerInterrupt+0x40>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <vPortSetupTimerInterrupt+0x44>)
 800539a:	3b01      	subs	r3, #1
 800539c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <vPortSetupTimerInterrupt+0x34>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e010 	.word	0xe000e010
 80053b4:	e000e018 	.word	0xe000e018
 80053b8:	20000000 	.word	0x20000000
 80053bc:	10624dd3 	.word	0x10624dd3
 80053c0:	e000e014 	.word	0xe000e014

080053c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80053d4 <vPortEnableVFP+0x10>
 80053c8:	6801      	ldr	r1, [r0, #0]
 80053ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053ce:	6001      	str	r1, [r0, #0]
 80053d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053d2:	bf00      	nop
 80053d4:	e000ed88 	.word	0xe000ed88

080053d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053de:	f3ef 8305 	mrs	r3, IPSR
 80053e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	d914      	bls.n	8005414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <vPortValidateInterruptPriority+0x70>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <vPortValidateInterruptPriority+0x74>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	7afa      	ldrb	r2, [r7, #11]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d20a      	bcs.n	8005414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005414:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <vPortValidateInterruptPriority+0x78>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <vPortValidateInterruptPriority+0x7c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d90a      	bls.n	800543a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	603b      	str	r3, [r7, #0]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <vPortValidateInterruptPriority+0x60>
	}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	e000e3f0 	.word	0xe000e3f0
 800544c:	20000e94 	.word	0x20000e94
 8005450:	e000ed0c 	.word	0xe000ed0c
 8005454:	20000e98 	.word	0x20000e98

08005458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005464:	f7fe fd9a 	bl	8003f9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005468:	4b5b      	ldr	r3, [pc, #364]	; (80055d8 <pvPortMalloc+0x180>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005470:	f000 f920 	bl	80056b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <pvPortMalloc+0x184>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	f040 8093 	bne.w	80055a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01d      	beq.n	80054c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005488:	2208      	movs	r2, #8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b00      	cmp	r3, #0
 8005498:	d014      	beq.n	80054c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f023 0307 	bic.w	r3, r3, #7
 80054a0:	3308      	adds	r3, #8
 80054a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <pvPortMalloc+0x6c>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	617b      	str	r3, [r7, #20]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d06e      	beq.n	80055a8 <pvPortMalloc+0x150>
 80054ca:	4b45      	ldr	r3, [pc, #276]	; (80055e0 <pvPortMalloc+0x188>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d869      	bhi.n	80055a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054d4:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <pvPortMalloc+0x18c>)
 80054d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <pvPortMalloc+0x18c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054de:	e004      	b.n	80054ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d903      	bls.n	80054fc <pvPortMalloc+0xa4>
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f1      	bne.n	80054e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054fc:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <pvPortMalloc+0x180>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005502:	429a      	cmp	r2, r3
 8005504:	d050      	beq.n	80055a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2208      	movs	r2, #8
 800550c:	4413      	add	r3, r2
 800550e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	2308      	movs	r3, #8
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	429a      	cmp	r2, r3
 8005526:	d91f      	bls.n	8005568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <pvPortMalloc+0xf8>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	613b      	str	r3, [r7, #16]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005562:	69b8      	ldr	r0, [r7, #24]
 8005564:	f000 f908 	bl	8005778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <pvPortMalloc+0x188>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <pvPortMalloc+0x188>)
 8005574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005576:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <pvPortMalloc+0x188>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <pvPortMalloc+0x190>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d203      	bcs.n	800558a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005582:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <pvPortMalloc+0x188>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <pvPortMalloc+0x190>)
 8005588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <pvPortMalloc+0x184>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	431a      	orrs	r2, r3
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <pvPortMalloc+0x194>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	4a11      	ldr	r2, [pc, #68]	; (80055ec <pvPortMalloc+0x194>)
 80055a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055a8:	f7fe fd06 	bl	8003fb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <pvPortMalloc+0x174>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	60fb      	str	r3, [r7, #12]
}
 80055c8:	bf00      	nop
 80055ca:	e7fe      	b.n	80055ca <pvPortMalloc+0x172>
	return pvReturn;
 80055cc:	69fb      	ldr	r3, [r7, #28]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3728      	adds	r7, #40	; 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20004aa4 	.word	0x20004aa4
 80055dc:	20004ab8 	.word	0x20004ab8
 80055e0:	20004aa8 	.word	0x20004aa8
 80055e4:	20004a9c 	.word	0x20004a9c
 80055e8:	20004aac 	.word	0x20004aac
 80055ec:	20004ab0 	.word	0x20004ab0

080055f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d04d      	beq.n	800569e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005602:	2308      	movs	r3, #8
 8005604:	425b      	negs	r3, r3
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4413      	add	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <vPortFree+0xb8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <vPortFree+0x44>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	60fb      	str	r3, [r7, #12]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <vPortFree+0x62>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	60bb      	str	r3, [r7, #8]
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <vPortFree+0xb8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01e      	beq.n	800569e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11a      	bne.n	800569e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <vPortFree+0xb8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	43db      	mvns	r3, r3
 8005672:	401a      	ands	r2, r3
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005678:	f7fe fc90 	bl	8003f9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <vPortFree+0xbc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4413      	add	r3, r2
 8005686:	4a09      	ldr	r2, [pc, #36]	; (80056ac <vPortFree+0xbc>)
 8005688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800568a:	6938      	ldr	r0, [r7, #16]
 800568c:	f000 f874 	bl	8005778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <vPortFree+0xc0>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	4a06      	ldr	r2, [pc, #24]	; (80056b0 <vPortFree+0xc0>)
 8005698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800569a:	f7fe fc8d 	bl	8003fb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20004ab8 	.word	0x20004ab8
 80056ac:	20004aa8 	.word	0x20004aa8
 80056b0:	20004ab4 	.word	0x20004ab4

080056b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056c0:	4b27      	ldr	r3, [pc, #156]	; (8005760 <prvHeapInit+0xac>)
 80056c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3307      	adds	r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <prvHeapInit+0xac>)
 80056e4:	4413      	add	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <prvHeapInit+0xb0>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056f2:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <prvHeapInit+0xb0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005700:	2208      	movs	r2, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <prvHeapInit+0xb4>)
 8005714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <prvHeapInit+0xb4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <prvHeapInit+0xb4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <prvHeapInit+0xb4>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <prvHeapInit+0xb8>)
 8005742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a09      	ldr	r2, [pc, #36]	; (8005770 <prvHeapInit+0xbc>)
 800574a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <prvHeapInit+0xc0>)
 800574e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000e9c 	.word	0x20000e9c
 8005764:	20004a9c 	.word	0x20004a9c
 8005768:	20004aa4 	.word	0x20004aa4
 800576c:	20004aac 	.word	0x20004aac
 8005770:	20004aa8 	.word	0x20004aa8
 8005774:	20004ab8 	.word	0x20004ab8

08005778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005780:	4b28      	ldr	r3, [pc, #160]	; (8005824 <prvInsertBlockIntoFreeList+0xac>)
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e002      	b.n	800578c <prvInsertBlockIntoFreeList+0x14>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d8f7      	bhi.n	8005786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d108      	bne.n	80057ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	441a      	add	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d118      	bne.n	8005800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d00d      	beq.n	80057f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e008      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e003      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d002      	beq.n	8005816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20004a9c 	.word	0x20004a9c
 8005828:	20004aa4 	.word	0x20004aa4

0800582c <siprintf>:
 800582c:	b40e      	push	{r1, r2, r3}
 800582e:	b500      	push	{lr}
 8005830:	b09c      	sub	sp, #112	; 0x70
 8005832:	ab1d      	add	r3, sp, #116	; 0x74
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	9006      	str	r0, [sp, #24]
 8005838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800583c:	4809      	ldr	r0, [pc, #36]	; (8005864 <siprintf+0x38>)
 800583e:	9107      	str	r1, [sp, #28]
 8005840:	9104      	str	r1, [sp, #16]
 8005842:	4909      	ldr	r1, [pc, #36]	; (8005868 <siprintf+0x3c>)
 8005844:	f853 2b04 	ldr.w	r2, [r3], #4
 8005848:	9105      	str	r1, [sp, #20]
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	a902      	add	r1, sp, #8
 8005850:	f000 f8a8 	bl	80059a4 <_svfiprintf_r>
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	b01c      	add	sp, #112	; 0x70
 800585c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005860:	b003      	add	sp, #12
 8005862:	4770      	bx	lr
 8005864:	2000005c 	.word	0x2000005c
 8005868:	ffff0208 	.word	0xffff0208

0800586c <memset>:
 800586c:	4402      	add	r2, r0
 800586e:	4603      	mov	r3, r0
 8005870:	4293      	cmp	r3, r2
 8005872:	d100      	bne.n	8005876 <memset+0xa>
 8005874:	4770      	bx	lr
 8005876:	f803 1b01 	strb.w	r1, [r3], #1
 800587a:	e7f9      	b.n	8005870 <memset+0x4>

0800587c <__errno>:
 800587c:	4b01      	ldr	r3, [pc, #4]	; (8005884 <__errno+0x8>)
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	2000005c 	.word	0x2000005c

08005888 <__libc_init_array>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4d0d      	ldr	r5, [pc, #52]	; (80058c0 <__libc_init_array+0x38>)
 800588c:	4c0d      	ldr	r4, [pc, #52]	; (80058c4 <__libc_init_array+0x3c>)
 800588e:	1b64      	subs	r4, r4, r5
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	2600      	movs	r6, #0
 8005894:	42a6      	cmp	r6, r4
 8005896:	d109      	bne.n	80058ac <__libc_init_array+0x24>
 8005898:	4d0b      	ldr	r5, [pc, #44]	; (80058c8 <__libc_init_array+0x40>)
 800589a:	4c0c      	ldr	r4, [pc, #48]	; (80058cc <__libc_init_array+0x44>)
 800589c:	f000 fc6a 	bl	8006174 <_init>
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	2600      	movs	r6, #0
 80058a6:	42a6      	cmp	r6, r4
 80058a8:	d105      	bne.n	80058b6 <__libc_init_array+0x2e>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b0:	4798      	blx	r3
 80058b2:	3601      	adds	r6, #1
 80058b4:	e7ee      	b.n	8005894 <__libc_init_array+0xc>
 80058b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ba:	4798      	blx	r3
 80058bc:	3601      	adds	r6, #1
 80058be:	e7f2      	b.n	80058a6 <__libc_init_array+0x1e>
 80058c0:	0800626c 	.word	0x0800626c
 80058c4:	0800626c 	.word	0x0800626c
 80058c8:	0800626c 	.word	0x0800626c
 80058cc:	08006270 	.word	0x08006270

080058d0 <__retarget_lock_acquire_recursive>:
 80058d0:	4770      	bx	lr

080058d2 <__retarget_lock_release_recursive>:
 80058d2:	4770      	bx	lr

080058d4 <memcpy>:
 80058d4:	440a      	add	r2, r1
 80058d6:	4291      	cmp	r1, r2
 80058d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058dc:	d100      	bne.n	80058e0 <memcpy+0xc>
 80058de:	4770      	bx	lr
 80058e0:	b510      	push	{r4, lr}
 80058e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ea:	4291      	cmp	r1, r2
 80058ec:	d1f9      	bne.n	80058e2 <memcpy+0xe>
 80058ee:	bd10      	pop	{r4, pc}

080058f0 <__ssputs_r>:
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	688e      	ldr	r6, [r1, #8]
 80058f6:	461f      	mov	r7, r3
 80058f8:	42be      	cmp	r6, r7
 80058fa:	680b      	ldr	r3, [r1, #0]
 80058fc:	4682      	mov	sl, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	4690      	mov	r8, r2
 8005902:	d82c      	bhi.n	800595e <__ssputs_r+0x6e>
 8005904:	898a      	ldrh	r2, [r1, #12]
 8005906:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800590a:	d026      	beq.n	800595a <__ssputs_r+0x6a>
 800590c:	6965      	ldr	r5, [r4, #20]
 800590e:	6909      	ldr	r1, [r1, #16]
 8005910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005914:	eba3 0901 	sub.w	r9, r3, r1
 8005918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800591c:	1c7b      	adds	r3, r7, #1
 800591e:	444b      	add	r3, r9
 8005920:	106d      	asrs	r5, r5, #1
 8005922:	429d      	cmp	r5, r3
 8005924:	bf38      	it	cc
 8005926:	461d      	movcc	r5, r3
 8005928:	0553      	lsls	r3, r2, #21
 800592a:	d527      	bpl.n	800597c <__ssputs_r+0x8c>
 800592c:	4629      	mov	r1, r5
 800592e:	f000 f957 	bl	8005be0 <_malloc_r>
 8005932:	4606      	mov	r6, r0
 8005934:	b360      	cbz	r0, 8005990 <__ssputs_r+0xa0>
 8005936:	6921      	ldr	r1, [r4, #16]
 8005938:	464a      	mov	r2, r9
 800593a:	f7ff ffcb 	bl	80058d4 <memcpy>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	6126      	str	r6, [r4, #16]
 800594c:	6165      	str	r5, [r4, #20]
 800594e:	444e      	add	r6, r9
 8005950:	eba5 0509 	sub.w	r5, r5, r9
 8005954:	6026      	str	r6, [r4, #0]
 8005956:	60a5      	str	r5, [r4, #8]
 8005958:	463e      	mov	r6, r7
 800595a:	42be      	cmp	r6, r7
 800595c:	d900      	bls.n	8005960 <__ssputs_r+0x70>
 800595e:	463e      	mov	r6, r7
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	4632      	mov	r2, r6
 8005964:	4641      	mov	r1, r8
 8005966:	f000 fb86 	bl	8006076 <memmove>
 800596a:	68a3      	ldr	r3, [r4, #8]
 800596c:	1b9b      	subs	r3, r3, r6
 800596e:	60a3      	str	r3, [r4, #8]
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	4433      	add	r3, r6
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	2000      	movs	r0, #0
 8005978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597c:	462a      	mov	r2, r5
 800597e:	f000 fb4b 	bl	8006018 <_realloc_r>
 8005982:	4606      	mov	r6, r0
 8005984:	2800      	cmp	r0, #0
 8005986:	d1e0      	bne.n	800594a <__ssputs_r+0x5a>
 8005988:	6921      	ldr	r1, [r4, #16]
 800598a:	4650      	mov	r0, sl
 800598c:	f000 fb9e 	bl	80060cc <_free_r>
 8005990:	230c      	movs	r3, #12
 8005992:	f8ca 3000 	str.w	r3, [sl]
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599c:	81a3      	strh	r3, [r4, #12]
 800599e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a2:	e7e9      	b.n	8005978 <__ssputs_r+0x88>

080059a4 <_svfiprintf_r>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	4698      	mov	r8, r3
 80059aa:	898b      	ldrh	r3, [r1, #12]
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	b09d      	sub	sp, #116	; 0x74
 80059b0:	4607      	mov	r7, r0
 80059b2:	460d      	mov	r5, r1
 80059b4:	4614      	mov	r4, r2
 80059b6:	d50e      	bpl.n	80059d6 <_svfiprintf_r+0x32>
 80059b8:	690b      	ldr	r3, [r1, #16]
 80059ba:	b963      	cbnz	r3, 80059d6 <_svfiprintf_r+0x32>
 80059bc:	2140      	movs	r1, #64	; 0x40
 80059be:	f000 f90f 	bl	8005be0 <_malloc_r>
 80059c2:	6028      	str	r0, [r5, #0]
 80059c4:	6128      	str	r0, [r5, #16]
 80059c6:	b920      	cbnz	r0, 80059d2 <_svfiprintf_r+0x2e>
 80059c8:	230c      	movs	r3, #12
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059d0:	e0d0      	b.n	8005b74 <_svfiprintf_r+0x1d0>
 80059d2:	2340      	movs	r3, #64	; 0x40
 80059d4:	616b      	str	r3, [r5, #20]
 80059d6:	2300      	movs	r3, #0
 80059d8:	9309      	str	r3, [sp, #36]	; 0x24
 80059da:	2320      	movs	r3, #32
 80059dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e4:	2330      	movs	r3, #48	; 0x30
 80059e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005b8c <_svfiprintf_r+0x1e8>
 80059ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ee:	f04f 0901 	mov.w	r9, #1
 80059f2:	4623      	mov	r3, r4
 80059f4:	469a      	mov	sl, r3
 80059f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059fa:	b10a      	cbz	r2, 8005a00 <_svfiprintf_r+0x5c>
 80059fc:	2a25      	cmp	r2, #37	; 0x25
 80059fe:	d1f9      	bne.n	80059f4 <_svfiprintf_r+0x50>
 8005a00:	ebba 0b04 	subs.w	fp, sl, r4
 8005a04:	d00b      	beq.n	8005a1e <_svfiprintf_r+0x7a>
 8005a06:	465b      	mov	r3, fp
 8005a08:	4622      	mov	r2, r4
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	f7ff ff6f 	bl	80058f0 <__ssputs_r>
 8005a12:	3001      	adds	r0, #1
 8005a14:	f000 80a9 	beq.w	8005b6a <_svfiprintf_r+0x1c6>
 8005a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a1a:	445a      	add	r2, fp
 8005a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a1 	beq.w	8005b6a <_svfiprintf_r+0x1c6>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a32:	f10a 0a01 	add.w	sl, sl, #1
 8005a36:	9304      	str	r3, [sp, #16]
 8005a38:	9307      	str	r3, [sp, #28]
 8005a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a40:	4654      	mov	r4, sl
 8005a42:	2205      	movs	r2, #5
 8005a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a48:	4850      	ldr	r0, [pc, #320]	; (8005b8c <_svfiprintf_r+0x1e8>)
 8005a4a:	f7fa fbc9 	bl	80001e0 <memchr>
 8005a4e:	9a04      	ldr	r2, [sp, #16]
 8005a50:	b9d8      	cbnz	r0, 8005a8a <_svfiprintf_r+0xe6>
 8005a52:	06d0      	lsls	r0, r2, #27
 8005a54:	bf44      	itt	mi
 8005a56:	2320      	movmi	r3, #32
 8005a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a5c:	0711      	lsls	r1, r2, #28
 8005a5e:	bf44      	itt	mi
 8005a60:	232b      	movmi	r3, #43	; 0x2b
 8005a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a66:	f89a 3000 	ldrb.w	r3, [sl]
 8005a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6c:	d015      	beq.n	8005a9a <_svfiprintf_r+0xf6>
 8005a6e:	9a07      	ldr	r2, [sp, #28]
 8005a70:	4654      	mov	r4, sl
 8005a72:	2000      	movs	r0, #0
 8005a74:	f04f 0c0a 	mov.w	ip, #10
 8005a78:	4621      	mov	r1, r4
 8005a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7e:	3b30      	subs	r3, #48	; 0x30
 8005a80:	2b09      	cmp	r3, #9
 8005a82:	d94d      	bls.n	8005b20 <_svfiprintf_r+0x17c>
 8005a84:	b1b0      	cbz	r0, 8005ab4 <_svfiprintf_r+0x110>
 8005a86:	9207      	str	r2, [sp, #28]
 8005a88:	e014      	b.n	8005ab4 <_svfiprintf_r+0x110>
 8005a8a:	eba0 0308 	sub.w	r3, r0, r8
 8005a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a92:	4313      	orrs	r3, r2
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	46a2      	mov	sl, r4
 8005a98:	e7d2      	b.n	8005a40 <_svfiprintf_r+0x9c>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	1d19      	adds	r1, r3, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	9103      	str	r1, [sp, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfbb      	ittet	lt
 8005aa6:	425b      	neglt	r3, r3
 8005aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8005aac:	9307      	strge	r3, [sp, #28]
 8005aae:	9307      	strlt	r3, [sp, #28]
 8005ab0:	bfb8      	it	lt
 8005ab2:	9204      	strlt	r2, [sp, #16]
 8005ab4:	7823      	ldrb	r3, [r4, #0]
 8005ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab8:	d10c      	bne.n	8005ad4 <_svfiprintf_r+0x130>
 8005aba:	7863      	ldrb	r3, [r4, #1]
 8005abc:	2b2a      	cmp	r3, #42	; 0x2a
 8005abe:	d134      	bne.n	8005b2a <_svfiprintf_r+0x186>
 8005ac0:	9b03      	ldr	r3, [sp, #12]
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	9203      	str	r2, [sp, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfb8      	it	lt
 8005acc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ad0:	3402      	adds	r4, #2
 8005ad2:	9305      	str	r3, [sp, #20]
 8005ad4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005b9c <_svfiprintf_r+0x1f8>
 8005ad8:	7821      	ldrb	r1, [r4, #0]
 8005ada:	2203      	movs	r2, #3
 8005adc:	4650      	mov	r0, sl
 8005ade:	f7fa fb7f 	bl	80001e0 <memchr>
 8005ae2:	b138      	cbz	r0, 8005af4 <_svfiprintf_r+0x150>
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	eba0 000a 	sub.w	r0, r0, sl
 8005aea:	2240      	movs	r2, #64	; 0x40
 8005aec:	4082      	lsls	r2, r0
 8005aee:	4313      	orrs	r3, r2
 8005af0:	3401      	adds	r4, #1
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af8:	4825      	ldr	r0, [pc, #148]	; (8005b90 <_svfiprintf_r+0x1ec>)
 8005afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005afe:	2206      	movs	r2, #6
 8005b00:	f7fa fb6e 	bl	80001e0 <memchr>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d038      	beq.n	8005b7a <_svfiprintf_r+0x1d6>
 8005b08:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <_svfiprintf_r+0x1f0>)
 8005b0a:	bb1b      	cbnz	r3, 8005b54 <_svfiprintf_r+0x1b0>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	3307      	adds	r3, #7
 8005b10:	f023 0307 	bic.w	r3, r3, #7
 8005b14:	3308      	adds	r3, #8
 8005b16:	9303      	str	r3, [sp, #12]
 8005b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1a:	4433      	add	r3, r6
 8005b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1e:	e768      	b.n	80059f2 <_svfiprintf_r+0x4e>
 8005b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b24:	460c      	mov	r4, r1
 8005b26:	2001      	movs	r0, #1
 8005b28:	e7a6      	b.n	8005a78 <_svfiprintf_r+0xd4>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	3401      	adds	r4, #1
 8005b2e:	9305      	str	r3, [sp, #20]
 8005b30:	4619      	mov	r1, r3
 8005b32:	f04f 0c0a 	mov.w	ip, #10
 8005b36:	4620      	mov	r0, r4
 8005b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b3c:	3a30      	subs	r2, #48	; 0x30
 8005b3e:	2a09      	cmp	r2, #9
 8005b40:	d903      	bls.n	8005b4a <_svfiprintf_r+0x1a6>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0c6      	beq.n	8005ad4 <_svfiprintf_r+0x130>
 8005b46:	9105      	str	r1, [sp, #20]
 8005b48:	e7c4      	b.n	8005ad4 <_svfiprintf_r+0x130>
 8005b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b4e:	4604      	mov	r4, r0
 8005b50:	2301      	movs	r3, #1
 8005b52:	e7f0      	b.n	8005b36 <_svfiprintf_r+0x192>
 8005b54:	ab03      	add	r3, sp, #12
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <_svfiprintf_r+0x1f4>)
 8005b5c:	a904      	add	r1, sp, #16
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f3af 8000 	nop.w
 8005b64:	1c42      	adds	r2, r0, #1
 8005b66:	4606      	mov	r6, r0
 8005b68:	d1d6      	bne.n	8005b18 <_svfiprintf_r+0x174>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	065b      	lsls	r3, r3, #25
 8005b6e:	f53f af2d 	bmi.w	80059cc <_svfiprintf_r+0x28>
 8005b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b74:	b01d      	add	sp, #116	; 0x74
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	ab03      	add	r3, sp, #12
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	462a      	mov	r2, r5
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <_svfiprintf_r+0x1f4>)
 8005b82:	a904      	add	r1, sp, #16
 8005b84:	4638      	mov	r0, r7
 8005b86:	f000 f919 	bl	8005dbc <_printf_i>
 8005b8a:	e7eb      	b.n	8005b64 <_svfiprintf_r+0x1c0>
 8005b8c:	08006230 	.word	0x08006230
 8005b90:	0800623a 	.word	0x0800623a
 8005b94:	00000000 	.word	0x00000000
 8005b98:	080058f1 	.word	0x080058f1
 8005b9c:	08006236 	.word	0x08006236

08005ba0 <sbrk_aligned>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4e0e      	ldr	r6, [pc, #56]	; (8005bdc <sbrk_aligned+0x3c>)
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	6831      	ldr	r1, [r6, #0]
 8005ba8:	4605      	mov	r5, r0
 8005baa:	b911      	cbnz	r1, 8005bb2 <sbrk_aligned+0x12>
 8005bac:	f000 fa7e 	bl	80060ac <_sbrk_r>
 8005bb0:	6030      	str	r0, [r6, #0]
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 fa79 	bl	80060ac <_sbrk_r>
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	d00a      	beq.n	8005bd4 <sbrk_aligned+0x34>
 8005bbe:	1cc4      	adds	r4, r0, #3
 8005bc0:	f024 0403 	bic.w	r4, r4, #3
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d007      	beq.n	8005bd8 <sbrk_aligned+0x38>
 8005bc8:	1a21      	subs	r1, r4, r0
 8005bca:	4628      	mov	r0, r5
 8005bcc:	f000 fa6e 	bl	80060ac <_sbrk_r>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d101      	bne.n	8005bd8 <sbrk_aligned+0x38>
 8005bd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bd8:	4620      	mov	r0, r4
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	20004bfc 	.word	0x20004bfc

08005be0 <_malloc_r>:
 8005be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be4:	1ccd      	adds	r5, r1, #3
 8005be6:	f025 0503 	bic.w	r5, r5, #3
 8005bea:	3508      	adds	r5, #8
 8005bec:	2d0c      	cmp	r5, #12
 8005bee:	bf38      	it	cc
 8005bf0:	250c      	movcc	r5, #12
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	db01      	blt.n	8005bfc <_malloc_r+0x1c>
 8005bf8:	42a9      	cmp	r1, r5
 8005bfa:	d905      	bls.n	8005c08 <_malloc_r+0x28>
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	2600      	movs	r6, #0
 8005c02:	4630      	mov	r0, r6
 8005c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cdc <_malloc_r+0xfc>
 8005c0c:	f000 f9f8 	bl	8006000 <__malloc_lock>
 8005c10:	f8d8 3000 	ldr.w	r3, [r8]
 8005c14:	461c      	mov	r4, r3
 8005c16:	bb5c      	cbnz	r4, 8005c70 <_malloc_r+0x90>
 8005c18:	4629      	mov	r1, r5
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f7ff ffc0 	bl	8005ba0 <sbrk_aligned>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	4604      	mov	r4, r0
 8005c24:	d155      	bne.n	8005cd2 <_malloc_r+0xf2>
 8005c26:	f8d8 4000 	ldr.w	r4, [r8]
 8005c2a:	4626      	mov	r6, r4
 8005c2c:	2e00      	cmp	r6, #0
 8005c2e:	d145      	bne.n	8005cbc <_malloc_r+0xdc>
 8005c30:	2c00      	cmp	r4, #0
 8005c32:	d048      	beq.n	8005cc6 <_malloc_r+0xe6>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	4631      	mov	r1, r6
 8005c38:	4638      	mov	r0, r7
 8005c3a:	eb04 0903 	add.w	r9, r4, r3
 8005c3e:	f000 fa35 	bl	80060ac <_sbrk_r>
 8005c42:	4581      	cmp	r9, r0
 8005c44:	d13f      	bne.n	8005cc6 <_malloc_r+0xe6>
 8005c46:	6821      	ldr	r1, [r4, #0]
 8005c48:	1a6d      	subs	r5, r5, r1
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	f7ff ffa7 	bl	8005ba0 <sbrk_aligned>
 8005c52:	3001      	adds	r0, #1
 8005c54:	d037      	beq.n	8005cc6 <_malloc_r+0xe6>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	442b      	add	r3, r5
 8005c5a:	6023      	str	r3, [r4, #0]
 8005c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d038      	beq.n	8005cd6 <_malloc_r+0xf6>
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	42a2      	cmp	r2, r4
 8005c68:	d12b      	bne.n	8005cc2 <_malloc_r+0xe2>
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	e00f      	b.n	8005c90 <_malloc_r+0xb0>
 8005c70:	6822      	ldr	r2, [r4, #0]
 8005c72:	1b52      	subs	r2, r2, r5
 8005c74:	d41f      	bmi.n	8005cb6 <_malloc_r+0xd6>
 8005c76:	2a0b      	cmp	r2, #11
 8005c78:	d917      	bls.n	8005caa <_malloc_r+0xca>
 8005c7a:	1961      	adds	r1, r4, r5
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	6025      	str	r5, [r4, #0]
 8005c80:	bf18      	it	ne
 8005c82:	6059      	strne	r1, [r3, #4]
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	bf08      	it	eq
 8005c88:	f8c8 1000 	streq.w	r1, [r8]
 8005c8c:	5162      	str	r2, [r4, r5]
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	4638      	mov	r0, r7
 8005c92:	f104 060b 	add.w	r6, r4, #11
 8005c96:	f000 f9b9 	bl	800600c <__malloc_unlock>
 8005c9a:	f026 0607 	bic.w	r6, r6, #7
 8005c9e:	1d23      	adds	r3, r4, #4
 8005ca0:	1af2      	subs	r2, r6, r3
 8005ca2:	d0ae      	beq.n	8005c02 <_malloc_r+0x22>
 8005ca4:	1b9b      	subs	r3, r3, r6
 8005ca6:	50a3      	str	r3, [r4, r2]
 8005ca8:	e7ab      	b.n	8005c02 <_malloc_r+0x22>
 8005caa:	42a3      	cmp	r3, r4
 8005cac:	6862      	ldr	r2, [r4, #4]
 8005cae:	d1dd      	bne.n	8005c6c <_malloc_r+0x8c>
 8005cb0:	f8c8 2000 	str.w	r2, [r8]
 8005cb4:	e7ec      	b.n	8005c90 <_malloc_r+0xb0>
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	6864      	ldr	r4, [r4, #4]
 8005cba:	e7ac      	b.n	8005c16 <_malloc_r+0x36>
 8005cbc:	4634      	mov	r4, r6
 8005cbe:	6876      	ldr	r6, [r6, #4]
 8005cc0:	e7b4      	b.n	8005c2c <_malloc_r+0x4c>
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	e7cc      	b.n	8005c60 <_malloc_r+0x80>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f000 f99e 	bl	800600c <__malloc_unlock>
 8005cd0:	e797      	b.n	8005c02 <_malloc_r+0x22>
 8005cd2:	6025      	str	r5, [r4, #0]
 8005cd4:	e7dc      	b.n	8005c90 <_malloc_r+0xb0>
 8005cd6:	605b      	str	r3, [r3, #4]
 8005cd8:	deff      	udf	#255	; 0xff
 8005cda:	bf00      	nop
 8005cdc:	20004bf8 	.word	0x20004bf8

08005ce0 <_printf_common>:
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	4699      	mov	r9, r3
 8005ce8:	688a      	ldr	r2, [r1, #8]
 8005cea:	690b      	ldr	r3, [r1, #16]
 8005cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bfb8      	it	lt
 8005cf4:	4613      	movlt	r3, r2
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	b10a      	cbz	r2, 8005d06 <_printf_common+0x26>
 8005d02:	3301      	adds	r3, #1
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	0699      	lsls	r1, r3, #26
 8005d0a:	bf42      	ittt	mi
 8005d0c:	6833      	ldrmi	r3, [r6, #0]
 8005d0e:	3302      	addmi	r3, #2
 8005d10:	6033      	strmi	r3, [r6, #0]
 8005d12:	6825      	ldr	r5, [r4, #0]
 8005d14:	f015 0506 	ands.w	r5, r5, #6
 8005d18:	d106      	bne.n	8005d28 <_printf_common+0x48>
 8005d1a:	f104 0a19 	add.w	sl, r4, #25
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	6832      	ldr	r2, [r6, #0]
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dc26      	bgt.n	8005d76 <_printf_common+0x96>
 8005d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d2c:	1e13      	subs	r3, r2, #0
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	bf18      	it	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	0692      	lsls	r2, r2, #26
 8005d36:	d42b      	bmi.n	8005d90 <_printf_common+0xb0>
 8005d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c0      	blx	r8
 8005d42:	3001      	adds	r0, #1
 8005d44:	d01e      	beq.n	8005d84 <_printf_common+0xa4>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	f003 0306 	and.w	r3, r3, #6
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf02      	ittt	eq
 8005d52:	68e5      	ldreq	r5, [r4, #12]
 8005d54:	6833      	ldreq	r3, [r6, #0]
 8005d56:	1aed      	subeq	r5, r5, r3
 8005d58:	68a3      	ldr	r3, [r4, #8]
 8005d5a:	bf0c      	ite	eq
 8005d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d60:	2500      	movne	r5, #0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfc4      	itt	gt
 8005d66:	1a9b      	subgt	r3, r3, r2
 8005d68:	18ed      	addgt	r5, r5, r3
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	341a      	adds	r4, #26
 8005d6e:	42b5      	cmp	r5, r6
 8005d70:	d11a      	bne.n	8005da8 <_printf_common+0xc8>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e008      	b.n	8005d88 <_printf_common+0xa8>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	47c0      	blx	r8
 8005d80:	3001      	adds	r0, #1
 8005d82:	d103      	bne.n	8005d8c <_printf_common+0xac>
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	e7c6      	b.n	8005d1e <_printf_common+0x3e>
 8005d90:	18e1      	adds	r1, r4, r3
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	2030      	movs	r0, #48	; 0x30
 8005d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d9a:	4422      	add	r2, r4
 8005d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005da4:	3302      	adds	r3, #2
 8005da6:	e7c7      	b.n	8005d38 <_printf_common+0x58>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4622      	mov	r2, r4
 8005dac:	4649      	mov	r1, r9
 8005dae:	4638      	mov	r0, r7
 8005db0:	47c0      	blx	r8
 8005db2:	3001      	adds	r0, #1
 8005db4:	d0e6      	beq.n	8005d84 <_printf_common+0xa4>
 8005db6:	3601      	adds	r6, #1
 8005db8:	e7d9      	b.n	8005d6e <_printf_common+0x8e>
	...

08005dbc <_printf_i>:
 8005dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	7e0f      	ldrb	r7, [r1, #24]
 8005dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dc4:	2f78      	cmp	r7, #120	; 0x78
 8005dc6:	4691      	mov	r9, r2
 8005dc8:	4680      	mov	r8, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	469a      	mov	sl, r3
 8005dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dd2:	d807      	bhi.n	8005de4 <_printf_i+0x28>
 8005dd4:	2f62      	cmp	r7, #98	; 0x62
 8005dd6:	d80a      	bhi.n	8005dee <_printf_i+0x32>
 8005dd8:	2f00      	cmp	r7, #0
 8005dda:	f000 80d4 	beq.w	8005f86 <_printf_i+0x1ca>
 8005dde:	2f58      	cmp	r7, #88	; 0x58
 8005de0:	f000 80c0 	beq.w	8005f64 <_printf_i+0x1a8>
 8005de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dec:	e03a      	b.n	8005e64 <_printf_i+0xa8>
 8005dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005df2:	2b15      	cmp	r3, #21
 8005df4:	d8f6      	bhi.n	8005de4 <_printf_i+0x28>
 8005df6:	a101      	add	r1, pc, #4	; (adr r1, 8005dfc <_printf_i+0x40>)
 8005df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005de5 	.word	0x08005de5
 8005e08:	08005de5 	.word	0x08005de5
 8005e0c:	08005de5 	.word	0x08005de5
 8005e10:	08005de5 	.word	0x08005de5
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005de5 	.word	0x08005de5
 8005e1c:	08005de5 	.word	0x08005de5
 8005e20:	08005de5 	.word	0x08005de5
 8005e24:	08005de5 	.word	0x08005de5
 8005e28:	08005f6d 	.word	0x08005f6d
 8005e2c:	08005e95 	.word	0x08005e95
 8005e30:	08005f27 	.word	0x08005f27
 8005e34:	08005de5 	.word	0x08005de5
 8005e38:	08005de5 	.word	0x08005de5
 8005e3c:	08005f8f 	.word	0x08005f8f
 8005e40:	08005de5 	.word	0x08005de5
 8005e44:	08005e95 	.word	0x08005e95
 8005e48:	08005de5 	.word	0x08005de5
 8005e4c:	08005de5 	.word	0x08005de5
 8005e50:	08005f2f 	.word	0x08005f2f
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e64:	2301      	movs	r3, #1
 8005e66:	e09f      	b.n	8005fa8 <_printf_i+0x1ec>
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	0607      	lsls	r7, r0, #24
 8005e6e:	f103 0104 	add.w	r1, r3, #4
 8005e72:	6029      	str	r1, [r5, #0]
 8005e74:	d501      	bpl.n	8005e7a <_printf_i+0xbe>
 8005e76:	681e      	ldr	r6, [r3, #0]
 8005e78:	e003      	b.n	8005e82 <_printf_i+0xc6>
 8005e7a:	0646      	lsls	r6, r0, #25
 8005e7c:	d5fb      	bpl.n	8005e76 <_printf_i+0xba>
 8005e7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	da03      	bge.n	8005e8e <_printf_i+0xd2>
 8005e86:	232d      	movs	r3, #45	; 0x2d
 8005e88:	4276      	negs	r6, r6
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8e:	485a      	ldr	r0, [pc, #360]	; (8005ff8 <_printf_i+0x23c>)
 8005e90:	230a      	movs	r3, #10
 8005e92:	e012      	b.n	8005eba <_printf_i+0xfe>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	6820      	ldr	r0, [r4, #0]
 8005e98:	1d19      	adds	r1, r3, #4
 8005e9a:	6029      	str	r1, [r5, #0]
 8005e9c:	0605      	lsls	r5, r0, #24
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_i+0xe8>
 8005ea0:	681e      	ldr	r6, [r3, #0]
 8005ea2:	e002      	b.n	8005eaa <_printf_i+0xee>
 8005ea4:	0641      	lsls	r1, r0, #25
 8005ea6:	d5fb      	bpl.n	8005ea0 <_printf_i+0xe4>
 8005ea8:	881e      	ldrh	r6, [r3, #0]
 8005eaa:	4853      	ldr	r0, [pc, #332]	; (8005ff8 <_printf_i+0x23c>)
 8005eac:	2f6f      	cmp	r7, #111	; 0x6f
 8005eae:	bf0c      	ite	eq
 8005eb0:	2308      	moveq	r3, #8
 8005eb2:	230a      	movne	r3, #10
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eba:	6865      	ldr	r5, [r4, #4]
 8005ebc:	60a5      	str	r5, [r4, #8]
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	bfa2      	ittt	ge
 8005ec2:	6821      	ldrge	r1, [r4, #0]
 8005ec4:	f021 0104 	bicge.w	r1, r1, #4
 8005ec8:	6021      	strge	r1, [r4, #0]
 8005eca:	b90e      	cbnz	r6, 8005ed0 <_printf_i+0x114>
 8005ecc:	2d00      	cmp	r5, #0
 8005ece:	d04b      	beq.n	8005f68 <_printf_i+0x1ac>
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ed6:	fb03 6711 	mls	r7, r3, r1, r6
 8005eda:	5dc7      	ldrb	r7, [r0, r7]
 8005edc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ee0:	4637      	mov	r7, r6
 8005ee2:	42bb      	cmp	r3, r7
 8005ee4:	460e      	mov	r6, r1
 8005ee6:	d9f4      	bls.n	8005ed2 <_printf_i+0x116>
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d10b      	bne.n	8005f04 <_printf_i+0x148>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	07de      	lsls	r6, r3, #31
 8005ef0:	d508      	bpl.n	8005f04 <_printf_i+0x148>
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	6861      	ldr	r1, [r4, #4]
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	bfde      	ittt	le
 8005efa:	2330      	movle	r3, #48	; 0x30
 8005efc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f04:	1b52      	subs	r2, r2, r5
 8005f06:	6122      	str	r2, [r4, #16]
 8005f08:	f8cd a000 	str.w	sl, [sp]
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	aa03      	add	r2, sp, #12
 8005f10:	4621      	mov	r1, r4
 8005f12:	4640      	mov	r0, r8
 8005f14:	f7ff fee4 	bl	8005ce0 <_printf_common>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d14a      	bne.n	8005fb2 <_printf_i+0x1f6>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f20:	b004      	add	sp, #16
 8005f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	f043 0320 	orr.w	r3, r3, #32
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	4833      	ldr	r0, [pc, #204]	; (8005ffc <_printf_i+0x240>)
 8005f30:	2778      	movs	r7, #120	; 0x78
 8005f32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	6829      	ldr	r1, [r5, #0]
 8005f3a:	061f      	lsls	r7, r3, #24
 8005f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f40:	d402      	bmi.n	8005f48 <_printf_i+0x18c>
 8005f42:	065f      	lsls	r7, r3, #25
 8005f44:	bf48      	it	mi
 8005f46:	b2b6      	uxthmi	r6, r6
 8005f48:	07df      	lsls	r7, r3, #31
 8005f4a:	bf48      	it	mi
 8005f4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f50:	6029      	str	r1, [r5, #0]
 8005f52:	bf48      	it	mi
 8005f54:	6023      	strmi	r3, [r4, #0]
 8005f56:	b91e      	cbnz	r6, 8005f60 <_printf_i+0x1a4>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	f023 0320 	bic.w	r3, r3, #32
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	2310      	movs	r3, #16
 8005f62:	e7a7      	b.n	8005eb4 <_printf_i+0xf8>
 8005f64:	4824      	ldr	r0, [pc, #144]	; (8005ff8 <_printf_i+0x23c>)
 8005f66:	e7e4      	b.n	8005f32 <_printf_i+0x176>
 8005f68:	4615      	mov	r5, r2
 8005f6a:	e7bd      	b.n	8005ee8 <_printf_i+0x12c>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	6826      	ldr	r6, [r4, #0]
 8005f70:	6961      	ldr	r1, [r4, #20]
 8005f72:	1d18      	adds	r0, r3, #4
 8005f74:	6028      	str	r0, [r5, #0]
 8005f76:	0635      	lsls	r5, r6, #24
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	d501      	bpl.n	8005f80 <_printf_i+0x1c4>
 8005f7c:	6019      	str	r1, [r3, #0]
 8005f7e:	e002      	b.n	8005f86 <_printf_i+0x1ca>
 8005f80:	0670      	lsls	r0, r6, #25
 8005f82:	d5fb      	bpl.n	8005f7c <_printf_i+0x1c0>
 8005f84:	8019      	strh	r1, [r3, #0]
 8005f86:	2300      	movs	r3, #0
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	4615      	mov	r5, r2
 8005f8c:	e7bc      	b.n	8005f08 <_printf_i+0x14c>
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	1d1a      	adds	r2, r3, #4
 8005f92:	602a      	str	r2, [r5, #0]
 8005f94:	681d      	ldr	r5, [r3, #0]
 8005f96:	6862      	ldr	r2, [r4, #4]
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f7fa f920 	bl	80001e0 <memchr>
 8005fa0:	b108      	cbz	r0, 8005fa6 <_printf_i+0x1ea>
 8005fa2:	1b40      	subs	r0, r0, r5
 8005fa4:	6060      	str	r0, [r4, #4]
 8005fa6:	6863      	ldr	r3, [r4, #4]
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	2300      	movs	r3, #0
 8005fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb0:	e7aa      	b.n	8005f08 <_printf_i+0x14c>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	47d0      	blx	sl
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d0ad      	beq.n	8005f1c <_printf_i+0x160>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	079b      	lsls	r3, r3, #30
 8005fc4:	d413      	bmi.n	8005fee <_printf_i+0x232>
 8005fc6:	68e0      	ldr	r0, [r4, #12]
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	4298      	cmp	r0, r3
 8005fcc:	bfb8      	it	lt
 8005fce:	4618      	movlt	r0, r3
 8005fd0:	e7a6      	b.n	8005f20 <_printf_i+0x164>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4640      	mov	r0, r8
 8005fda:	47d0      	blx	sl
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d09d      	beq.n	8005f1c <_printf_i+0x160>
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	9903      	ldr	r1, [sp, #12]
 8005fe6:	1a5b      	subs	r3, r3, r1
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	dcf2      	bgt.n	8005fd2 <_printf_i+0x216>
 8005fec:	e7eb      	b.n	8005fc6 <_printf_i+0x20a>
 8005fee:	2500      	movs	r5, #0
 8005ff0:	f104 0619 	add.w	r6, r4, #25
 8005ff4:	e7f5      	b.n	8005fe2 <_printf_i+0x226>
 8005ff6:	bf00      	nop
 8005ff8:	08006241 	.word	0x08006241
 8005ffc:	08006252 	.word	0x08006252

08006000 <__malloc_lock>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__malloc_lock+0x8>)
 8006002:	f7ff bc65 	b.w	80058d0 <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	20004bf4 	.word	0x20004bf4

0800600c <__malloc_unlock>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__malloc_unlock+0x8>)
 800600e:	f7ff bc60 	b.w	80058d2 <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	20004bf4 	.word	0x20004bf4

08006018 <_realloc_r>:
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	4680      	mov	r8, r0
 800601e:	4614      	mov	r4, r2
 8006020:	460e      	mov	r6, r1
 8006022:	b921      	cbnz	r1, 800602e <_realloc_r+0x16>
 8006024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006028:	4611      	mov	r1, r2
 800602a:	f7ff bdd9 	b.w	8005be0 <_malloc_r>
 800602e:	b92a      	cbnz	r2, 800603c <_realloc_r+0x24>
 8006030:	f000 f84c 	bl	80060cc <_free_r>
 8006034:	4625      	mov	r5, r4
 8006036:	4628      	mov	r0, r5
 8006038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603c:	f000 f892 	bl	8006164 <_malloc_usable_size_r>
 8006040:	4284      	cmp	r4, r0
 8006042:	4607      	mov	r7, r0
 8006044:	d802      	bhi.n	800604c <_realloc_r+0x34>
 8006046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800604a:	d812      	bhi.n	8006072 <_realloc_r+0x5a>
 800604c:	4621      	mov	r1, r4
 800604e:	4640      	mov	r0, r8
 8006050:	f7ff fdc6 	bl	8005be0 <_malloc_r>
 8006054:	4605      	mov	r5, r0
 8006056:	2800      	cmp	r0, #0
 8006058:	d0ed      	beq.n	8006036 <_realloc_r+0x1e>
 800605a:	42bc      	cmp	r4, r7
 800605c:	4622      	mov	r2, r4
 800605e:	4631      	mov	r1, r6
 8006060:	bf28      	it	cs
 8006062:	463a      	movcs	r2, r7
 8006064:	f7ff fc36 	bl	80058d4 <memcpy>
 8006068:	4631      	mov	r1, r6
 800606a:	4640      	mov	r0, r8
 800606c:	f000 f82e 	bl	80060cc <_free_r>
 8006070:	e7e1      	b.n	8006036 <_realloc_r+0x1e>
 8006072:	4635      	mov	r5, r6
 8006074:	e7df      	b.n	8006036 <_realloc_r+0x1e>

08006076 <memmove>:
 8006076:	4288      	cmp	r0, r1
 8006078:	b510      	push	{r4, lr}
 800607a:	eb01 0402 	add.w	r4, r1, r2
 800607e:	d902      	bls.n	8006086 <memmove+0x10>
 8006080:	4284      	cmp	r4, r0
 8006082:	4623      	mov	r3, r4
 8006084:	d807      	bhi.n	8006096 <memmove+0x20>
 8006086:	1e43      	subs	r3, r0, #1
 8006088:	42a1      	cmp	r1, r4
 800608a:	d008      	beq.n	800609e <memmove+0x28>
 800608c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006090:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006094:	e7f8      	b.n	8006088 <memmove+0x12>
 8006096:	4402      	add	r2, r0
 8006098:	4601      	mov	r1, r0
 800609a:	428a      	cmp	r2, r1
 800609c:	d100      	bne.n	80060a0 <memmove+0x2a>
 800609e:	bd10      	pop	{r4, pc}
 80060a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060a8:	e7f7      	b.n	800609a <memmove+0x24>
	...

080060ac <_sbrk_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d06      	ldr	r5, [pc, #24]	; (80060c8 <_sbrk_r+0x1c>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4608      	mov	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fa fd90 	bl	8000bdc <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_sbrk_r+0x1a>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_sbrk_r+0x1a>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20004c00 	.word	0x20004c00

080060cc <_free_r>:
 80060cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060ce:	2900      	cmp	r1, #0
 80060d0:	d044      	beq.n	800615c <_free_r+0x90>
 80060d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d6:	9001      	str	r0, [sp, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f1a1 0404 	sub.w	r4, r1, #4
 80060de:	bfb8      	it	lt
 80060e0:	18e4      	addlt	r4, r4, r3
 80060e2:	f7ff ff8d 	bl	8006000 <__malloc_lock>
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <_free_r+0x94>)
 80060e8:	9801      	ldr	r0, [sp, #4]
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	b933      	cbnz	r3, 80060fc <_free_r+0x30>
 80060ee:	6063      	str	r3, [r4, #4]
 80060f0:	6014      	str	r4, [r2, #0]
 80060f2:	b003      	add	sp, #12
 80060f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060f8:	f7ff bf88 	b.w	800600c <__malloc_unlock>
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d908      	bls.n	8006112 <_free_r+0x46>
 8006100:	6825      	ldr	r5, [r4, #0]
 8006102:	1961      	adds	r1, r4, r5
 8006104:	428b      	cmp	r3, r1
 8006106:	bf01      	itttt	eq
 8006108:	6819      	ldreq	r1, [r3, #0]
 800610a:	685b      	ldreq	r3, [r3, #4]
 800610c:	1949      	addeq	r1, r1, r5
 800610e:	6021      	streq	r1, [r4, #0]
 8006110:	e7ed      	b.n	80060ee <_free_r+0x22>
 8006112:	461a      	mov	r2, r3
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	b10b      	cbz	r3, 800611c <_free_r+0x50>
 8006118:	42a3      	cmp	r3, r4
 800611a:	d9fa      	bls.n	8006112 <_free_r+0x46>
 800611c:	6811      	ldr	r1, [r2, #0]
 800611e:	1855      	adds	r5, r2, r1
 8006120:	42a5      	cmp	r5, r4
 8006122:	d10b      	bne.n	800613c <_free_r+0x70>
 8006124:	6824      	ldr	r4, [r4, #0]
 8006126:	4421      	add	r1, r4
 8006128:	1854      	adds	r4, r2, r1
 800612a:	42a3      	cmp	r3, r4
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	d1e0      	bne.n	80060f2 <_free_r+0x26>
 8006130:	681c      	ldr	r4, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	6053      	str	r3, [r2, #4]
 8006136:	440c      	add	r4, r1
 8006138:	6014      	str	r4, [r2, #0]
 800613a:	e7da      	b.n	80060f2 <_free_r+0x26>
 800613c:	d902      	bls.n	8006144 <_free_r+0x78>
 800613e:	230c      	movs	r3, #12
 8006140:	6003      	str	r3, [r0, #0]
 8006142:	e7d6      	b.n	80060f2 <_free_r+0x26>
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	1961      	adds	r1, r4, r5
 8006148:	428b      	cmp	r3, r1
 800614a:	bf04      	itt	eq
 800614c:	6819      	ldreq	r1, [r3, #0]
 800614e:	685b      	ldreq	r3, [r3, #4]
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	bf04      	itt	eq
 8006154:	1949      	addeq	r1, r1, r5
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	6054      	str	r4, [r2, #4]
 800615a:	e7ca      	b.n	80060f2 <_free_r+0x26>
 800615c:	b003      	add	sp, #12
 800615e:	bd30      	pop	{r4, r5, pc}
 8006160:	20004bf8 	.word	0x20004bf8

08006164 <_malloc_usable_size_r>:
 8006164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006168:	1f18      	subs	r0, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfbc      	itt	lt
 800616e:	580b      	ldrlt	r3, [r1, r0]
 8006170:	18c0      	addlt	r0, r0, r3
 8006172:	4770      	bx	lr

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
