
stm-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006b5c  08006b5c  00016b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c58  08006c58  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c60  08006c60  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c40  20000088  08006cf0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc8  08006cf0  00024cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f96  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f0  00000000  00000000  00034091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00037188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cba  00000000  00000000  00038218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003cc9  00000000  00000000  00038ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137fb  00000000  00000000  0003cb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c453  00000000  00000000  00050396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000494c  00000000  00000000  000ec7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f1138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b44 	.word	0x08006b44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006b44 	.word	0x08006b44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_ADC_ConvCpltCallback>:
char msg[20];

char tx_msgToNode_1[20];
char tx_msgToNode_2[20];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e00a      	b.n	80005b0 <HAL_ADC_ConvCpltCallback+0x24>
		val1 = (uint16_t) rawValues[0];
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <HAL_ADC_ConvCpltCallback+0x98>)
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <HAL_ADC_ConvCpltCallback+0x9c>)
 80005a0:	801a      	strh	r2, [r3, #0]
		val2 = (uint16_t) rawValues[1];
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <HAL_ADC_ConvCpltCallback+0x98>)
 80005a4:	885a      	ldrh	r2, [r3, #2]
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <HAL_ADC_ConvCpltCallback+0xa0>)
 80005a8:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < hadc1.Init.NbrOfConversion; i++) {
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfa      	ldrb	r2, [r7, #15]
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <HAL_ADC_ConvCpltCallback+0xa4>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d3ef      	bcc.n	800059a <HAL_ADC_ConvCpltCallback+0xe>
	}
	sprintf(tx_msgToNode_1, "1 %d ", val1);
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_ADC_ConvCpltCallback+0x9c>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	491c      	ldr	r1, [pc, #112]	; (8000634 <HAL_ADC_ConvCpltCallback+0xa8>)
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <HAL_ADC_ConvCpltCallback+0xac>)
 80005c4:	f005 fe1a 	bl	80061fc <siprintf>
	sprintf(tx_msgToNode_2, "2 %d", val2);
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_ADC_ConvCpltCallback+0xa0>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	491b      	ldr	r1, [pc, #108]	; (800063c <HAL_ADC_ConvCpltCallback+0xb0>)
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <HAL_ADC_ConvCpltCallback+0xb4>)
 80005d2:	f005 fe13 	bl	80061fc <siprintf>

	sprintf(msg, "WS_1 : %hu \n\r", val1);
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <HAL_ADC_ConvCpltCallback+0x9c>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	4919      	ldr	r1, [pc, #100]	; (8000644 <HAL_ADC_ConvCpltCallback+0xb8>)
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 80005e0:	f005 fe0c 	bl	80061fc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 80005e6:	f7ff fdfb 	bl	80001e0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	4915      	ldr	r1, [pc, #84]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 80005f2:	4816      	ldr	r0, [pc, #88]	; (800064c <HAL_ADC_ConvCpltCallback+0xc0>)
 80005f4:	f002 fcc2 	bl	8002f7c <HAL_UART_Transmit>
	sprintf(msg, "WS_2 : %hu \n\r", val2);
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_ConvCpltCallback+0xa0>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4914      	ldr	r1, [pc, #80]	; (8000650 <HAL_ADC_ConvCpltCallback+0xc4>)
 8000600:	4811      	ldr	r0, [pc, #68]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000602:	f005 fdfb 	bl	80061fc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
 8000606:	4810      	ldr	r0, [pc, #64]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000608:	f7ff fdea 	bl	80001e0 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <HAL_ADC_ConvCpltCallback+0xc0>)
 8000616:	f002 fcb1 	bl	8002f7c <HAL_UART_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001e8 	.word	0x200001e8
 8000628:	200001e4 	.word	0x200001e4
 800062c:	200001e6 	.word	0x200001e6
 8000630:	200000a4 	.word	0x200000a4
 8000634:	08006b74 	.word	0x08006b74
 8000638:	20000200 	.word	0x20000200
 800063c:	08006b7c 	.word	0x08006b7c
 8000640:	20000214 	.word	0x20000214
 8000644:	08006b84 	.word	0x08006b84
 8000648:	200001ec 	.word	0x200001ec
 800064c:	20000194 	.word	0x20000194
 8000650:	08006b94 	.word	0x08006b94

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fbfa 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f83a 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f978 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f000 f956 	bl	8000914 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000668:	f000 f92a 	bl	80008c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800066c:	f000 f89c 	bl	80007a8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000670:	f000 f8fc 	bl	800086c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, welcomeMsg, strlen(welcomeMsg), 1000);
 8000674:	480f      	ldr	r0, [pc, #60]	; (80006b4 <main+0x60>)
 8000676:	f7ff fdb3 	bl	80001e0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29a      	uxth	r2, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	490c      	ldr	r1, [pc, #48]	; (80006b4 <main+0x60>)
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0x64>)
 8000686:	f002 fc79 	bl	8002f7c <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800068a:	f003 f867 	bl	800375c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <main+0x68>)
 8000690:	2100      	movs	r1, #0
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <main+0x6c>)
 8000694:	f003 f8ac 	bl	80037f0 <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <main+0x70>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of MessageSend */
  MessageSendHandle = osThreadNew(StartMessageSend, NULL, &MessageSend_attributes);
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <main+0x74>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <main+0x78>)
 80006a4:	f003 f8a4 	bl	80037f0 <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <main+0x7c>)
 80006ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f003 f879 	bl	80037a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006b2:	e7fe      	b.n	80006b2 <main+0x5e>
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000194 	.word	0x20000194
 80006bc:	08006bbc 	.word	0x08006bbc
 80006c0:	08000a31 	.word	0x08000a31
 80006c4:	200001dc 	.word	0x200001dc
 80006c8:	08006be0 	.word	0x08006be0
 80006cc:	08000a55 	.word	0x08000a55
 80006d0:	200001e0 	.word	0x200001e0

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 fdaa 	bl	800623c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000752:	2304      	movs	r3, #4
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f001 ff26 	bl	80025ac <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 f99b 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f988 	bl	8002a9c <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000792:	f000 f985 	bl	8000aa0 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007bc:	4a29      	ldr	r2, [pc, #164]	; (8000864 <MX_ADC1_Init+0xbc>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <MX_ADC1_Init+0xc0>)
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ADC1_Init+0xb8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ADC1_Init+0xb8>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000808:	4815      	ldr	r0, [pc, #84]	; (8000860 <MX_ADC1_Init+0xb8>)
 800080a:	f000 fb93 	bl	8000f34 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000814:	f000 f944 	bl	8000aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_ADC1_Init+0xb8>)
 800082a:	f000 fde5 	bl	80013f8 <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000834:	f000 f934 	bl	8000aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000838:	2301      	movs	r3, #1
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000840:	2307      	movs	r3, #7
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_ADC1_Init+0xb8>)
 800084a:	f000 fdd5 	bl	80013f8 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000854:	f000 f924 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000a4 	.word	0x200000a4
 8000864:	40012000 	.word	0x40012000
 8000868:	0f000001 	.word	0x0f000001

0800086c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART1_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 80008a4:	f002 fb1a 	bl	8002edc <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f8f7 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000014c 	.word	0x2000014c
 80008bc:	40011000 	.word	0x40011000

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f8:	f002 faf0 	bl	8002edc <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f8cd 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000194 	.word	0x20000194
 8000910:	40004400 	.word	0x40004400

08000914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_DMA_Init+0x3c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <MX_DMA_Init+0x3c>)
 8000924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_DMA_Init+0x3c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	2038      	movs	r0, #56	; 0x38
 800093c:	f001 f8f1 	bl	8001b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000940:	2038      	movs	r0, #56	; 0x38
 8000942:	f001 f90a 	bl	8001b5a <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2c      	ldr	r2, [pc, #176]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_GPIO_Init+0xd4>)
 80009e0:	f001 fdca 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_GPIO_Init+0xd8>)
 80009fc:	f001 fc38 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a00:	2320      	movs	r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_GPIO_Init+0xd4>)
 8000a18:	f001 fc2a 	bl	8002270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020800 	.word	0x40020800

08000a30 <StartDefaultTask>:
	 * @param  argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
		/* Infinite loop */
		for (;;) {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) rawValues, 2);
 8000a38:	2202      	movs	r2, #2
 8000a3a:	4904      	ldr	r1, [pc, #16]	; (8000a4c <StartDefaultTask+0x1c>)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <StartDefaultTask+0x20>)
 8000a3e:	f000 fbcd 	bl	80011dc <HAL_ADC_Start_DMA>
			osDelay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f002 ff65 	bl	8003914 <osDelay>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) rawValues, 2);
 8000a4a:	e7f5      	b.n	8000a38 <StartDefaultTask+0x8>
 8000a4c:	200001e8 	.word	0x200001e8
 8000a50:	200000a4 	.word	0x200000a4

08000a54 <StartMessageSend>:
	 * @param argument: Not used
	 * @retval None
	 */
/* USER CODE END Header_StartMessageSend */
void StartMessageSend(void *argument)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMessageSend */
		/* Infinite loop */
		for (;;) {
			HAL_UART_Transmit(&huart1, (uint8_t *) tx_msgToNode_1, strlen(tx_msgToNode_1), HAL_MAX_DELAY);
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <StartMessageSend+0x40>)
 8000a5e:	f7ff fbbf 	bl	80001e0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	490a      	ldr	r1, [pc, #40]	; (8000a94 <StartMessageSend+0x40>)
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <StartMessageSend+0x44>)
 8000a6e:	f002 fa85 	bl	8002f7c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t *) tx_msgToNode_2, strlen(tx_msgToNode_2), HAL_MAX_DELAY);
 8000a72:	480a      	ldr	r0, [pc, #40]	; (8000a9c <StartMessageSend+0x48>)
 8000a74:	f7ff fbb4 	bl	80001e0 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <StartMessageSend+0x48>)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <StartMessageSend+0x44>)
 8000a84:	f002 fa7a 	bl	8002f7c <HAL_UART_Transmit>
			osDelay(2000);
 8000a88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a8c:	f002 ff42 	bl	8003914 <osDelay>
			HAL_UART_Transmit(&huart1, (uint8_t *) tx_msgToNode_1, strlen(tx_msgToNode_1), HAL_MAX_DELAY);
 8000a90:	e7e4      	b.n	8000a5c <StartMessageSend+0x8>
 8000a92:	bf00      	nop
 8000a94:	20000200 	.word	0x20000200
 8000a98:	2000014c 	.word	0x2000014c
 8000a9c:	20000214 	.word	0x20000214

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_MspInit+0x54>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <HAL_MspInit+0x54>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x54>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_MspInit+0x54>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_MspInit+0x54>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_MspInit+0x54>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	210f      	movs	r1, #15
 8000aee:	f06f 0001 	mvn.w	r0, #1
 8000af2:	f001 f816 	bl	8001b22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <HAL_ADC_MspInit+0xec>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d15f      	bne.n	8000be6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a31      	ldr	r2, [pc, #196]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2a      	ldr	r2, [pc, #168]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000b72:	f001 fb7d 	bl	8002270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b78:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000ba0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000bbc:	f000 ffe8 	bl	8001b90 <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000bc6:	f7ff ff6b 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000bce:	639a      	str	r2, [r3, #56]	; 0x38
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2105      	movs	r1, #5
 8000bda:	2012      	movs	r0, #18
 8000bdc:	f000 ffa1 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000be0:	2012      	movs	r0, #18
 8000be2:	f000 ffba 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	200000ec 	.word	0x200000ec
 8000c00:	40026410 	.word	0x40026410

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a32      	ldr	r2, [pc, #200]	; (8000cec <HAL_UART_MspInit+0xe8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12d      	bne.n	8000c82 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a30      	ldr	r2, [pc, #192]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c70:	2307      	movs	r3, #7
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <HAL_UART_MspInit+0xf0>)
 8000c7c:	f001 faf8 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c80:	e030      	b.n	8000ce4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_UART_MspInit+0xf4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d12b      	bne.n	8000ce4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_UART_MspInit+0xec>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_MspInit+0xf0>)
 8000ce0:	f001 fac6 	bl	8002270 <HAL_GPIO_Init>
}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40004400 	.word	0x40004400

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f8e2 	bl	8000ef4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d30:	f004 f9fe 	bl	8005130 <xTaskGetSchedulerState>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d001      	beq.n	8000d3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d3a:	f004 ffe5 	bl	8005d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <ADC_IRQHandler+0x10>)
 8000d4a:	f000 f936 	bl	8000fba <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000a4 	.word	0x200000a4

08000d58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <DMA2_Stream0_IRQHandler+0x10>)
 8000d5e:	f001 f81d 	bl	8001d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200000ec 	.word	0x200000ec

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f005 fa56 	bl	800624c <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000228 	.word	0x20000228
 8000dd4:	20004cc8 	.word	0x20004cc8

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e00:	f7ff ffea 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f005 fa15 	bl	8006258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fc11 	bl	8000654 <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e40:	08006c68 	.word	0x08006c68
  ldr r2, =_sbss
 8000e44:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000e48:	20004cc8 	.word	0x20004cc8

08000e4c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <DMA1_Stream0_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fe47 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe12 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fe5f 	bl	8001b76 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 fe27 	bl	8001b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	20000030 	.word	0x20000030
 8000ef0:	2000002c 	.word	0x2000002c

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000030 	.word	0x20000030
 8000f18:	2000022c 	.word	0x2000022c

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000022c 	.word	0x2000022c

08000f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e033      	b.n	8000fb2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fdd6 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d118      	bne.n	8000fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f7a:	f023 0302 	bic.w	r3, r3, #2
 8000f7e:	f043 0202 	orr.w	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fb68 	bl	800165c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f023 0303 	bic.w	r3, r3, #3
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa2:	e001      	b.n	8000fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d049      	beq.n	8001084 <HAL_ADC_IRQHandler+0xca>
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d046      	beq.n	8001084 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d12b      	bne.n	8001074 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001020:	2b00      	cmp	r3, #0
 8001022:	d127      	bne.n	8001074 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800103c:	2b00      	cmp	r3, #0
 800103e:	d119      	bne.n	8001074 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0220 	bic.w	r2, r2, #32
 800104e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d105      	bne.n	8001074 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fa89 	bl	800058c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f06f 0212 	mvn.w	r2, #18
 8001082:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d057      	beq.n	800114a <HAL_ADC_IRQHandler+0x190>
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d054      	beq.n	800114a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d139      	bne.n	800113a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d12b      	bne.n	800113a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d124      	bne.n	800113a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d11d      	bne.n	800113a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001102:	2b00      	cmp	r3, #0
 8001104:	d119      	bne.n	800113a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001114:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	2b00      	cmp	r3, #0
 800112c:	d105      	bne.n	800113a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fc0c 	bl	8001958 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f06f 020c 	mvn.w	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001158:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d017      	beq.n	8001190 <HAL_ADC_IRQHandler+0x1d6>
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d014      	beq.n	8001190 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10d      	bne.n	8001190 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f925 	bl	80013d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f06f 0201 	mvn.w	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800119e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d015      	beq.n	80011d2 <HAL_ADC_IRQHandler+0x218>
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d012      	beq.n	80011d2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b0:	f043 0202 	orr.w	r2, r3, #2
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0220 	mvn.w	r2, #32
 80011c0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f90e 	bl	80013e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f06f 0220 	mvn.w	r2, #32
 80011d0:	601a      	str	r2, [r3, #0]
  }
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Start_DMA+0x1e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e0ce      	b.n	8001398 <HAL_ADC_Start_DMA+0x1bc>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d018      	beq.n	8001242 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001220:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_ADC_Start_DMA+0x1c4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a5f      	ldr	r2, [pc, #380]	; (80013a4 <HAL_ADC_Start_DMA+0x1c8>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9a      	lsrs	r2, r3, #18
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001234:	e002      	b.n	800123c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	3b01      	subs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d107      	bne.n	8001262 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001260:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 8086 	bne.w	800137e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800129c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b0:	d106      	bne.n	80012c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f023 0206 	bic.w	r2, r3, #6
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
 80012be:	e002      	b.n	80012c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_ADC_Start_DMA+0x1cc>)
 80012d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	4a35      	ldr	r2, [pc, #212]	; (80013ac <HAL_ADC_Start_DMA+0x1d0>)
 80012d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	4a34      	ldr	r2, [pc, #208]	; (80013b0 <HAL_ADC_Start_DMA+0x1d4>)
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <HAL_ADC_Start_DMA+0x1d8>)
 80012e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001302:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001312:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	334c      	adds	r3, #76	; 0x4c
 800131e:	4619      	mov	r1, r3
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f000 fce2 	bl	8001cec <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10f      	bne.n	8001354 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d129      	bne.n	8001396 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	e020      	b.n	8001396 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_ADC_Start_DMA+0x1dc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d11b      	bne.n	8001396 <HAL_ADC_Start_DMA+0x1ba>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d114      	bne.n	8001396 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	e00b      	b.n	8001396 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f043 0210 	orr.w	r2, r3, #16
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000028 	.word	0x20000028
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	40012300 	.word	0x40012300
 80013ac:	08001855 	.word	0x08001855
 80013b0:	0800190f 	.word	0x0800190f
 80013b4:	0800192b 	.word	0x0800192b
 80013b8:	40012000 	.word	0x40012000

080013bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1c>
 8001410:	2302      	movs	r3, #2
 8001412:	e113      	b.n	800163c <HAL_ADC_ConfigChannel+0x244>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d925      	bls.n	8001470 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68d9      	ldr	r1, [r3, #12]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	4603      	mov	r3, r0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4403      	add	r3, r0
 8001462:	3b1e      	subs	r3, #30
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	e022      	b.n	80014b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6919      	ldr	r1, [r3, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	2207      	movs	r2, #7
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4403      	add	r3, r0
 80014ac:	409a      	lsls	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d824      	bhi.n	8001508 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b05      	subs	r3, #5
 80014d0:	221f      	movs	r2, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3b05      	subs	r3, #5
 80014fa:	fa00 f203 	lsl.w	r2, r0, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
 8001506:	e04c      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d824      	bhi.n	800155a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b23      	subs	r3, #35	; 0x23
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b23      	subs	r3, #35	; 0x23
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
 8001558:	e023      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b41      	subs	r3, #65	; 0x41
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b41      	subs	r3, #65	; 0x41
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_ADC_ConfigChannel+0x250>)
 80015a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a28      	ldr	r2, [pc, #160]	; (800164c <HAL_ADC_ConfigChannel+0x254>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d10f      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1d8>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_ADC_ConfigChannel+0x254>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12b      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x23a>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_ADC_ConfigChannel+0x258>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d003      	beq.n	80015ec <HAL_ADC_ConfigChannel+0x1f4>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b11      	cmp	r3, #17
 80015ea:	d122      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_ADC_ConfigChannel+0x258>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d111      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_ADC_ConfigChannel+0x25c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_ADC_ConfigChannel+0x260>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9a      	lsrs	r2, r3, #18
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001624:	e002      	b.n	800162c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3b01      	subs	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40012300 	.word	0x40012300
 800164c:	40012000 	.word	0x40012000
 8001650:	10000012 	.word	0x10000012
 8001654:	20000028 	.word	0x20000028
 8001658:	431bde83 	.word	0x431bde83

0800165c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001664:	4b79      	ldr	r3, [pc, #484]	; (800184c <ADC_Init+0x1f0>)
 8001666:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	431a      	orrs	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	021a      	lsls	r2, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6899      	ldr	r1, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	4a58      	ldr	r2, [pc, #352]	; (8001850 <ADC_Init+0x1f4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d022      	beq.n	800173a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	e00f      	b.n	800175a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001758:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0202 	bic.w	r2, r2, #2
 8001768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7e1b      	ldrb	r3, [r3, #24]
 8001774:	005a      	lsls	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01b      	beq.n	80017c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001796:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6859      	ldr	r1, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	3b01      	subs	r3, #1
 80017b4:	035a      	lsls	r2, r3, #13
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e007      	b.n	80017d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	051a      	lsls	r2, r3, #20
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6899      	ldr	r1, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001812:	025a      	lsls	r2, r3, #9
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6899      	ldr	r1, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	029a      	lsls	r2, r3, #10
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	609a      	str	r2, [r3, #8]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40012300 	.word	0x40012300
 8001850:	0f000001 	.word	0x0f000001

08001854 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800186a:	2b00      	cmp	r3, #0
 800186c:	d13c      	bne.n	80018e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d12b      	bne.n	80018e0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800188c:	2b00      	cmp	r3, #0
 800188e:	d127      	bne.n	80018e0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d119      	bne.n	80018e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0220 	bic.w	r2, r2, #32
 80018ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7fe fe53 	bl	800058c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018e6:	e00e      	b.n	8001906 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff fd75 	bl	80013e4 <HAL_ADC_ErrorCallback>
}
 80018fa:	e004      	b.n	8001906 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fd4d 	bl	80013bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f043 0204 	orr.w	r2, r3, #4
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff fd4a 	bl	80013e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_GetPriorityGrouping+0x18>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	f003 0307 	and.w	r3, r3, #7
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	db0b      	blt.n	80019fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	f003 021f 	and.w	r2, r3, #31
 80019e8:	4907      	ldr	r1, [pc, #28]	; (8001a08 <__NVIC_EnableIRQ+0x38>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2001      	movs	r0, #1
 80019f2:	fa00 f202 	lsl.w	r2, r0, r2
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100

08001a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db0a      	blt.n	8001a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	490c      	ldr	r1, [pc, #48]	; (8001a58 <__NVIC_SetPriority+0x4c>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	0112      	lsls	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a34:	e00a      	b.n	8001a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4908      	ldr	r1, [pc, #32]	; (8001a5c <__NVIC_SetPriority+0x50>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	3b04      	subs	r3, #4
 8001a44:	0112      	lsls	r2, r2, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	440b      	add	r3, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000e100 	.word	0xe000e100
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f1c3 0307 	rsb	r3, r3, #7
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf28      	it	cs
 8001a7e:	2304      	movcs	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d902      	bls.n	8001a90 <NVIC_EncodePriority+0x30>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b03      	subs	r3, #3
 8001a8e:	e000      	b.n	8001a92 <NVIC_EncodePriority+0x32>
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	4313      	orrs	r3, r2
         );
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad8:	d301      	bcc.n	8001ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00f      	b.n	8001afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <SysTick_Config+0x40>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	f7ff ff8e 	bl	8001a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <SysTick_Config+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SysTick_Config+0x40>)
 8001af8:	2207      	movs	r2, #7
 8001afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	e000e010 	.word	0xe000e010

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff29 	bl	800196c <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff3e 	bl	80019b4 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ff8e 	bl	8001a60 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff5d 	bl	8001a0c <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff31 	bl	80019d0 <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffa2 	bl	8001ac8 <SysTick_Config>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff f9be 	bl	8000f1c <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e099      	b.n	8001ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bcc:	e00f      	b.n	8001bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bce:	f7ff f9a5 	bl	8000f1c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d908      	bls.n	8001bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e078      	b.n	8001ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e8      	bne.n	8001bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_DMA_Init+0x158>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4313      	orrs	r3, r2
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f023 0307 	bic.w	r3, r3, #7
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d117      	bne.n	8001cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00e      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa6f 	bl	8002178 <DMA_CheckFifoParam>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e016      	b.n	8001ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa26 	bl	800210c <DMA_CalcBaseAndBitshift>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	223f      	movs	r2, #63	; 0x3f
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	f010803f 	.word	0xf010803f

08001cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_DMA_Start_IT+0x26>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e040      	b.n	8001d94 <HAL_DMA_Start_IT+0xa8>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d12f      	bne.n	8001d86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f9b8 	bl	80020b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0216 	orr.w	r2, r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0208 	orr.w	r2, r2, #8
 8001d72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e005      	b.n	8001d92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001da8:	4b8e      	ldr	r3, [pc, #568]	; (8001fe4 <HAL_DMA_IRQHandler+0x248>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a8e      	ldr	r2, [pc, #568]	; (8001fe8 <HAL_DMA_IRQHandler+0x24c>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0a9b      	lsrs	r3, r3, #10
 8001db4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	2208      	movs	r2, #8
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d01a      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0204 	bic.w	r2, r2, #4
 8001dee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2208      	movs	r2, #8
 8001df6:	409a      	lsls	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2204      	movs	r2, #4
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d012      	beq.n	8001e74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00b      	beq.n	8001e74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2204      	movs	r2, #4
 8001e62:	409a      	lsls	r2, r3
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	f043 0204 	orr.w	r2, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2210      	movs	r2, #16
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d043      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03c      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2210      	movs	r2, #16
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d018      	beq.n	8001ede <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d108      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d024      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
 8001eca:	e01f      	b.n	8001f0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e016      	b.n	8001f0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0208 	bic.w	r2, r2, #8
 8001efa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	2220      	movs	r2, #32
 8001f12:	409a      	lsls	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 808f 	beq.w	800203c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8087 	beq.w	800203c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	2220      	movs	r2, #32
 8001f34:	409a      	lsls	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d136      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0216 	bic.w	r2, r2, #22
 8001f54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_DMA_IRQHandler+0x1da>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0208 	bic.w	r2, r2, #8
 8001f84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	223f      	movs	r2, #63	; 0x3f
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d07e      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
        }
        return;
 8001fb2:	e079      	b.n	80020a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d01d      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10d      	bne.n	8001fec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d031      	beq.n	800203c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	4798      	blx	r3
 8001fe0:	e02c      	b.n	800203c <HAL_DMA_IRQHandler+0x2a0>
 8001fe2:	bf00      	nop
 8001fe4:	20000028 	.word	0x20000028
 8001fe8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e01e      	b.n	800203c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10f      	bne.n	800202c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0210 	bic.w	r2, r2, #16
 800201a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	2b00      	cmp	r3, #0
 8002042:	d032      	beq.n	80020aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d022      	beq.n	8002096 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2205      	movs	r2, #5
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	3301      	adds	r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	d307      	bcc.n	8002084 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f2      	bne.n	8002068 <HAL_DMA_IRQHandler+0x2cc>
 8002082:	e000      	b.n	8002086 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002084:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
 80020a6:	e000      	b.n	80020aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80020a8:	bf00      	nop
    }
  }
}
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d108      	bne.n	80020f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ee:	e007      	b.n	8002100 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3b10      	subs	r3, #16
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <DMA_CalcBaseAndBitshift+0x64>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <DMA_CalcBaseAndBitshift+0x68>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d909      	bls.n	800214e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	1d1a      	adds	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	659a      	str	r2, [r3, #88]	; 0x58
 800214c:	e007      	b.n	800215e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	aaaaaaab 	.word	0xaaaaaaab
 8002174:	08006c1c 	.word	0x08006c1c

08002178 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11f      	bne.n	80021d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d856      	bhi.n	8002246 <DMA_CheckFifoParam+0xce>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <DMA_CheckFifoParam+0x28>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021c3 	.word	0x080021c3
 80021a8:	080021b1 	.word	0x080021b1
 80021ac:	08002247 	.word	0x08002247
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d046      	beq.n	800224a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c0:	e043      	b.n	800224a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ca:	d140      	bne.n	800224e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d0:	e03d      	b.n	800224e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021da:	d121      	bne.n	8002220 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d837      	bhi.n	8002252 <DMA_CheckFifoParam+0xda>
 80021e2:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <DMA_CheckFifoParam+0x70>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	080021ff 	.word	0x080021ff
 80021f0:	080021f9 	.word	0x080021f9
 80021f4:	08002211 	.word	0x08002211
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      break;
 80021fc:	e030      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d025      	beq.n	8002256 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220e:	e022      	b.n	8002256 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800221e:	e01c      	b.n	800225a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d903      	bls.n	800222e <DMA_CheckFifoParam+0xb6>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d003      	beq.n	8002234 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800222c:	e018      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
      break;
 8002232:	e015      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      break;
 8002244:	e00b      	b.n	800225e <DMA_CheckFifoParam+0xe6>
      break;
 8002246:	bf00      	nop
 8002248:	e00a      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e008      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e006      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 8002252:	bf00      	nop
 8002254:	e004      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 8002256:	bf00      	nop
 8002258:	e002      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;   
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 800225e:	bf00      	nop
    }
  } 
  
  return status; 
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	e159      	b.n	8002540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	f040 8148 	bne.w	800253a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d005      	beq.n	80022c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d130      	bne.n	8002324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f8:	2201      	movs	r2, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 0201 	and.w	r2, r3, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b03      	cmp	r3, #3
 800232e:	d017      	beq.n	8002360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d123      	bne.n	80023b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	08da      	lsrs	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3208      	adds	r2, #8
 8002374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	08da      	lsrs	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3208      	adds	r2, #8
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0203 	and.w	r2, r3, #3
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a2 	beq.w	800253a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_GPIO_Init+0x2e8>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a56      	ldr	r2, [pc, #344]	; (8002558 <HAL_GPIO_Init+0x2e8>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b54      	ldr	r3, [pc, #336]	; (8002558 <HAL_GPIO_Init+0x2e8>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002412:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_GPIO_Init+0x2ec>)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a49      	ldr	r2, [pc, #292]	; (8002560 <HAL_GPIO_Init+0x2f0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d019      	beq.n	8002472 <HAL_GPIO_Init+0x202>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a48      	ldr	r2, [pc, #288]	; (8002564 <HAL_GPIO_Init+0x2f4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_GPIO_Init+0x1fe>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a47      	ldr	r2, [pc, #284]	; (8002568 <HAL_GPIO_Init+0x2f8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00d      	beq.n	800246a <HAL_GPIO_Init+0x1fa>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a46      	ldr	r2, [pc, #280]	; (800256c <HAL_GPIO_Init+0x2fc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d007      	beq.n	8002466 <HAL_GPIO_Init+0x1f6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a45      	ldr	r2, [pc, #276]	; (8002570 <HAL_GPIO_Init+0x300>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_GPIO_Init+0x1f2>
 800245e:	2304      	movs	r3, #4
 8002460:	e008      	b.n	8002474 <HAL_GPIO_Init+0x204>
 8002462:	2307      	movs	r3, #7
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x204>
 8002466:	2303      	movs	r3, #3
 8002468:	e004      	b.n	8002474 <HAL_GPIO_Init+0x204>
 800246a:	2302      	movs	r3, #2
 800246c:	e002      	b.n	8002474 <HAL_GPIO_Init+0x204>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x204>
 8002472:	2300      	movs	r3, #0
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f002 0203 	and.w	r2, r2, #3
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	4093      	lsls	r3, r2
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002484:	4935      	ldr	r1, [pc, #212]	; (800255c <HAL_GPIO_Init+0x2ec>)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <HAL_GPIO_Init+0x304>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b6:	4a2f      	ldr	r2, [pc, #188]	; (8002574 <HAL_GPIO_Init+0x304>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_GPIO_Init+0x304>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <HAL_GPIO_Init+0x304>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_GPIO_Init+0x304>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250a:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <HAL_GPIO_Init+0x304>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002510:	4b18      	ldr	r3, [pc, #96]	; (8002574 <HAL_GPIO_Init+0x304>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_GPIO_Init+0x304>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3301      	adds	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	f67f aea2 	bls.w	800228c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40013800 	.word	0x40013800
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400
 8002568:	40020800 	.word	0x40020800
 800256c:	40020c00 	.word	0x40020c00
 8002570:	40021000 	.word	0x40021000
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e267      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d075      	beq.n	80026b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ca:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d00c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d6:	4b85      	ldr	r3, [pc, #532]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d112      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e2:	4b82      	ldr	r3, [pc, #520]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ee:	d10b      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d05b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d157      	bne.n	80026b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e242      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d106      	bne.n	8002620 <HAL_RCC_OscConfig+0x74>
 8002612:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a75      	ldr	r2, [pc, #468]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e01d      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6f      	ldr	r2, [pc, #444]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a6c      	ldr	r2, [pc, #432]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002644:	4b69      	ldr	r3, [pc, #420]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe fc5a 	bl	8000f1c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fc56 	bl	8000f1c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e207      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0xc0>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fc46 	bl	8000f1c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe fc42 	bl	8000f1c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1f3      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	4b51      	ldr	r3, [pc, #324]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0xe8>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d063      	beq.n	800278a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d11c      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026da:	4b44      	ldr	r3, [pc, #272]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d116      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e1c7      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4937      	ldr	r1, [pc, #220]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	e03a      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCC_OscConfig+0x244>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fbfb 	bl	8000f1c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272a:	f7fe fbf7 	bl	8000f1c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1a8      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4925      	ldr	r1, [pc, #148]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
 800275c:	e015      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x244>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fbda 	bl	8000f1c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276c:	f7fe fbd6 	bl	8000f1c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e187      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d036      	beq.n	8002804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCC_OscConfig+0x248>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7fe fbba 	bl	8000f1c <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe fbb6 	bl	8000f1c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e167      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_OscConfig+0x240>)
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x200>
 80027ca:	e01b      	b.n	8002804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_OscConfig+0x248>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe fba3 	bl	8000f1c <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	e00e      	b.n	80027f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027da:	f7fe fb9f 	bl	8000f1c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d907      	bls.n	80027f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e150      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
 80027ec:	40023800 	.word	0x40023800
 80027f0:	42470000 	.word	0x42470000
 80027f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ea      	bne.n	80027da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8097 	beq.w	8002940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a7c      	ldr	r2, [pc, #496]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b77      	ldr	r3, [pc, #476]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d118      	bne.n	8002880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284e:	4b74      	ldr	r3, [pc, #464]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a73      	ldr	r2, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285a:	f7fe fb5f 	bl	8000f1c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7fe fb5b 	bl	8000f1c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e10c      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x474>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x2ea>
 8002888:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a63      	ldr	r2, [pc, #396]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
 8002894:	e01c      	b.n	80028d0 <HAL_RCC_OscConfig+0x324>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b05      	cmp	r3, #5
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x30c>
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a5e      	ldr	r2, [pc, #376]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70
 80028aa:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	4a5b      	ldr	r2, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0x324>
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fb20 	bl	8000f1c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe fb1c 	bl	8000f1c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0cb      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ee      	beq.n	80028e0 <HAL_RCC_OscConfig+0x334>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe fb0a 	bl	8000f1c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe fb06 	bl	8000f1c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0b5      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ee      	bne.n	800290c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a1 	beq.w	8002a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800294a:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b08      	cmp	r3, #8
 8002954:	d05c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d141      	bne.n	80029e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCC_OscConfig+0x478>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe fada 	bl	8000f1c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fad6 	bl	8000f1c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e087      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	019b      	lsls	r3, r3, #6
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	491b      	ldr	r1, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x478>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe faaf 	bl	8000f1c <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe faab 	bl	8000f1c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e05c      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x416>
 80029e0:	e054      	b.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x478>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fa98 	bl	8000f1c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fa94 	bl	8000f1c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e045      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x470>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x444>
 8002a0e:	e03d      	b.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e038      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x4ec>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d028      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d121      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d11a      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d111      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0cc      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d90c      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d044      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e067      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4934      	ldr	r1, [pc, #208]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe f9c6 	bl	8000f1c <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7fe f9c2 	bl	8000f1c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e04f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d20c      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f821 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe f926 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08006c04 	.word	0x08006c04
 8002c60:	20000028 	.word	0x20000028
 8002c64:	2000002c 	.word	0x2000002c

08002c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c6c:	b094      	sub	sp, #80	; 0x50
 8002c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	647b      	str	r3, [r7, #68]	; 0x44
 8002c74:	2300      	movs	r3, #0
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c78:	2300      	movs	r3, #0
 8002c7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c80:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	f200 80e1 	bhi.w	8002e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x34>
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c9a:	e0db      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b73      	ldr	r3, [pc, #460]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ca0:	e0db      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca6:	e0d8      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca8:	4b6f      	ldr	r3, [pc, #444]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b6a      	ldr	r3, [pc, #424]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cda:	4622      	mov	r2, r4
 8002cdc:	462b      	mov	r3, r5
 8002cde:	f04f 0000 	mov.w	r0, #0
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	0159      	lsls	r1, r3, #5
 8002ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cec:	0150      	lsls	r0, r2, #5
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	1a51      	subs	r1, r2, r1
 8002cf6:	6139      	str	r1, [r7, #16]
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	018b      	lsls	r3, r1, #6
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d16:	4651      	mov	r1, sl
 8002d18:	018a      	lsls	r2, r1, #6
 8002d1a:	4651      	mov	r1, sl
 8002d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d20:	4659      	mov	r1, fp
 8002d22:	eb63 0901 	sbc.w	r9, r3, r1
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3a:	4690      	mov	r8, r2
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	eb18 0303 	adds.w	r3, r8, r3
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	462b      	mov	r3, r5
 8002d48:	eb49 0303 	adc.w	r3, r9, r3
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	024b      	lsls	r3, r1, #9
 8002d5e:	4621      	mov	r1, r4
 8002d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d64:	4621      	mov	r1, r4
 8002d66:	024a      	lsls	r2, r1, #9
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6e:	2200      	movs	r2, #0
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d78:	f7fd fa8a 	bl	8000290 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4613      	mov	r3, r2
 8002d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d84:	e058      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	4611      	mov	r1, r2
 8002d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	0159      	lsls	r1, r3, #5
 8002dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db2:	0150      	lsls	r0, r2, #5
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4641      	mov	r1, r8
 8002dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	00eb      	lsls	r3, r5, #3
 8002dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dee:	00e2      	lsls	r2, r4, #3
 8002df0:	4614      	mov	r4, r2
 8002df2:	461d      	mov	r5, r3
 8002df4:	4643      	mov	r3, r8
 8002df6:	18e3      	adds	r3, r4, r3
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	eb45 0303 	adc.w	r3, r5, r3
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	028b      	lsls	r3, r1, #10
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e18:	4621      	mov	r1, r4
 8002e1a:	028a      	lsls	r2, r1, #10
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e22:	2200      	movs	r2, #0
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	61fa      	str	r2, [r7, #28]
 8002e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2c:	f7fd fa30 	bl	8000290 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3750      	adds	r7, #80	; 0x50
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	007a1200 	.word	0x007a1200

08002e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000028 	.word	0x20000028

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e90:	f7ff fff0 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	0a9b      	lsrs	r3, r3, #10
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4903      	ldr	r1, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08006c14 	.word	0x08006c14

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb8:	f7ff ffdc 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0b5b      	lsrs	r3, r3, #13
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4903      	ldr	r1, [pc, #12]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	08006c14 	.word	0x08006c14

08002edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e042      	b.n	8002f74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fe7e 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	; 0x24
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f973 	bl	800320c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d175      	bne.n	8003088 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_UART_Transmit+0x2c>
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e06e      	b.n	800308a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	; 0x21
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fba:	f7fd ffaf 	bl	8000f1c <HAL_GetTick>
 8002fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_UART_Transmit+0x6c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e003      	b.n	8002ff0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff0:	e02e      	b.n	8003050 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f848 	bl	8003092 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03a      	b.n	800308a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3302      	adds	r3, #2
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	e007      	b.n	8003042 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1cb      	bne.n	8002ff2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	; 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f814 	bl	8003092 <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e006      	b.n	800308a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a2:	e03b      	b.n	800311c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d037      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ac:	f7fd ff36 	bl	8000f1c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e03a      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d023      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x8a>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d020      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x8a>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d01d      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d116      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f81d 	bl	8003144 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2208      	movs	r2, #8
 800310e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e00f      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4013      	ands	r3, r2
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	429a      	cmp	r2, r3
 8003138:	d0b4      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003144:	b480      	push	{r7}
 8003146:	b095      	sub	sp, #84	; 0x54
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800316c:	643a      	str	r2, [r7, #64]	; 0x40
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3314      	adds	r3, #20
 8003186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e5      	bne.n	8003180 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d119      	bne.n	80031f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	647b      	str	r3, [r7, #68]	; 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031dc:	61ba      	str	r2, [r7, #24]
 80031de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6979      	ldr	r1, [r7, #20]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e5      	bne.n	80031bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031fe:	bf00      	nop
 8003200:	3754      	adds	r7, #84	; 0x54
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b0c0      	sub	sp, #256	; 0x100
 8003212:	af00      	add	r7, sp, #0
 8003214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	68d9      	ldr	r1, [r3, #12]
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	ea40 0301 	orr.w	r3, r0, r1
 8003234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	431a      	orrs	r2, r3
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	431a      	orrs	r2, r3
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003264:	f021 010c 	bic.w	r1, r1, #12
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003272:	430b      	orrs	r3, r1
 8003274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	6999      	ldr	r1, [r3, #24]
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	ea40 0301 	orr.w	r3, r0, r1
 8003292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <UART_SetConfig+0x2cc>)
 800329c:	429a      	cmp	r2, r3
 800329e:	d005      	beq.n	80032ac <UART_SetConfig+0xa0>
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <UART_SetConfig+0x2d0>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d104      	bne.n	80032b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ac:	f7ff fe02 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 80032b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032b4:	e003      	b.n	80032be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032b6:	f7ff fde9 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 80032ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c8:	f040 810c 	bne.w	80034e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032de:	4622      	mov	r2, r4
 80032e0:	462b      	mov	r3, r5
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80032e6:	415b      	adcs	r3, r3
 80032e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032ee:	4621      	mov	r1, r4
 80032f0:	eb12 0801 	adds.w	r8, r2, r1
 80032f4:	4629      	mov	r1, r5
 80032f6:	eb43 0901 	adc.w	r9, r3, r1
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330e:	4690      	mov	r8, r2
 8003310:	4699      	mov	r9, r3
 8003312:	4623      	mov	r3, r4
 8003314:	eb18 0303 	adds.w	r3, r8, r3
 8003318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800331c:	462b      	mov	r3, r5
 800331e:	eb49 0303 	adc.w	r3, r9, r3
 8003322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800333a:	460b      	mov	r3, r1
 800333c:	18db      	adds	r3, r3, r3
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
 8003340:	4613      	mov	r3, r2
 8003342:	eb42 0303 	adc.w	r3, r2, r3
 8003346:	657b      	str	r3, [r7, #84]	; 0x54
 8003348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800334c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003350:	f7fc ff9e 	bl	8000290 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4b61      	ldr	r3, [pc, #388]	; (80034e0 <UART_SetConfig+0x2d4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	011c      	lsls	r4, r3, #4
 8003362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800336c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	64b9      	str	r1, [r7, #72]	; 0x48
 800337c:	415b      	adcs	r3, r3
 800337e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003384:	4641      	mov	r1, r8
 8003386:	eb12 0a01 	adds.w	sl, r2, r1
 800338a:	4649      	mov	r1, r9
 800338c:	eb43 0b01 	adc.w	fp, r3, r1
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800339c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a4:	4692      	mov	sl, r2
 80033a6:	469b      	mov	fp, r3
 80033a8:	4643      	mov	r3, r8
 80033aa:	eb1a 0303 	adds.w	r3, sl, r3
 80033ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b2:	464b      	mov	r3, r9
 80033b4:	eb4b 0303 	adc.w	r3, fp, r3
 80033b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033d0:	460b      	mov	r3, r1
 80033d2:	18db      	adds	r3, r3, r3
 80033d4:	643b      	str	r3, [r7, #64]	; 0x40
 80033d6:	4613      	mov	r3, r2
 80033d8:	eb42 0303 	adc.w	r3, r2, r3
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
 80033de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033e6:	f7fc ff53 	bl	8000290 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <UART_SetConfig+0x2d4>)
 80033f2:	fba3 2301 	umull	r2, r3, r3, r1
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2264      	movs	r2, #100	; 0x64
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	1acb      	subs	r3, r1, r3
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <UART_SetConfig+0x2d4>)
 8003408:	fba3 2302 	umull	r2, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003414:	441c      	add	r4, r3
 8003416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341a:	2200      	movs	r2, #0
 800341c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003430:	415b      	adcs	r3, r3
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003438:	4641      	mov	r1, r8
 800343a:	1851      	adds	r1, r2, r1
 800343c:	6339      	str	r1, [r7, #48]	; 0x30
 800343e:	4649      	mov	r1, r9
 8003440:	414b      	adcs	r3, r1
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003450:	4659      	mov	r1, fp
 8003452:	00cb      	lsls	r3, r1, #3
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345a:	4651      	mov	r1, sl
 800345c:	00ca      	lsls	r2, r1, #3
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4603      	mov	r3, r0
 8003464:	4642      	mov	r2, r8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800346c:	464b      	mov	r3, r9
 800346e:	460a      	mov	r2, r1
 8003470:	eb42 0303 	adc.w	r3, r2, r3
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800348c:	460b      	mov	r3, r1
 800348e:	18db      	adds	r3, r3, r3
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
 8003492:	4613      	mov	r3, r2
 8003494:	eb42 0303 	adc.w	r3, r2, r3
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800349a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800349e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034a2:	f7fc fef5 	bl	8000290 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <UART_SetConfig+0x2d4>)
 80034ac:	fba3 1302 	umull	r1, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	2164      	movs	r1, #100	; 0x64
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <UART_SetConfig+0x2d4>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	f003 0207 	and.w	r2, r3, #7
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4422      	add	r2, r4
 80034d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034d4:	e106      	b.n	80036e4 <UART_SetConfig+0x4d8>
 80034d6:	bf00      	nop
 80034d8:	40011000 	.word	0x40011000
 80034dc:	40011400 	.word	0x40011400
 80034e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034f6:	4642      	mov	r2, r8
 80034f8:	464b      	mov	r3, r9
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	6239      	str	r1, [r7, #32]
 80034fe:	415b      	adcs	r3, r3
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
 8003502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003506:	4641      	mov	r1, r8
 8003508:	1854      	adds	r4, r2, r1
 800350a:	4649      	mov	r1, r9
 800350c:	eb43 0501 	adc.w	r5, r3, r1
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	00eb      	lsls	r3, r5, #3
 800351a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800351e:	00e2      	lsls	r2, r4, #3
 8003520:	4614      	mov	r4, r2
 8003522:	461d      	mov	r5, r3
 8003524:	4643      	mov	r3, r8
 8003526:	18e3      	adds	r3, r4, r3
 8003528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800352c:	464b      	mov	r3, r9
 800352e:	eb45 0303 	adc.w	r3, r5, r3
 8003532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003552:	4629      	mov	r1, r5
 8003554:	008b      	lsls	r3, r1, #2
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355c:	4621      	mov	r1, r4
 800355e:	008a      	lsls	r2, r1, #2
 8003560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003564:	f7fc fe94 	bl	8000290 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4b60      	ldr	r3, [pc, #384]	; (80036f0 <UART_SetConfig+0x4e4>)
 800356e:	fba3 2302 	umull	r2, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	011c      	lsls	r4, r3, #4
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	1891      	adds	r1, r2, r2
 800358e:	61b9      	str	r1, [r7, #24]
 8003590:	415b      	adcs	r3, r3
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003598:	4641      	mov	r1, r8
 800359a:	1851      	adds	r1, r2, r1
 800359c:	6139      	str	r1, [r7, #16]
 800359e:	4649      	mov	r1, r9
 80035a0:	414b      	adcs	r3, r1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b0:	4659      	mov	r1, fp
 80035b2:	00cb      	lsls	r3, r1, #3
 80035b4:	4651      	mov	r1, sl
 80035b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ba:	4651      	mov	r1, sl
 80035bc:	00ca      	lsls	r2, r1, #3
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	4642      	mov	r2, r8
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035cc:	464b      	mov	r3, r9
 80035ce:	460a      	mov	r2, r1
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035f0:	4649      	mov	r1, r9
 80035f2:	008b      	lsls	r3, r1, #2
 80035f4:	4641      	mov	r1, r8
 80035f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fa:	4641      	mov	r1, r8
 80035fc:	008a      	lsls	r2, r1, #2
 80035fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003602:	f7fc fe45 	bl	8000290 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4611      	mov	r1, r2
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <UART_SetConfig+0x4e4>)
 800360e:	fba3 2301 	umull	r2, r3, r3, r1
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2264      	movs	r2, #100	; 0x64
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	1acb      	subs	r3, r1, r3
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	3332      	adds	r3, #50	; 0x32
 8003620:	4a33      	ldr	r2, [pc, #204]	; (80036f0 <UART_SetConfig+0x4e4>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800362c:	441c      	add	r4, r3
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	673b      	str	r3, [r7, #112]	; 0x70
 8003636:	677a      	str	r2, [r7, #116]	; 0x74
 8003638:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	1891      	adds	r1, r2, r2
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	415b      	adcs	r3, r3
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800364c:	4641      	mov	r1, r8
 800364e:	1851      	adds	r1, r2, r1
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	4649      	mov	r1, r9
 8003654:	414b      	adcs	r3, r1
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003664:	4659      	mov	r1, fp
 8003666:	00cb      	lsls	r3, r1, #3
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366e:	4651      	mov	r1, sl
 8003670:	00ca      	lsls	r2, r1, #3
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	4603      	mov	r3, r0
 8003678:	4642      	mov	r2, r8
 800367a:	189b      	adds	r3, r3, r2
 800367c:	66bb      	str	r3, [r7, #104]	; 0x68
 800367e:	464b      	mov	r3, r9
 8003680:	460a      	mov	r2, r1
 8003682:	eb42 0303 	adc.w	r3, r2, r3
 8003686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	663b      	str	r3, [r7, #96]	; 0x60
 8003692:	667a      	str	r2, [r7, #100]	; 0x64
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036a0:	4649      	mov	r1, r9
 80036a2:	008b      	lsls	r3, r1, #2
 80036a4:	4641      	mov	r1, r8
 80036a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036aa:	4641      	mov	r1, r8
 80036ac:	008a      	lsls	r2, r1, #2
 80036ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036b2:	f7fc fded 	bl	8000290 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <UART_SetConfig+0x4e4>)
 80036bc:	fba3 1302 	umull	r1, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	2164      	movs	r1, #100	; 0x64
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	3332      	adds	r3, #50	; 0x32
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <UART_SetConfig+0x4e4>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	f003 020f 	and.w	r2, r3, #15
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4422      	add	r2, r4
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036ea:	46bd      	mov	sp, r7
 80036ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f0:	51eb851f 	.word	0x51eb851f

080036f4 <__NVIC_SetPriority>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db0a      	blt.n	800371e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	490c      	ldr	r1, [pc, #48]	; (8003740 <__NVIC_SetPriority+0x4c>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	440b      	add	r3, r1
 8003718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800371c:	e00a      	b.n	8003734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <__NVIC_SetPriority+0x50>)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3b04      	subs	r3, #4
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	440b      	add	r3, r1
 8003732:	761a      	strb	r2, [r3, #24]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000e100 	.word	0xe000e100
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800374c:	2100      	movs	r1, #0
 800374e:	f06f 0004 	mvn.w	r0, #4
 8003752:	f7ff ffcf 	bl	80036f4 <__NVIC_SetPriority>
#endif
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003762:	f3ef 8305 	mrs	r3, IPSR
 8003766:	603b      	str	r3, [r7, #0]
  return(result);
 8003768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800376e:	f06f 0305 	mvn.w	r3, #5
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	e00c      	b.n	8003790 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <osKernelInitialize+0x44>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <osKernelInitialize+0x44>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003784:	2300      	movs	r3, #0
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	e002      	b.n	8003790 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003790:	687b      	ldr	r3, [r7, #4]
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000230 	.word	0x20000230

080037a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037aa:	f3ef 8305 	mrs	r3, IPSR
 80037ae:	603b      	str	r3, [r7, #0]
  return(result);
 80037b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <osKernelStart+0x1a>
    stat = osErrorISR;
 80037b6:	f06f 0305 	mvn.w	r3, #5
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e010      	b.n	80037e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <osKernelStart+0x48>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d109      	bne.n	80037da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037c6:	f7ff ffbf 	bl	8003748 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <osKernelStart+0x48>)
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037d0:	f001 f866 	bl	80048a0 <vTaskStartScheduler>
      stat = osOK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	e002      	b.n	80037e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037e0:	687b      	ldr	r3, [r7, #4]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000230 	.word	0x20000230

080037f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08e      	sub	sp, #56	; 0x38
 80037f4:	af04      	add	r7, sp, #16
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003800:	f3ef 8305 	mrs	r3, IPSR
 8003804:	617b      	str	r3, [r7, #20]
  return(result);
 8003806:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003808:	2b00      	cmp	r3, #0
 800380a:	d17e      	bne.n	800390a <osThreadNew+0x11a>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07b      	beq.n	800390a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003816:	2318      	movs	r3, #24
 8003818:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d045      	beq.n	80038b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <osThreadNew+0x48>
        name = attr->name;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <osThreadNew+0x6e>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b38      	cmp	r3, #56	; 0x38
 8003850:	d805      	bhi.n	800385e <osThreadNew+0x6e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <osThreadNew+0x72>
        return (NULL);
 800385e:	2300      	movs	r3, #0
 8003860:	e054      	b.n	800390c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <osThreadNew+0xa8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b5b      	cmp	r3, #91	; 0x5b
 8003880:	d90a      	bls.n	8003898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <osThreadNew+0xa8>
        mem = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e010      	b.n	80038ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10c      	bne.n	80038ba <osThreadNew+0xca>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <osThreadNew+0xca>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <osThreadNew+0xca>
          mem = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	e001      	b.n	80038ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d110      	bne.n	80038e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038c8:	9202      	str	r2, [sp, #8]
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fe0c 	bl	80044f4 <xTaskCreateStatic>
 80038dc:	4603      	mov	r3, r0
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e013      	b.n	800390a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d110      	bne.n	800390a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fe57 	bl	80045ae <xTaskCreate>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <osThreadNew+0x11a>
            hTask = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800390a:	693b      	ldr	r3, [r7, #16]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3728      	adds	r7, #40	; 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800391c:	f3ef 8305 	mrs	r3, IPSR
 8003920:	60bb      	str	r3, [r7, #8]
  return(result);
 8003922:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <osDelay+0x1c>
    stat = osErrorISR;
 8003928:	f06f 0305 	mvn.w	r3, #5
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e007      	b.n	8003940 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <osDelay+0x2c>
      vTaskDelay(ticks);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 ff7c 	bl	8004838 <vTaskDelay>
    }
  }

  return (stat);
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a07      	ldr	r2, [pc, #28]	; (8003978 <vApplicationGetIdleTaskMemory+0x2c>)
 800395c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4a06      	ldr	r2, [pc, #24]	; (800397c <vApplicationGetIdleTaskMemory+0x30>)
 8003962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000234 	.word	0x20000234
 800397c:	20000290 	.word	0x20000290

08003980 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a07      	ldr	r2, [pc, #28]	; (80039ac <vApplicationGetTimerTaskMemory+0x2c>)
 8003990:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4a06      	ldr	r2, [pc, #24]	; (80039b0 <vApplicationGetTimerTaskMemory+0x30>)
 8003996:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20000490 	.word	0x20000490
 80039b0:	200004ec 	.word	0x200004ec

080039b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f103 0208 	add.w	r2, r3, #8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f103 0208 	add.w	r2, r3, #8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f103 0208 	add.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d103      	bne.n	8003a76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e00c      	b.n	8003a90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e002      	b.n	8003a84 <vListInsert+0x2e>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d2f6      	bcs.n	8003a7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6892      	ldr	r2, [r2, #8]
 8003ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6852      	ldr	r2, [r2, #4]
 8003ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d103      	bne.n	8003afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1e5a      	subs	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b46:	f002 f84d 	bl	8005be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	441a      	add	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	3b01      	subs	r3, #1
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	441a      	add	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	22ff      	movs	r2, #255	; 0xff
 8003b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d114      	bne.n	8003bc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01a      	beq.n	8003bda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3310      	adds	r3, #16
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 f903 	bl	8004db4 <xTaskRemoveFromEventList>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <xQueueGenericReset+0xcc>)
 8003bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	e009      	b.n	8003bda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3310      	adds	r3, #16
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fef2 	bl	80039b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3324      	adds	r3, #36	; 0x24
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff feed 	bl	80039b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bda:	f002 f833 	bl	8005c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bde:	2301      	movs	r3, #1
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08e      	sub	sp, #56	; 0x38
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <xQueueGenericCreateStatic+0x52>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <xQueueGenericCreateStatic+0x56>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <xQueueGenericCreateStatic+0x58>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	623b      	str	r3, [r7, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <xQueueGenericCreateStatic+0x7e>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <xQueueGenericCreateStatic+0x82>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <xQueueGenericCreateStatic+0x84>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	61fb      	str	r3, [r7, #28]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c8a:	2350      	movs	r3, #80	; 0x50
 8003c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b50      	cmp	r3, #80	; 0x50
 8003c92:	d00a      	beq.n	8003caa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61bb      	str	r3, [r7, #24]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003caa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f805 	bl	8003cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	69b8      	ldr	r0, [r7, #24]
 8003d0e:	f7ff ff05 	bl	8003b1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	; 0x38
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueGenericSend+0x32>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <xQueueGenericSend+0x40>
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <xQueueGenericSend+0x44>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <xQueueGenericSend+0x46>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <xQueueGenericSend+0x60>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d103      	bne.n	8003d92 <xQueueGenericSend+0x6e>
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <xQueueGenericSend+0x72>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <xQueueGenericSend+0x74>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003db2:	f001 f9bd 	bl	8005130 <xTaskGetSchedulerState>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <xQueueGenericSend+0x9e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <xQueueGenericSend+0xa2>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <xQueueGenericSend+0xa4>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	61fb      	str	r3, [r7, #28]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003de2:	f001 feff 	bl	8005be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <xQueueGenericSend+0xd4>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d129      	bne.n	8003e4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dfe:	f000 fa0b 	bl	8004218 <prvCopyDataToQueue>
 8003e02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	3324      	adds	r3, #36	; 0x24
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 ffcf 	bl	8004db4 <xTaskRemoveFromEventList>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <xQueueGenericSend+0x1f8>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	e00a      	b.n	8003e44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e34:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <xQueueGenericSend+0x1f8>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e44:	f001 fefe 	bl	8005c44 <vPortExitCritical>
				return pdPASS;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e063      	b.n	8003f14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e52:	f001 fef7 	bl	8005c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e05c      	b.n	8003f14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 f809 	bl	8004e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e6e:	f001 fee9 	bl	8005c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e72:	f000 fd7b 	bl	800496c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e76:	f001 feb5 	bl	8005be4 <vPortEnterCritical>
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d103      	bne.n	8003e90 <xQueueGenericSend+0x16c>
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d103      	bne.n	8003ea6 <xQueueGenericSend+0x182>
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea6:	f001 fecd 	bl	8005c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eaa:	1d3a      	adds	r2, r7, #4
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fff8 	bl	8004ea8 <xTaskCheckForTimeOut>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d124      	bne.n	8003f08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ec0:	f000 faa2 	bl	8004408 <prvIsQueueFull>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	3310      	adds	r3, #16
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 ff1e 	bl	8004d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eda:	f000 fa2d 	bl	8004338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ede:	f000 fd53 	bl	8004988 <xTaskResumeAll>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af7c 	bne.w	8003de2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <xQueueGenericSend+0x1f8>)
 8003eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	e772      	b.n	8003de2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003efe:	f000 fa1b 	bl	8004338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f02:	f000 fd41 	bl	8004988 <xTaskResumeAll>
 8003f06:	e76c      	b.n	8003de2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f0a:	f000 fa15 	bl	8004338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f0e:	f000 fd3b 	bl	8004988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3738      	adds	r7, #56	; 0x38
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b090      	sub	sp, #64	; 0x40
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d103      	bne.n	8003f5c <xQueueGenericSendFromISR+0x3c>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <xQueueGenericSendFromISR+0x40>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <xQueueGenericSendFromISR+0x42>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d103      	bne.n	8003f8a <xQueueGenericSendFromISR+0x6a>
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <xQueueGenericSendFromISR+0x6e>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <xQueueGenericSendFromISR+0x70>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	623b      	str	r3, [r7, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003faa:	f001 fefd 	bl	8005da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fae:	f3ef 8211 	mrs	r2, BASEPRI
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61fa      	str	r2, [r7, #28]
 8003fc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <xQueueGenericSendFromISR+0xbc>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d12f      	bne.n	800403c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ff2:	f000 f911 	bl	8004218 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ff6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d112      	bne.n	8004026 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	d016      	beq.n	8004036 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	3324      	adds	r3, #36	; 0x24
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fed1 	bl	8004db4 <xTaskRemoveFromEventList>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e007      	b.n	8004036 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800402a:	3301      	adds	r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	b25a      	sxtb	r2, r3
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004036:	2301      	movs	r3, #1
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800403a:	e001      	b.n	8004040 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800403c:	2300      	movs	r3, #0
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800404a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800404c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800404e:	4618      	mov	r0, r3
 8004050:	3740      	adds	r7, #64	; 0x40
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004064:	2300      	movs	r3, #0
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <xQueueReceive+0x30>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	623b      	str	r3, [r7, #32]
}
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <xQueueReceive+0x3e>
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xQueueReceive+0x42>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueReceive+0x44>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueReceive+0x5e>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	61fb      	str	r3, [r7, #28]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b6:	f001 f83b 	bl	8005130 <xTaskGetSchedulerState>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <xQueueReceive+0x6e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <xQueueReceive+0x72>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <xQueueReceive+0x74>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueReceive+0x8e>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61bb      	str	r3, [r7, #24]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e6:	f001 fd7d 	bl	8005be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01f      	beq.n	8004136 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040fa:	f000 f8f7 	bl	80042ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1e5a      	subs	r2, r3, #1
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00f      	beq.n	800412e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	3310      	adds	r3, #16
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fe4e 	bl	8004db4 <xTaskRemoveFromEventList>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800411e:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <xQueueReceive+0x1bc>)
 8004120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800412e:	f001 fd89 	bl	8005c44 <vPortExitCritical>
				return pdPASS;
 8004132:	2301      	movs	r3, #1
 8004134:	e069      	b.n	800420a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800413c:	f001 fd82 	bl	8005c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004140:	2300      	movs	r3, #0
 8004142:	e062      	b.n	800420a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800414a:	f107 0310 	add.w	r3, r7, #16
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fe94 	bl	8004e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004154:	2301      	movs	r3, #1
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004158:	f001 fd74 	bl	8005c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800415c:	f000 fc06 	bl	800496c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004160:	f001 fd40 	bl	8005be4 <vPortEnterCritical>
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800416a:	b25b      	sxtb	r3, r3
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004170:	d103      	bne.n	800417a <xQueueReceive+0x122>
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004180:	b25b      	sxtb	r3, r3
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d103      	bne.n	8004190 <xQueueReceive+0x138>
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004190:	f001 fd58 	bl	8005c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004194:	1d3a      	adds	r2, r7, #4
 8004196:	f107 0310 	add.w	r3, r7, #16
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fe83 	bl	8004ea8 <xTaskCheckForTimeOut>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d123      	bne.n	80041f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041aa:	f000 f917 	bl	80043dc <prvIsQueueEmpty>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d017      	beq.n	80041e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	3324      	adds	r3, #36	; 0x24
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fda9 	bl	8004d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c4:	f000 f8b8 	bl	8004338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041c8:	f000 fbde 	bl	8004988 <xTaskResumeAll>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d189      	bne.n	80040e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <xQueueReceive+0x1bc>)
 80041d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	e780      	b.n	80040e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e6:	f000 f8a7 	bl	8004338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041ea:	f000 fbcd 	bl	8004988 <xTaskResumeAll>
 80041ee:	e77a      	b.n	80040e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f2:	f000 f8a1 	bl	8004338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041f6:	f000 fbc7 	bl	8004988 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fc:	f000 f8ee 	bl	80043dc <prvIsQueueEmpty>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	f43f af6f 	beq.w	80040e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004208:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800420a:	4618      	mov	r0, r3
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d14d      	bne.n	80042da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 ff92 	bl	800516c <xTaskPriorityDisinherit>
 8004248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	e043      	b.n	80042da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d119      	bne.n	800428c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6858      	ldr	r0, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	461a      	mov	r2, r3
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	f002 f81e 	bl	80062a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d32b      	bcc.n	80042da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e026      	b.n	80042da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68d8      	ldr	r0, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	461a      	mov	r2, r3
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	f002 f804 	bl	80062a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	425b      	negs	r3, r3
 80042a6:	441a      	add	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d207      	bcs.n	80042c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	425b      	negs	r3, r3
 80042c2:	441a      	add	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d105      	bne.n	80042da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80042e2:	697b      	ldr	r3, [r7, #20]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d303      	bcc.n	8004320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68d9      	ldr	r1, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	461a      	mov	r2, r3
 800432a:	6838      	ldr	r0, [r7, #0]
 800432c:	f001 ffba 	bl	80062a4 <memcpy>
	}
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004340:	f001 fc50 	bl	8005be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800434a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800434c:	e011      	b.n	8004372 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d012      	beq.n	800437c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3324      	adds	r3, #36	; 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fd2a 	bl	8004db4 <xTaskRemoveFromEventList>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004366:	f000 fe01 	bl	8004f6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	3b01      	subs	r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004376:	2b00      	cmp	r3, #0
 8004378:	dce9      	bgt.n	800434e <prvUnlockQueue+0x16>
 800437a:	e000      	b.n	800437e <prvUnlockQueue+0x46>
					break;
 800437c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004386:	f001 fc5d 	bl	8005c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800438a:	f001 fc2b 	bl	8005be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004394:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004396:	e011      	b.n	80043bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d012      	beq.n	80043c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3310      	adds	r3, #16
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd05 	bl	8004db4 <xTaskRemoveFromEventList>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043b0:	f000 fddc 	bl	8004f6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043b4:	7bbb      	ldrb	r3, [r7, #14]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dce9      	bgt.n	8004398 <prvUnlockQueue+0x60>
 80043c4:	e000      	b.n	80043c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	22ff      	movs	r2, #255	; 0xff
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043d0:	f001 fc38 	bl	8005c44 <vPortExitCritical>
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043e4:	f001 fbfe 	bl	8005be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e001      	b.n	80043fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043fa:	f001 fc23 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004410:	f001 fbe8 	bl	8005be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	429a      	cmp	r2, r3
 800441e:	d102      	bne.n	8004426 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e001      	b.n	800442a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800442a:	f001 fc0b 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e014      	b.n	8004472 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004448:	4a0f      	ldr	r2, [pc, #60]	; (8004488 <vQueueAddToRegistry+0x50>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004454:	490c      	ldr	r1, [pc, #48]	; (8004488 <vQueueAddToRegistry+0x50>)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <vQueueAddToRegistry+0x50>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800446a:	e006      	b.n	800447a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3301      	adds	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b07      	cmp	r3, #7
 8004476:	d9e7      	bls.n	8004448 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	200008ec 	.word	0x200008ec

0800448c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800449c:	f001 fba2 	bl	8005be4 <vPortEnterCritical>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a6:	b25b      	sxtb	r3, r3
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d103      	bne.n	80044b6 <vQueueWaitForMessageRestricted+0x2a>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d103      	bne.n	80044cc <vQueueWaitForMessageRestricted+0x40>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044cc:	f001 fbba 	bl	8005c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fc3b 	bl	8004d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7ff ff26 	bl	8004338 <prvUnlockQueue>
	}
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	; 0x38
 80044f8:	af04      	add	r7, sp, #16
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	623b      	str	r3, [r7, #32]
}
 800451a:	bf00      	nop
 800451c:	e7fe      	b.n	800451c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xTaskCreateStatic+0x46>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	61fb      	str	r3, [r7, #28]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800453a:	235c      	movs	r3, #92	; 0x5c
 800453c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b5c      	cmp	r3, #92	; 0x5c
 8004542:	d00a      	beq.n	800455a <xTaskCreateStatic+0x66>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61bb      	str	r3, [r7, #24]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800455a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01e      	beq.n	80045a0 <xTaskCreateStatic+0xac>
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004570:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	2202      	movs	r2, #2
 8004576:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800457a:	2300      	movs	r3, #0
 800457c:	9303      	str	r3, [sp, #12]
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	f107 0314 	add.w	r3, r7, #20
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f850 	bl	8004638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800459a:	f000 f8dd 	bl	8004758 <prvAddNewTaskToReadyList>
 800459e:	e001      	b.n	80045a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045a4:	697b      	ldr	r3, [r7, #20]
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08c      	sub	sp, #48	; 0x30
 80045b2:	af04      	add	r7, sp, #16
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 fc30 	bl	8005e28 <pvPortMalloc>
 80045c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045d0:	205c      	movs	r0, #92	; 0x5c
 80045d2:	f001 fc29 	bl	8005e28 <pvPortMalloc>
 80045d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
 80045e4:	e005      	b.n	80045f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f001 fcea 	bl	8005fc0 <vPortFree>
 80045ec:	e001      	b.n	80045f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d017      	beq.n	8004628 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	2300      	movs	r3, #0
 8004604:	9303      	str	r3, [sp, #12]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	9302      	str	r3, [sp, #8]
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f80e 	bl	8004638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800461c:	69f8      	ldr	r0, [r7, #28]
 800461e:	f000 f89b 	bl	8004758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004622:	2301      	movs	r3, #1
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	e002      	b.n	800462e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
 800462c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800462e:	69bb      	ldr	r3, [r7, #24]
	}
 8004630:	4618      	mov	r0, r3
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	461a      	mov	r2, r3
 8004650:	21a5      	movs	r1, #165	; 0xa5
 8004652:	f001 fdf3 	bl	800623c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004660:	3b01      	subs	r3, #1
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <prvInitialiseNewTask+0x58>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	617b      	str	r3, [r7, #20]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01f      	beq.n	80046d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e012      	b.n	80046c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	7819      	ldrb	r1, [r3, #0]
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	3334      	adds	r3, #52	; 0x34
 80046ac:	460a      	mov	r2, r1
 80046ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	4413      	add	r3, r2
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b0f      	cmp	r3, #15
 80046c6:	d9e9      	bls.n	800469c <prvInitialiseNewTask+0x64>
 80046c8:	e000      	b.n	80046cc <prvInitialiseNewTask+0x94>
			{
				break;
 80046ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d4:	e003      	b.n	80046de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	2b37      	cmp	r3, #55	; 0x37
 80046e2:	d901      	bls.n	80046e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046e4:	2337      	movs	r3, #55	; 0x37
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	2200      	movs	r2, #0
 80046f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	3304      	adds	r3, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff f978 	bl	80039f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	3318      	adds	r3, #24
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff f973 	bl	80039f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	2200      	movs	r2, #0
 8004728:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	69b8      	ldr	r0, [r7, #24]
 8004738:	f001 f928 	bl	800598c <pxPortInitialiseStack>
 800473c:	4602      	mov	r2, r0
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800474e:	bf00      	nop
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004760:	f001 fa40 	bl	8005be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004764:	4b2d      	ldr	r3, [pc, #180]	; (800481c <prvAddNewTaskToReadyList+0xc4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <prvAddNewTaskToReadyList+0xc4>)
 800476c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800476e:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <prvAddNewTaskToReadyList+0xc8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004776:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <prvAddNewTaskToReadyList+0xc8>)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800477c:	4b27      	ldr	r3, [pc, #156]	; (800481c <prvAddNewTaskToReadyList+0xc4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d110      	bne.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004784:	f000 fc16 	bl	8004fb4 <prvInitialiseTaskLists>
 8004788:	e00d      	b.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <prvAddNewTaskToReadyList+0xcc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004792:	4b23      	ldr	r3, [pc, #140]	; (8004820 <prvAddNewTaskToReadyList+0xc8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	429a      	cmp	r2, r3
 800479e:	d802      	bhi.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <prvAddNewTaskToReadyList+0xc8>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <prvAddNewTaskToReadyList+0xd0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <prvAddNewTaskToReadyList+0xd0>)
 80047ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <prvAddNewTaskToReadyList+0xd0>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <prvAddNewTaskToReadyList+0xd4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d903      	bls.n	80047cc <prvAddNewTaskToReadyList+0x74>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <prvAddNewTaskToReadyList+0xd4>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <prvAddNewTaskToReadyList+0xd8>)
 80047da:	441a      	add	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7ff f913 	bl	8003a0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047e8:	f001 fa2c 	bl	8005c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <prvAddNewTaskToReadyList+0xcc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00e      	beq.n	8004812 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <prvAddNewTaskToReadyList+0xc8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d207      	bcs.n	8004812 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004802:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <prvAddNewTaskToReadyList+0xdc>)
 8004804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000e00 	.word	0x20000e00
 8004820:	2000092c 	.word	0x2000092c
 8004824:	20000e0c 	.word	0x20000e0c
 8004828:	20000e1c 	.word	0x20000e1c
 800482c:	20000e08 	.word	0x20000e08
 8004830:	20000930 	.word	0x20000930
 8004834:	e000ed04 	.word	0xe000ed04

08004838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d017      	beq.n	800487a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <vTaskDelay+0x60>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <vTaskDelay+0x30>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60bb      	str	r3, [r7, #8]
}
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004868:	f000 f880 	bl	800496c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800486c:	2100      	movs	r1, #0
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fcea 	bl	8005248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004874:	f000 f888 	bl	8004988 <xTaskResumeAll>
 8004878:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d107      	bne.n	8004890 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <vTaskDelay+0x64>)
 8004882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000e28 	.word	0x20000e28
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048ae:	463a      	mov	r2, r7
 80048b0:	1d39      	adds	r1, r7, #4
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f848 	bl	800394c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	9202      	str	r2, [sp, #8]
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	460a      	mov	r2, r1
 80048ce:	4921      	ldr	r1, [pc, #132]	; (8004954 <vTaskStartScheduler+0xb4>)
 80048d0:	4821      	ldr	r0, [pc, #132]	; (8004958 <vTaskStartScheduler+0xb8>)
 80048d2:	f7ff fe0f 	bl	80044f4 <xTaskCreateStatic>
 80048d6:	4603      	mov	r3, r0
 80048d8:	4a20      	ldr	r2, [pc, #128]	; (800495c <vTaskStartScheduler+0xbc>)
 80048da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <vTaskStartScheduler+0xbc>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e001      	b.n	80048ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d102      	bne.n	80048fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80048f4:	f000 fcfc 	bl	80052f0 <xTimerCreateTimerTask>
 80048f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d116      	bne.n	800492e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	613b      	str	r3, [r7, #16]
}
 8004912:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004914:	4b12      	ldr	r3, [pc, #72]	; (8004960 <vTaskStartScheduler+0xc0>)
 8004916:	f04f 32ff 	mov.w	r2, #4294967295
 800491a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800491c:	4b11      	ldr	r3, [pc, #68]	; (8004964 <vTaskStartScheduler+0xc4>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <vTaskStartScheduler+0xc8>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004928:	f001 f8ba 	bl	8005aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800492c:	e00e      	b.n	800494c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d10a      	bne.n	800494c <vTaskStartScheduler+0xac>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	60fb      	str	r3, [r7, #12]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <vTaskStartScheduler+0xaa>
}
 800494c:	bf00      	nop
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	08006ba4 	.word	0x08006ba4
 8004958:	08004f85 	.word	0x08004f85
 800495c:	20000e24 	.word	0x20000e24
 8004960:	20000e20 	.word	0x20000e20
 8004964:	20000e0c 	.word	0x20000e0c
 8004968:	20000e04 	.word	0x20000e04

0800496c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <vTaskSuspendAll+0x18>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	4a03      	ldr	r2, [pc, #12]	; (8004984 <vTaskSuspendAll+0x18>)
 8004978:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20000e28 	.word	0x20000e28

08004988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004996:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <xTaskResumeAll+0x118>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	603b      	str	r3, [r7, #0]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049b4:	f001 f916 	bl	8005be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049b8:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <xTaskResumeAll+0x118>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	4a38      	ldr	r2, [pc, #224]	; (8004aa0 <xTaskResumeAll+0x118>)
 80049c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <xTaskResumeAll+0x118>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d162      	bne.n	8004a90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049ca:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <xTaskResumeAll+0x11c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d05e      	beq.n	8004a90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049d2:	e02f      	b.n	8004a34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d4:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <xTaskResumeAll+0x120>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3318      	adds	r3, #24
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff f871 	bl	8003ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff f86c 	bl	8003ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <xTaskResumeAll+0x124>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d903      	bls.n	8004a04 <xTaskResumeAll+0x7c>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4a2a      	ldr	r2, [pc, #168]	; (8004aac <xTaskResumeAll+0x124>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <xTaskResumeAll+0x128>)
 8004a12:	441a      	add	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe fff7 	bl	8003a0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <xTaskResumeAll+0x12c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <xTaskResumeAll+0x130>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a34:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <xTaskResumeAll+0x120>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1cb      	bne.n	80049d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a42:	f000 fb55 	bl	80050f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <xTaskResumeAll+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d010      	beq.n	8004a74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a52:	f000 f847 	bl	8004ae4 <xTaskIncrementTick>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a5c:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <xTaskResumeAll+0x130>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f1      	bne.n	8004a52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <xTaskResumeAll+0x134>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a74:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <xTaskResumeAll+0x130>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <xTaskResumeAll+0x138>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a90:	f001 f8d8 	bl	8005c44 <vPortExitCritical>

	return xAlreadyYielded;
 8004a94:	68bb      	ldr	r3, [r7, #8]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000e28 	.word	0x20000e28
 8004aa4:	20000e00 	.word	0x20000e00
 8004aa8:	20000dc0 	.word	0x20000dc0
 8004aac:	20000e08 	.word	0x20000e08
 8004ab0:	20000930 	.word	0x20000930
 8004ab4:	2000092c 	.word	0x2000092c
 8004ab8:	20000e14 	.word	0x20000e14
 8004abc:	20000e10 	.word	0x20000e10
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <xTaskGetTickCount+0x1c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ad0:	687b      	ldr	r3, [r7, #4]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000e04 	.word	0x20000e04

08004ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aee:	4b4f      	ldr	r3, [pc, #316]	; (8004c2c <xTaskIncrementTick+0x148>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 808f 	bne.w	8004c16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004af8:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <xTaskIncrementTick+0x14c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b00:	4a4b      	ldr	r2, [pc, #300]	; (8004c30 <xTaskIncrementTick+0x14c>)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d120      	bne.n	8004b4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b0c:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <xTaskIncrementTick+0x150>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <xTaskIncrementTick+0x48>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	603b      	str	r3, [r7, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <xTaskIncrementTick+0x46>
 8004b2c:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <xTaskIncrementTick+0x150>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <xTaskIncrementTick+0x154>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3f      	ldr	r2, [pc, #252]	; (8004c34 <xTaskIncrementTick+0x150>)
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4a3f      	ldr	r2, [pc, #252]	; (8004c38 <xTaskIncrementTick+0x154>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <xTaskIncrementTick+0x158>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a3d      	ldr	r2, [pc, #244]	; (8004c3c <xTaskIncrementTick+0x158>)
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	f000 fad1 	bl	80050f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b4e:	4b3c      	ldr	r3, [pc, #240]	; (8004c40 <xTaskIncrementTick+0x15c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d349      	bcc.n	8004bec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b58:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <xTaskIncrementTick+0x150>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b62:	4b37      	ldr	r3, [pc, #220]	; (8004c40 <xTaskIncrementTick+0x15c>)
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	601a      	str	r2, [r3, #0]
					break;
 8004b6a:	e03f      	b.n	8004bec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6c:	4b31      	ldr	r3, [pc, #196]	; (8004c34 <xTaskIncrementTick+0x150>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d203      	bcs.n	8004b8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b84:	4a2e      	ldr	r2, [pc, #184]	; (8004c40 <xTaskIncrementTick+0x15c>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b8a:	e02f      	b.n	8004bec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe ff99 	bl	8003ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3318      	adds	r3, #24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe ff90 	bl	8003ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <xTaskIncrementTick+0x160>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d903      	bls.n	8004bbc <xTaskIncrementTick+0xd8>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <xTaskIncrementTick+0x160>)
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <xTaskIncrementTick+0x164>)
 8004bca:	441a      	add	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f7fe ff1b 	bl	8003a0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <xTaskIncrementTick+0x168>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d3b8      	bcc.n	8004b58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bea:	e7b5      	b.n	8004b58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <xTaskIncrementTick+0x168>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf2:	4915      	ldr	r1, [pc, #84]	; (8004c48 <xTaskIncrementTick+0x164>)
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d901      	bls.n	8004c08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <xTaskIncrementTick+0x16c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e004      	b.n	8004c20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <xTaskIncrementTick+0x170>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	; (8004c54 <xTaskIncrementTick+0x170>)
 8004c1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c20:	697b      	ldr	r3, [r7, #20]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000e28 	.word	0x20000e28
 8004c30:	20000e04 	.word	0x20000e04
 8004c34:	20000db8 	.word	0x20000db8
 8004c38:	20000dbc 	.word	0x20000dbc
 8004c3c:	20000e18 	.word	0x20000e18
 8004c40:	20000e20 	.word	0x20000e20
 8004c44:	20000e08 	.word	0x20000e08
 8004c48:	20000930 	.word	0x20000930
 8004c4c:	2000092c 	.word	0x2000092c
 8004c50:	20000e14 	.word	0x20000e14
 8004c54:	20000e10 	.word	0x20000e10

08004c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c5e:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <vTaskSwitchContext+0xa8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c66:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <vTaskSwitchContext+0xac>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c6c:	e041      	b.n	8004cf2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004c6e:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <vTaskSwitchContext+0xac>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c74:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <vTaskSwitchContext+0xb0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e010      	b.n	8004c9e <vTaskSwitchContext+0x46>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vTaskSwitchContext+0x40>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vTaskSwitchContext+0x3e>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	491b      	ldr	r1, [pc, #108]	; (8004d0c <vTaskSwitchContext+0xb4>)
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0e4      	beq.n	8004c7c <vTaskSwitchContext+0x24>
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <vTaskSwitchContext+0xb4>)
 8004cbe:	4413      	add	r3, r2
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d104      	bne.n	8004ce2 <vTaskSwitchContext+0x8a>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <vTaskSwitchContext+0xb8>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4a06      	ldr	r2, [pc, #24]	; (8004d08 <vTaskSwitchContext+0xb0>)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6013      	str	r3, [r2, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000e28 	.word	0x20000e28
 8004d04:	20000e14 	.word	0x20000e14
 8004d08:	20000e08 	.word	0x20000e08
 8004d0c:	20000930 	.word	0x20000930
 8004d10:	2000092c 	.word	0x2000092c

08004d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	60fb      	str	r3, [r7, #12]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <vTaskPlaceOnEventList+0x44>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3318      	adds	r3, #24
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fe fe87 	bl	8003a56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d48:	2101      	movs	r1, #1
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f000 fa7c 	bl	8005248 <prvAddCurrentTaskToDelayedList>
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	2000092c 	.word	0x2000092c

08004d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	617b      	str	r3, [r7, #20]
}
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3318      	adds	r3, #24
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7fe fe3e 	bl	8003a0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	68b8      	ldr	r0, [r7, #8]
 8004da2:	f000 fa51 	bl	8005248 <prvAddCurrentTaskToDelayedList>
	}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	2000092c 	.word	0x2000092c

08004db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	60fb      	str	r3, [r7, #12]
}
 8004ddc:	bf00      	nop
 8004dde:	e7fe      	b.n	8004dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	3318      	adds	r3, #24
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fe fe6f 	bl	8003ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dea:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <xTaskRemoveFromEventList+0xb0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11d      	bne.n	8004e2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fe66 	bl	8003ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <xTaskRemoveFromEventList+0xb4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d903      	bls.n	8004e10 <xTaskRemoveFromEventList+0x5c>
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <xTaskRemoveFromEventList+0xb4>)
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4a13      	ldr	r2, [pc, #76]	; (8004e6c <xTaskRemoveFromEventList+0xb8>)
 8004e1e:	441a      	add	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7fe fdf1 	bl	8003a0e <vListInsertEnd>
 8004e2c:	e005      	b.n	8004e3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3318      	adds	r3, #24
 8004e32:	4619      	mov	r1, r3
 8004e34:	480e      	ldr	r0, [pc, #56]	; (8004e70 <xTaskRemoveFromEventList+0xbc>)
 8004e36:	f7fe fdea 	bl	8003a0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <xTaskRemoveFromEventList+0xc0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d905      	bls.n	8004e54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <xTaskRemoveFromEventList+0xc4>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e001      	b.n	8004e58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e58:	697b      	ldr	r3, [r7, #20]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000e28 	.word	0x20000e28
 8004e68:	20000e08 	.word	0x20000e08
 8004e6c:	20000930 	.word	0x20000930
 8004e70:	20000dc0 	.word	0x20000dc0
 8004e74:	2000092c 	.word	0x2000092c
 8004e78:	20000e14 	.word	0x20000e14

08004e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <vTaskInternalSetTimeOutState+0x24>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <vTaskInternalSetTimeOutState+0x28>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	605a      	str	r2, [r3, #4]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	20000e18 	.word	0x20000e18
 8004ea4:	20000e04 	.word	0x20000e04

08004ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	613b      	str	r3, [r7, #16]
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	60fb      	str	r3, [r7, #12]
}
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004eea:	f000 fe7b 	bl	8005be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004eee:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <xTaskCheckForTimeOut+0xbc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d102      	bne.n	8004f0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e023      	b.n	8004f56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <xTaskCheckForTimeOut+0xc0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d007      	beq.n	8004f2a <xTaskCheckForTimeOut+0x82>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d302      	bcc.n	8004f2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f24:	2301      	movs	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	e015      	b.n	8004f56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d20b      	bcs.n	8004f4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff ff9b 	bl	8004e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e004      	b.n	8004f56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f56:	f000 fe75 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000e04 	.word	0x20000e04
 8004f68:	20000e18 	.word	0x20000e18

08004f6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <vTaskMissedYield+0x14>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000e14 	.word	0x20000e14

08004f84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f8c:	f000 f852 	bl	8005034 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f90:	4b06      	ldr	r3, [pc, #24]	; (8004fac <prvIdleTask+0x28>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d9f9      	bls.n	8004f8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <prvIdleTask+0x2c>)
 8004f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fa8:	e7f0      	b.n	8004f8c <prvIdleTask+0x8>
 8004faa:	bf00      	nop
 8004fac:	20000930 	.word	0x20000930
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	e00c      	b.n	8004fda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4a12      	ldr	r2, [pc, #72]	; (8005014 <prvInitialiseTaskLists+0x60>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fcf0 	bl	80039b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b37      	cmp	r3, #55	; 0x37
 8004fde:	d9ef      	bls.n	8004fc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fe0:	480d      	ldr	r0, [pc, #52]	; (8005018 <prvInitialiseTaskLists+0x64>)
 8004fe2:	f7fe fce7 	bl	80039b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fe6:	480d      	ldr	r0, [pc, #52]	; (800501c <prvInitialiseTaskLists+0x68>)
 8004fe8:	f7fe fce4 	bl	80039b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fec:	480c      	ldr	r0, [pc, #48]	; (8005020 <prvInitialiseTaskLists+0x6c>)
 8004fee:	f7fe fce1 	bl	80039b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ff2:	480c      	ldr	r0, [pc, #48]	; (8005024 <prvInitialiseTaskLists+0x70>)
 8004ff4:	f7fe fcde 	bl	80039b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ff8:	480b      	ldr	r0, [pc, #44]	; (8005028 <prvInitialiseTaskLists+0x74>)
 8004ffa:	f7fe fcdb 	bl	80039b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <prvInitialiseTaskLists+0x78>)
 8005000:	4a05      	ldr	r2, [pc, #20]	; (8005018 <prvInitialiseTaskLists+0x64>)
 8005002:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <prvInitialiseTaskLists+0x7c>)
 8005006:	4a05      	ldr	r2, [pc, #20]	; (800501c <prvInitialiseTaskLists+0x68>)
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000930 	.word	0x20000930
 8005018:	20000d90 	.word	0x20000d90
 800501c:	20000da4 	.word	0x20000da4
 8005020:	20000dc0 	.word	0x20000dc0
 8005024:	20000dd4 	.word	0x20000dd4
 8005028:	20000dec 	.word	0x20000dec
 800502c:	20000db8 	.word	0x20000db8
 8005030:	20000dbc 	.word	0x20000dbc

08005034 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800503a:	e019      	b.n	8005070 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800503c:	f000 fdd2 	bl	8005be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005040:	4b10      	ldr	r3, [pc, #64]	; (8005084 <prvCheckTasksWaitingTermination+0x50>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3304      	adds	r3, #4
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe fd3b 	bl	8003ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <prvCheckTasksWaitingTermination+0x54>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3b01      	subs	r3, #1
 8005058:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <prvCheckTasksWaitingTermination+0x54>)
 800505a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <prvCheckTasksWaitingTermination+0x58>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3b01      	subs	r3, #1
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <prvCheckTasksWaitingTermination+0x58>)
 8005064:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005066:	f000 fded 	bl	8005c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f810 	bl	8005090 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <prvCheckTasksWaitingTermination+0x58>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e1      	bne.n	800503c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000dd4 	.word	0x20000dd4
 8005088:	20000e00 	.word	0x20000e00
 800508c:	20000de8 	.word	0x20000de8

08005090 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d108      	bne.n	80050b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 ff8a 	bl	8005fc0 <vPortFree>
				vPortFree( pxTCB );
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 ff87 	bl	8005fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050b2:	e018      	b.n	80050e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d103      	bne.n	80050c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 ff7e 	bl	8005fc0 <vPortFree>
	}
 80050c4:	e00f      	b.n	80050e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d00a      	beq.n	80050e6 <prvDeleteTCB+0x56>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
}
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <prvDeleteTCB+0x54>
	}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <prvResetNextTaskUnblockTime+0x38>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <prvResetNextTaskUnblockTime+0x3c>)
 8005102:	f04f 32ff 	mov.w	r2, #4294967295
 8005106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005108:	e008      	b.n	800511c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510a:	4b07      	ldr	r3, [pc, #28]	; (8005128 <prvResetNextTaskUnblockTime+0x38>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a04      	ldr	r2, [pc, #16]	; (800512c <prvResetNextTaskUnblockTime+0x3c>)
 800511a:	6013      	str	r3, [r2, #0]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	20000db8 	.word	0x20000db8
 800512c:	20000e20 	.word	0x20000e20

08005130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <xTaskGetSchedulerState+0x34>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800513e:	2301      	movs	r3, #1
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	e008      	b.n	8005156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005144:	4b08      	ldr	r3, [pc, #32]	; (8005168 <xTaskGetSchedulerState+0x38>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800514c:	2302      	movs	r3, #2
 800514e:	607b      	str	r3, [r7, #4]
 8005150:	e001      	b.n	8005156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005156:	687b      	ldr	r3, [r7, #4]
	}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	20000e0c 	.word	0x20000e0c
 8005168:	20000e28 	.word	0x20000e28

0800516c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d056      	beq.n	8005230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <xTaskPriorityDisinherit+0xd0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d00a      	beq.n	80051a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60fb      	str	r3, [r7, #12]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	60bb      	str	r3, [r7, #8]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	1e5a      	subs	r2, r3, #1
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d02c      	beq.n	8005230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d128      	bne.n	8005230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe fc70 	bl	8003ac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <xTaskPriorityDisinherit+0xd4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d903      	bls.n	8005210 <xTaskPriorityDisinherit+0xa4>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4a0c      	ldr	r2, [pc, #48]	; (8005240 <xTaskPriorityDisinherit+0xd4>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4a09      	ldr	r2, [pc, #36]	; (8005244 <xTaskPriorityDisinherit+0xd8>)
 800521e:	441a      	add	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f7fe fbf1 	bl	8003a0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005230:	697b      	ldr	r3, [r7, #20]
	}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	2000092c 	.word	0x2000092c
 8005240:	20000e08 	.word	0x20000e08
 8005244:	20000930 	.word	0x20000930

08005248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005252:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005258:	4b20      	ldr	r3, [pc, #128]	; (80052dc <prvAddCurrentTaskToDelayedList+0x94>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3304      	adds	r3, #4
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fc32 	bl	8003ac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d10a      	bne.n	8005282 <prvAddCurrentTaskToDelayedList+0x3a>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005272:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <prvAddCurrentTaskToDelayedList+0x94>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4819      	ldr	r0, [pc, #100]	; (80052e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800527c:	f7fe fbc7 	bl	8003a0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005280:	e026      	b.n	80052d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <prvAddCurrentTaskToDelayedList+0x94>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	429a      	cmp	r2, r3
 8005298:	d209      	bcs.n	80052ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <prvAddCurrentTaskToDelayedList+0x94>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f7fe fbd5 	bl	8003a56 <vListInsert>
}
 80052ac:	e010      	b.n	80052d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ae:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <prvAddCurrentTaskToDelayedList+0x94>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fe fbcb 	bl	8003a56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d202      	bcs.n	80052d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052ca:	4a08      	ldr	r2, [pc, #32]	; (80052ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6013      	str	r3, [r2, #0]
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000e04 	.word	0x20000e04
 80052dc:	2000092c 	.word	0x2000092c
 80052e0:	20000dec 	.word	0x20000dec
 80052e4:	20000dbc 	.word	0x20000dbc
 80052e8:	20000db8 	.word	0x20000db8
 80052ec:	20000e20 	.word	0x20000e20

080052f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052fa:	f000 fb07 	bl	800590c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052fe:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <xTimerCreateTimerTask+0x80>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d021      	beq.n	800534a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800530e:	1d3a      	adds	r2, r7, #4
 8005310:	f107 0108 	add.w	r1, r7, #8
 8005314:	f107 030c 	add.w	r3, r7, #12
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fb31 	bl	8003980 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	9202      	str	r2, [sp, #8]
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	2302      	movs	r3, #2
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	2300      	movs	r3, #0
 800532e:	460a      	mov	r2, r1
 8005330:	4910      	ldr	r1, [pc, #64]	; (8005374 <xTimerCreateTimerTask+0x84>)
 8005332:	4811      	ldr	r0, [pc, #68]	; (8005378 <xTimerCreateTimerTask+0x88>)
 8005334:	f7ff f8de 	bl	80044f4 <xTaskCreateStatic>
 8005338:	4603      	mov	r3, r0
 800533a:	4a10      	ldr	r2, [pc, #64]	; (800537c <xTimerCreateTimerTask+0x8c>)
 800533c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <xTimerCreateTimerTask+0x8c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	613b      	str	r3, [r7, #16]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005366:	697b      	ldr	r3, [r7, #20]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000e5c 	.word	0x20000e5c
 8005374:	08006bac 	.word	0x08006bac
 8005378:	080054b5 	.word	0x080054b5
 800537c:	20000e60 	.word	0x20000e60

08005380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	623b      	str	r3, [r7, #32]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053ae:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <xTimerGenericCommand+0x98>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d02a      	beq.n	800540c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	dc18      	bgt.n	80053fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053c8:	f7ff feb2 	bl	8005130 <xTaskGetSchedulerState>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d109      	bne.n	80053e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <xTimerGenericCommand+0x98>)
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	f107 0110 	add.w	r1, r7, #16
 80053da:	2300      	movs	r3, #0
 80053dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053de:	f7fe fca1 	bl	8003d24 <xQueueGenericSend>
 80053e2:	6278      	str	r0, [r7, #36]	; 0x24
 80053e4:	e012      	b.n	800540c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <xTimerGenericCommand+0x98>)
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	f107 0110 	add.w	r1, r7, #16
 80053ee:	2300      	movs	r3, #0
 80053f0:	2200      	movs	r2, #0
 80053f2:	f7fe fc97 	bl	8003d24 <xQueueGenericSend>
 80053f6:	6278      	str	r0, [r7, #36]	; 0x24
 80053f8:	e008      	b.n	800540c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <xTimerGenericCommand+0x98>)
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	f107 0110 	add.w	r1, r7, #16
 8005402:	2300      	movs	r3, #0
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	f7fe fd8b 	bl	8003f20 <xQueueGenericSendFromISR>
 800540a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800540e:	4618      	mov	r0, r3
 8005410:	3728      	adds	r7, #40	; 0x28
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000e5c 	.word	0x20000e5c

0800541c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <prvProcessExpiredTimer+0x94>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3304      	adds	r3, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe fb47 	bl	8003ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d022      	beq.n	800548e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	18d1      	adds	r1, r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	6978      	ldr	r0, [r7, #20]
 8005456:	f000 f8d1 	bl	80055fc <prvInsertTimerInActiveList>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01f      	beq.n	80054a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005460:	2300      	movs	r3, #0
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	2100      	movs	r1, #0
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7ff ff88 	bl	8005380 <xTimerGenericCommand>
 8005470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d113      	bne.n	80054a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	b2da      	uxtb	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	6978      	ldr	r0, [r7, #20]
 80054a6:	4798      	blx	r3
}
 80054a8:	bf00      	nop
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000e54 	.word	0x20000e54

080054b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054bc:	f107 0308 	add.w	r3, r7, #8
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f857 	bl	8005574 <prvGetNextExpireTime>
 80054c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4619      	mov	r1, r3
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f803 	bl	80054d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054d2:	f000 f8d5 	bl	8005680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054d6:	e7f1      	b.n	80054bc <prvTimerTask+0x8>

080054d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054e2:	f7ff fa43 	bl	800496c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f866 	bl	80055bc <prvSampleTimeNow>
 80054f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d130      	bne.n	800555a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <prvProcessTimerOrBlockTask+0x3c>
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	429a      	cmp	r2, r3
 8005504:	d806      	bhi.n	8005514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005506:	f7ff fa3f 	bl	8004988 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff85 	bl	800541c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005512:	e024      	b.n	800555e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800551a:	4b13      	ldr	r3, [pc, #76]	; (8005568 <prvProcessTimerOrBlockTask+0x90>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <prvProcessTimerOrBlockTask+0x50>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <prvProcessTimerOrBlockTask+0x52>
 8005528:	2300      	movs	r3, #0
 800552a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800552c:	4b0f      	ldr	r3, [pc, #60]	; (800556c <prvProcessTimerOrBlockTask+0x94>)
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	4619      	mov	r1, r3
 800553a:	f7fe ffa7 	bl	800448c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800553e:	f7ff fa23 	bl	8004988 <xTaskResumeAll>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10a      	bne.n	800555e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005548:	4b09      	ldr	r3, [pc, #36]	; (8005570 <prvProcessTimerOrBlockTask+0x98>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
}
 8005558:	e001      	b.n	800555e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800555a:	f7ff fa15 	bl	8004988 <xTaskResumeAll>
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000e58 	.word	0x20000e58
 800556c:	20000e5c 	.word	0x20000e5c
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <prvGetNextExpireTime+0x44>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <prvGetNextExpireTime+0x16>
 8005586:	2201      	movs	r2, #1
 8005588:	e000      	b.n	800558c <prvGetNextExpireTime+0x18>
 800558a:	2200      	movs	r2, #0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005598:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <prvGetNextExpireTime+0x44>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e001      	b.n	80055a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055a8:	68fb      	ldr	r3, [r7, #12]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000e54 	.word	0x20000e54

080055bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055c4:	f7ff fa7e 	bl	8004ac4 <xTaskGetTickCount>
 80055c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <prvSampleTimeNow+0x3c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d205      	bcs.n	80055e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055d4:	f000 f936 	bl	8005844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e002      	b.n	80055e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055e6:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <prvSampleTimeNow+0x3c>)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000e64 	.word	0x20000e64

080055fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	429a      	cmp	r2, r3
 8005620:	d812      	bhi.n	8005648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005630:	2301      	movs	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e01b      	b.n	800566e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <prvInsertTimerInActiveList+0x7c>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f7fe fa08 	bl	8003a56 <vListInsert>
 8005646:	e012      	b.n	800566e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d206      	bcs.n	800565e <prvInsertTimerInActiveList+0x62>
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d302      	bcc.n	800565e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e007      	b.n	800566e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <prvInsertTimerInActiveList+0x80>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7fe f9f4 	bl	8003a56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800566e:	697b      	ldr	r3, [r7, #20]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000e58 	.word	0x20000e58
 800567c:	20000e54 	.word	0x20000e54

08005680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08e      	sub	sp, #56	; 0x38
 8005684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005686:	e0ca      	b.n	800581e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da18      	bge.n	80056c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	3304      	adds	r3, #4
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	61fb      	str	r3, [r7, #28]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b6:	6850      	ldr	r0, [r2, #4]
 80056b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ba:	6892      	ldr	r2, [r2, #8]
 80056bc:	4611      	mov	r1, r2
 80056be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f2c0 80ab 	blt.w	800581e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe f9f5 	bl	8003ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056de:	463b      	mov	r3, r7
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff ff6b 	bl	80055bc <prvSampleTimeNow>
 80056e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b09      	cmp	r3, #9
 80056ec:	f200 8096 	bhi.w	800581c <prvProcessReceivedCommands+0x19c>
 80056f0:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <prvProcessReceivedCommands+0x78>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	08005721 	.word	0x08005721
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005721 	.word	0x08005721
 8005704:	08005795 	.word	0x08005795
 8005708:	080057a9 	.word	0x080057a9
 800570c:	080057f3 	.word	0x080057f3
 8005710:	08005721 	.word	0x08005721
 8005714:	08005721 	.word	0x08005721
 8005718:	08005795 	.word	0x08005795
 800571c:	080057a9 	.word	0x080057a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	18d1      	adds	r1, r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005740:	f7ff ff5c 	bl	80055fc <prvInsertTimerInActiveList>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d069      	beq.n	800581e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800574a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05e      	beq.n	800581e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	441a      	add	r2, r3
 8005768:	2300      	movs	r3, #0
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	2100      	movs	r1, #0
 8005770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005772:	f7ff fe05 	bl	8005380 <xTimerGenericCommand>
 8005776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d14f      	bne.n	800581e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61bb      	str	r3, [r7, #24]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80057a6:	e03a      	b.n	800581e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	617b      	str	r3, [r7, #20]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	18d1      	adds	r1, r2, r3
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ec:	f7ff ff06 	bl	80055fc <prvInsertTimerInActiveList>
					break;
 80057f0:	e015      	b.n	800581e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d103      	bne.n	8005808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005802:	f000 fbdd 	bl	8005fc0 <vPortFree>
 8005806:	e00a      	b.n	800581e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800581a:	e000      	b.n	800581e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800581c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <prvProcessReceivedCommands+0x1c0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1d39      	adds	r1, r7, #4
 8005824:	2200      	movs	r2, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fc16 	bl	8004058 <xQueueReceive>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	f47f af2a 	bne.w	8005688 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3730      	adds	r7, #48	; 0x30
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000e5c 	.word	0x20000e5c

08005844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800584a:	e048      	b.n	80058de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800584c:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <prvSwitchTimerLists+0xc0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005856:	4b2b      	ldr	r3, [pc, #172]	; (8005904 <prvSwitchTimerLists+0xc0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe f92f 	bl	8003ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02e      	beq.n	80058de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4413      	add	r3, r2
 8005888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	429a      	cmp	r2, r3
 8005890:	d90e      	bls.n	80058b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800589e:	4b19      	ldr	r3, [pc, #100]	; (8005904 <prvSwitchTimerLists+0xc0>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3304      	adds	r3, #4
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f7fe f8d4 	bl	8003a56 <vListInsert>
 80058ae:	e016      	b.n	80058de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058b0:	2300      	movs	r3, #0
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	2300      	movs	r3, #0
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	2100      	movs	r1, #0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff fd60 	bl	8005380 <xTimerGenericCommand>
 80058c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	603b      	str	r3, [r7, #0]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <prvSwitchTimerLists+0xc0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1b1      	bne.n	800584c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <prvSwitchTimerLists+0xc0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <prvSwitchTimerLists+0xc4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a04      	ldr	r2, [pc, #16]	; (8005904 <prvSwitchTimerLists+0xc0>)
 80058f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058f6:	4a04      	ldr	r2, [pc, #16]	; (8005908 <prvSwitchTimerLists+0xc4>)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	6013      	str	r3, [r2, #0]
}
 80058fc:	bf00      	nop
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000e54 	.word	0x20000e54
 8005908:	20000e58 	.word	0x20000e58

0800590c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005912:	f000 f967 	bl	8005be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <prvCheckForValidListAndQueue+0x60>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d120      	bne.n	8005960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800591e:	4814      	ldr	r0, [pc, #80]	; (8005970 <prvCheckForValidListAndQueue+0x64>)
 8005920:	f7fe f848 	bl	80039b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005924:	4813      	ldr	r0, [pc, #76]	; (8005974 <prvCheckForValidListAndQueue+0x68>)
 8005926:	f7fe f845 	bl	80039b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <prvCheckForValidListAndQueue+0x6c>)
 800592c:	4a10      	ldr	r2, [pc, #64]	; (8005970 <prvCheckForValidListAndQueue+0x64>)
 800592e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005930:	4b12      	ldr	r3, [pc, #72]	; (800597c <prvCheckForValidListAndQueue+0x70>)
 8005932:	4a10      	ldr	r2, [pc, #64]	; (8005974 <prvCheckForValidListAndQueue+0x68>)
 8005934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005936:	2300      	movs	r3, #0
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	4b11      	ldr	r3, [pc, #68]	; (8005980 <prvCheckForValidListAndQueue+0x74>)
 800593c:	4a11      	ldr	r2, [pc, #68]	; (8005984 <prvCheckForValidListAndQueue+0x78>)
 800593e:	2110      	movs	r1, #16
 8005940:	200a      	movs	r0, #10
 8005942:	f7fe f953 	bl	8003bec <xQueueGenericCreateStatic>
 8005946:	4603      	mov	r3, r0
 8005948:	4a08      	ldr	r2, [pc, #32]	; (800596c <prvCheckForValidListAndQueue+0x60>)
 800594a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800594c:	4b07      	ldr	r3, [pc, #28]	; (800596c <prvCheckForValidListAndQueue+0x60>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <prvCheckForValidListAndQueue+0x60>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	490b      	ldr	r1, [pc, #44]	; (8005988 <prvCheckForValidListAndQueue+0x7c>)
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fd6c 	bl	8004438 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005960:	f000 f970 	bl	8005c44 <vPortExitCritical>
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000e5c 	.word	0x20000e5c
 8005970:	20000e2c 	.word	0x20000e2c
 8005974:	20000e40 	.word	0x20000e40
 8005978:	20000e54 	.word	0x20000e54
 800597c:	20000e58 	.word	0x20000e58
 8005980:	20000f08 	.word	0x20000f08
 8005984:	20000e68 	.word	0x20000e68
 8005988:	08006bb4 	.word	0x08006bb4

0800598c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3b04      	subs	r3, #4
 800599c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3b04      	subs	r3, #4
 80059aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3b04      	subs	r3, #4
 80059ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059bc:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <pxPortInitialiseStack+0x64>)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3b14      	subs	r3, #20
 80059c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3b04      	subs	r3, #4
 80059d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f06f 0202 	mvn.w	r2, #2
 80059da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3b20      	subs	r3, #32
 80059e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	080059f5 	.word	0x080059f5

080059f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059fe:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <prvTaskExitError+0x54>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d00a      	beq.n	8005a1e <prvTaskExitError+0x2a>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	60fb      	str	r3, [r7, #12]
}
 8005a1a:	bf00      	nop
 8005a1c:	e7fe      	b.n	8005a1c <prvTaskExitError+0x28>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	60bb      	str	r3, [r7, #8]
}
 8005a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a32:	bf00      	nop
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0fc      	beq.n	8005a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	20000034 	.word	0x20000034
 8005a4c:	00000000 	.word	0x00000000

08005a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <pxCurrentTCBConst2>)
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	6808      	ldr	r0, [r1, #0]
 8005a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5a:	f380 8809 	msr	PSP, r0
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f04f 0000 	mov.w	r0, #0
 8005a66:	f380 8811 	msr	BASEPRI, r0
 8005a6a:	4770      	bx	lr
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst2>:
 8005a70:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a78:	4808      	ldr	r0, [pc, #32]	; (8005a9c <prvPortStartFirstTask+0x24>)
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	6800      	ldr	r0, [r0, #0]
 8005a7e:	f380 8808 	msr	MSP, r0
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f380 8814 	msr	CONTROL, r0
 8005a8a:	b662      	cpsie	i
 8005a8c:	b661      	cpsie	f
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	df00      	svc	0
 8005a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a9a:	bf00      	nop
 8005a9c:	e000ed08 	.word	0xe000ed08

08005aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005aa6:	4b46      	ldr	r3, [pc, #280]	; (8005bc0 <xPortStartScheduler+0x120>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a46      	ldr	r2, [pc, #280]	; (8005bc4 <xPortStartScheduler+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10a      	bne.n	8005ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ac6:	4b3e      	ldr	r3, [pc, #248]	; (8005bc0 <xPortStartScheduler+0x120>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a3f      	ldr	r2, [pc, #252]	; (8005bc8 <xPortStartScheduler+0x128>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10a      	bne.n	8005ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60fb      	str	r3, [r7, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <xPortStartScheduler+0x12c>)
 8005ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <xPortStartScheduler+0x130>)
 8005b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b0e:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b10:	2207      	movs	r2, #7
 8005b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b14:	e009      	b.n	8005b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b16:	4b2f      	ldr	r3, [pc, #188]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d0ef      	beq.n	8005b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b36:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1c3 0307 	rsb	r3, r3, #7
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d00a      	beq.n	8005b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	60bb      	str	r3, [r7, #8]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b6a:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b8e:	f000 f8dd 	bl	8005d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <xPortStartScheduler+0x13c>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b98:	f000 f8fc 	bl	8005d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <xPortStartScheduler+0x140>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <xPortStartScheduler+0x140>)
 8005ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ba8:	f7ff ff66 	bl	8005a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bac:	f7ff f854 	bl	8004c58 <vTaskSwitchContext>
	prvTaskExitError();
 8005bb0:	f7ff ff20 	bl	80059f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	e000ed00 	.word	0xe000ed00
 8005bc4:	410fc271 	.word	0x410fc271
 8005bc8:	410fc270 	.word	0x410fc270
 8005bcc:	e000e400 	.word	0xe000e400
 8005bd0:	20000f58 	.word	0x20000f58
 8005bd4:	20000f5c 	.word	0x20000f5c
 8005bd8:	e000ed20 	.word	0xe000ed20
 8005bdc:	20000034 	.word	0x20000034
 8005be0:	e000ef34 	.word	0xe000ef34

08005be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	607b      	str	r3, [r7, #4]
}
 8005bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <vPortEnterCritical+0x58>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <vPortEnterCritical+0x58>)
 8005c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <vPortEnterCritical+0x58>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d10f      	bne.n	8005c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortEnterCritical+0x5c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	603b      	str	r3, [r7, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <vPortEnterCritical+0x4a>
	}
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000034 	.word	0x20000034
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <vPortExitCritical+0x50>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <vPortExitCritical+0x24>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	607b      	str	r3, [r7, #4]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c68:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <vPortExitCritical+0x50>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <vPortExitCritical+0x50>)
 8005c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <vPortExitCritical+0x50>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d105      	bne.n	8005c86 <vPortExitCritical+0x42>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f383 8811 	msr	BASEPRI, r3
}
 8005c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	20000034 	.word	0x20000034
	...

08005ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ca0:	f3ef 8009 	mrs	r0, PSP
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <pxCurrentTCBConst>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	f01e 0f10 	tst.w	lr, #16
 8005cb0:	bf08      	it	eq
 8005cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cba:	6010      	str	r0, [r2, #0]
 8005cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cc4:	f380 8811 	msr	BASEPRI, r0
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f7fe ffc2 	bl	8004c58 <vTaskSwitchContext>
 8005cd4:	f04f 0000 	mov.w	r0, #0
 8005cd8:	f380 8811 	msr	BASEPRI, r0
 8005cdc:	bc09      	pop	{r0, r3}
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	6808      	ldr	r0, [r1, #0]
 8005ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f01e 0f10 	tst.w	lr, #16
 8005cea:	bf08      	it	eq
 8005cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cf0:	f380 8809 	msr	PSP, r0
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w

08005d00 <pxCurrentTCBConst>:
 8005d00:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	607b      	str	r3, [r7, #4]
}
 8005d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d22:	f7fe fedf 	bl	8004ae4 <xTaskIncrementTick>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <xPortSysTickHandler+0x40>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	2300      	movs	r3, #0
 8005d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f383 8811 	msr	BASEPRI, r3
}
 8005d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <vPortSetupTimerInterrupt+0x34>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <vPortSetupTimerInterrupt+0x38>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <vPortSetupTimerInterrupt+0x3c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <vPortSetupTimerInterrupt+0x40>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	099b      	lsrs	r3, r3, #6
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <vPortSetupTimerInterrupt+0x44>)
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d6e:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <vPortSetupTimerInterrupt+0x34>)
 8005d70:	2207      	movs	r2, #7
 8005d72:	601a      	str	r2, [r3, #0]
}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	e000e010 	.word	0xe000e010
 8005d84:	e000e018 	.word	0xe000e018
 8005d88:	20000028 	.word	0x20000028
 8005d8c:	10624dd3 	.word	0x10624dd3
 8005d90:	e000e014 	.word	0xe000e014

08005d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005da4 <vPortEnableVFP+0x10>
 8005d98:	6801      	ldr	r1, [r0, #0]
 8005d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d9e:	6001      	str	r1, [r0, #0]
 8005da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005da2:	bf00      	nop
 8005da4:	e000ed88 	.word	0xe000ed88

08005da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dae:	f3ef 8305 	mrs	r3, IPSR
 8005db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b0f      	cmp	r3, #15
 8005db8:	d914      	bls.n	8005de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <vPortValidateInterruptPriority+0x70>)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005dc4:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <vPortValidateInterruptPriority+0x74>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	7afa      	ldrb	r2, [r7, #11]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20a      	bcs.n	8005de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
}
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <vPortValidateInterruptPriority+0x78>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <vPortValidateInterruptPriority+0x7c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d90a      	bls.n	8005e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	603b      	str	r3, [r7, #0]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <vPortValidateInterruptPriority+0x60>
	}
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	e000e3f0 	.word	0xe000e3f0
 8005e1c:	20000f58 	.word	0x20000f58
 8005e20:	e000ed0c 	.word	0xe000ed0c
 8005e24:	20000f5c 	.word	0x20000f5c

08005e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e34:	f7fe fd9a 	bl	800496c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e38:	4b5b      	ldr	r3, [pc, #364]	; (8005fa8 <pvPortMalloc+0x180>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e40:	f000 f920 	bl	8006084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e44:	4b59      	ldr	r3, [pc, #356]	; (8005fac <pvPortMalloc+0x184>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 8093 	bne.w	8005f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01d      	beq.n	8005e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e58:	2208      	movs	r2, #8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d014      	beq.n	8005e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f023 0307 	bic.w	r3, r3, #7
 8005e70:	3308      	adds	r3, #8
 8005e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <pvPortMalloc+0x6c>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	617b      	str	r3, [r7, #20]
}
 8005e90:	bf00      	nop
 8005e92:	e7fe      	b.n	8005e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d06e      	beq.n	8005f78 <pvPortMalloc+0x150>
 8005e9a:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <pvPortMalloc+0x188>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d869      	bhi.n	8005f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ea4:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <pvPortMalloc+0x18c>)
 8005ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ea8:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <pvPortMalloc+0x18c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eae:	e004      	b.n	8005eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d903      	bls.n	8005ecc <pvPortMalloc+0xa4>
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f1      	bne.n	8005eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ecc:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <pvPortMalloc+0x180>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d050      	beq.n	8005f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2208      	movs	r2, #8
 8005edc:	4413      	add	r3, r2
 8005ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d91f      	bls.n	8005f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <pvPortMalloc+0xf8>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	613b      	str	r3, [r7, #16]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	1ad2      	subs	r2, r2, r3
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f32:	69b8      	ldr	r0, [r7, #24]
 8005f34:	f000 f908 	bl	8006148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f38:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f46:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <pvPortMalloc+0x190>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d203      	bcs.n	8005f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <pvPortMalloc+0x188>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <pvPortMalloc+0x190>)
 8005f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <pvPortMalloc+0x184>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f6e:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <pvPortMalloc+0x194>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <pvPortMalloc+0x194>)
 8005f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f78:	f7fe fd06 	bl	8004988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <pvPortMalloc+0x174>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	60fb      	str	r3, [r7, #12]
}
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <pvPortMalloc+0x172>
	return pvReturn;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3728      	adds	r7, #40	; 0x28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20004b68 	.word	0x20004b68
 8005fac:	20004b7c 	.word	0x20004b7c
 8005fb0:	20004b6c 	.word	0x20004b6c
 8005fb4:	20004b60 	.word	0x20004b60
 8005fb8:	20004b70 	.word	0x20004b70
 8005fbc:	20004b74 	.word	0x20004b74

08005fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04d      	beq.n	800606e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4413      	add	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <vPortFree+0xb8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <vPortFree+0x44>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	60fb      	str	r3, [r7, #12]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <vPortFree+0x62>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	60bb      	str	r3, [r7, #8]
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <vPortFree+0xb8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01e      	beq.n	800606e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11a      	bne.n	800606e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <vPortFree+0xb8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	43db      	mvns	r3, r3
 8006042:	401a      	ands	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006048:	f7fe fc90 	bl	800496c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <vPortFree+0xbc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4413      	add	r3, r2
 8006056:	4a09      	ldr	r2, [pc, #36]	; (800607c <vPortFree+0xbc>)
 8006058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f000 f874 	bl	8006148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <vPortFree+0xc0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	4a06      	ldr	r2, [pc, #24]	; (8006080 <vPortFree+0xc0>)
 8006068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800606a:	f7fe fc8d 	bl	8004988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20004b7c 	.word	0x20004b7c
 800607c:	20004b6c 	.word	0x20004b6c
 8006080:	20004b78 	.word	0x20004b78

08006084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800608a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800608e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006090:	4b27      	ldr	r3, [pc, #156]	; (8006130 <prvHeapInit+0xac>)
 8006092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3307      	adds	r3, #7
 80060a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <prvHeapInit+0xac>)
 80060b4:	4413      	add	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060bc:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <prvHeapInit+0xb0>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060c2:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <prvHeapInit+0xb0>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4413      	add	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060d0:	2208      	movs	r2, #8
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4a15      	ldr	r2, [pc, #84]	; (8006138 <prvHeapInit+0xb4>)
 80060e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <prvHeapInit+0xb4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <prvHeapInit+0xb4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <prvHeapInit+0xb4>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4a0a      	ldr	r2, [pc, #40]	; (800613c <prvHeapInit+0xb8>)
 8006112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <prvHeapInit+0xbc>)
 800611a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <prvHeapInit+0xc0>)
 800611e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	20000f60 	.word	0x20000f60
 8006134:	20004b60 	.word	0x20004b60
 8006138:	20004b68 	.word	0x20004b68
 800613c:	20004b70 	.word	0x20004b70
 8006140:	20004b6c 	.word	0x20004b6c
 8006144:	20004b7c 	.word	0x20004b7c

08006148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006150:	4b28      	ldr	r3, [pc, #160]	; (80061f4 <prvInsertBlockIntoFreeList+0xac>)
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e002      	b.n	800615c <prvInsertBlockIntoFreeList+0x14>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d8f7      	bhi.n	8006156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d108      	bne.n	800618a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	441a      	add	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	441a      	add	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d118      	bne.n	80061d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <prvInsertBlockIntoFreeList+0xb0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d00d      	beq.n	80061c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e008      	b.n	80061d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <prvInsertBlockIntoFreeList+0xb0>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e003      	b.n	80061d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d002      	beq.n	80061e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20004b60 	.word	0x20004b60
 80061f8:	20004b68 	.word	0x20004b68

080061fc <siprintf>:
 80061fc:	b40e      	push	{r1, r2, r3}
 80061fe:	b500      	push	{lr}
 8006200:	b09c      	sub	sp, #112	; 0x70
 8006202:	ab1d      	add	r3, sp, #116	; 0x74
 8006204:	9002      	str	r0, [sp, #8]
 8006206:	9006      	str	r0, [sp, #24]
 8006208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800620c:	4809      	ldr	r0, [pc, #36]	; (8006234 <siprintf+0x38>)
 800620e:	9107      	str	r1, [sp, #28]
 8006210:	9104      	str	r1, [sp, #16]
 8006212:	4909      	ldr	r1, [pc, #36]	; (8006238 <siprintf+0x3c>)
 8006214:	f853 2b04 	ldr.w	r2, [r3], #4
 8006218:	9105      	str	r1, [sp, #20]
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	a902      	add	r1, sp, #8
 8006220:	f000 f9a0 	bl	8006564 <_svfiprintf_r>
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	b01c      	add	sp, #112	; 0x70
 800622c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006230:	b003      	add	sp, #12
 8006232:	4770      	bx	lr
 8006234:	20000084 	.word	0x20000084
 8006238:	ffff0208 	.word	0xffff0208

0800623c <memset>:
 800623c:	4402      	add	r2, r0
 800623e:	4603      	mov	r3, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <__errno>:
 800624c:	4b01      	ldr	r3, [pc, #4]	; (8006254 <__errno+0x8>)
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20000084 	.word	0x20000084

08006258 <__libc_init_array>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4d0d      	ldr	r5, [pc, #52]	; (8006290 <__libc_init_array+0x38>)
 800625c:	4c0d      	ldr	r4, [pc, #52]	; (8006294 <__libc_init_array+0x3c>)
 800625e:	1b64      	subs	r4, r4, r5
 8006260:	10a4      	asrs	r4, r4, #2
 8006262:	2600      	movs	r6, #0
 8006264:	42a6      	cmp	r6, r4
 8006266:	d109      	bne.n	800627c <__libc_init_array+0x24>
 8006268:	4d0b      	ldr	r5, [pc, #44]	; (8006298 <__libc_init_array+0x40>)
 800626a:	4c0c      	ldr	r4, [pc, #48]	; (800629c <__libc_init_array+0x44>)
 800626c:	f000 fc6a 	bl	8006b44 <_init>
 8006270:	1b64      	subs	r4, r4, r5
 8006272:	10a4      	asrs	r4, r4, #2
 8006274:	2600      	movs	r6, #0
 8006276:	42a6      	cmp	r6, r4
 8006278:	d105      	bne.n	8006286 <__libc_init_array+0x2e>
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006280:	4798      	blx	r3
 8006282:	3601      	adds	r6, #1
 8006284:	e7ee      	b.n	8006264 <__libc_init_array+0xc>
 8006286:	f855 3b04 	ldr.w	r3, [r5], #4
 800628a:	4798      	blx	r3
 800628c:	3601      	adds	r6, #1
 800628e:	e7f2      	b.n	8006276 <__libc_init_array+0x1e>
 8006290:	08006c60 	.word	0x08006c60
 8006294:	08006c60 	.word	0x08006c60
 8006298:	08006c60 	.word	0x08006c60
 800629c:	08006c64 	.word	0x08006c64

080062a0 <__retarget_lock_acquire_recursive>:
 80062a0:	4770      	bx	lr

080062a2 <__retarget_lock_release_recursive>:
 80062a2:	4770      	bx	lr

080062a4 <memcpy>:
 80062a4:	440a      	add	r2, r1
 80062a6:	4291      	cmp	r1, r2
 80062a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80062ac:	d100      	bne.n	80062b0 <memcpy+0xc>
 80062ae:	4770      	bx	lr
 80062b0:	b510      	push	{r4, lr}
 80062b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ba:	4291      	cmp	r1, r2
 80062bc:	d1f9      	bne.n	80062b2 <memcpy+0xe>
 80062be:	bd10      	pop	{r4, pc}

080062c0 <_free_r>:
 80062c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062c2:	2900      	cmp	r1, #0
 80062c4:	d044      	beq.n	8006350 <_free_r+0x90>
 80062c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ca:	9001      	str	r0, [sp, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f1a1 0404 	sub.w	r4, r1, #4
 80062d2:	bfb8      	it	lt
 80062d4:	18e4      	addlt	r4, r4, r3
 80062d6:	f000 f8df 	bl	8006498 <__malloc_lock>
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <_free_r+0x94>)
 80062dc:	9801      	ldr	r0, [sp, #4]
 80062de:	6813      	ldr	r3, [r2, #0]
 80062e0:	b933      	cbnz	r3, 80062f0 <_free_r+0x30>
 80062e2:	6063      	str	r3, [r4, #4]
 80062e4:	6014      	str	r4, [r2, #0]
 80062e6:	b003      	add	sp, #12
 80062e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062ec:	f000 b8da 	b.w	80064a4 <__malloc_unlock>
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d908      	bls.n	8006306 <_free_r+0x46>
 80062f4:	6825      	ldr	r5, [r4, #0]
 80062f6:	1961      	adds	r1, r4, r5
 80062f8:	428b      	cmp	r3, r1
 80062fa:	bf01      	itttt	eq
 80062fc:	6819      	ldreq	r1, [r3, #0]
 80062fe:	685b      	ldreq	r3, [r3, #4]
 8006300:	1949      	addeq	r1, r1, r5
 8006302:	6021      	streq	r1, [r4, #0]
 8006304:	e7ed      	b.n	80062e2 <_free_r+0x22>
 8006306:	461a      	mov	r2, r3
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	b10b      	cbz	r3, 8006310 <_free_r+0x50>
 800630c:	42a3      	cmp	r3, r4
 800630e:	d9fa      	bls.n	8006306 <_free_r+0x46>
 8006310:	6811      	ldr	r1, [r2, #0]
 8006312:	1855      	adds	r5, r2, r1
 8006314:	42a5      	cmp	r5, r4
 8006316:	d10b      	bne.n	8006330 <_free_r+0x70>
 8006318:	6824      	ldr	r4, [r4, #0]
 800631a:	4421      	add	r1, r4
 800631c:	1854      	adds	r4, r2, r1
 800631e:	42a3      	cmp	r3, r4
 8006320:	6011      	str	r1, [r2, #0]
 8006322:	d1e0      	bne.n	80062e6 <_free_r+0x26>
 8006324:	681c      	ldr	r4, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	6053      	str	r3, [r2, #4]
 800632a:	440c      	add	r4, r1
 800632c:	6014      	str	r4, [r2, #0]
 800632e:	e7da      	b.n	80062e6 <_free_r+0x26>
 8006330:	d902      	bls.n	8006338 <_free_r+0x78>
 8006332:	230c      	movs	r3, #12
 8006334:	6003      	str	r3, [r0, #0]
 8006336:	e7d6      	b.n	80062e6 <_free_r+0x26>
 8006338:	6825      	ldr	r5, [r4, #0]
 800633a:	1961      	adds	r1, r4, r5
 800633c:	428b      	cmp	r3, r1
 800633e:	bf04      	itt	eq
 8006340:	6819      	ldreq	r1, [r3, #0]
 8006342:	685b      	ldreq	r3, [r3, #4]
 8006344:	6063      	str	r3, [r4, #4]
 8006346:	bf04      	itt	eq
 8006348:	1949      	addeq	r1, r1, r5
 800634a:	6021      	streq	r1, [r4, #0]
 800634c:	6054      	str	r4, [r2, #4]
 800634e:	e7ca      	b.n	80062e6 <_free_r+0x26>
 8006350:	b003      	add	sp, #12
 8006352:	bd30      	pop	{r4, r5, pc}
 8006354:	20004cc0 	.word	0x20004cc0

08006358 <sbrk_aligned>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4e0e      	ldr	r6, [pc, #56]	; (8006394 <sbrk_aligned+0x3c>)
 800635c:	460c      	mov	r4, r1
 800635e:	6831      	ldr	r1, [r6, #0]
 8006360:	4605      	mov	r5, r0
 8006362:	b911      	cbnz	r1, 800636a <sbrk_aligned+0x12>
 8006364:	f000 fba6 	bl	8006ab4 <_sbrk_r>
 8006368:	6030      	str	r0, [r6, #0]
 800636a:	4621      	mov	r1, r4
 800636c:	4628      	mov	r0, r5
 800636e:	f000 fba1 	bl	8006ab4 <_sbrk_r>
 8006372:	1c43      	adds	r3, r0, #1
 8006374:	d00a      	beq.n	800638c <sbrk_aligned+0x34>
 8006376:	1cc4      	adds	r4, r0, #3
 8006378:	f024 0403 	bic.w	r4, r4, #3
 800637c:	42a0      	cmp	r0, r4
 800637e:	d007      	beq.n	8006390 <sbrk_aligned+0x38>
 8006380:	1a21      	subs	r1, r4, r0
 8006382:	4628      	mov	r0, r5
 8006384:	f000 fb96 	bl	8006ab4 <_sbrk_r>
 8006388:	3001      	adds	r0, #1
 800638a:	d101      	bne.n	8006390 <sbrk_aligned+0x38>
 800638c:	f04f 34ff 	mov.w	r4, #4294967295
 8006390:	4620      	mov	r0, r4
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	20004cc4 	.word	0x20004cc4

08006398 <_malloc_r>:
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	1ccd      	adds	r5, r1, #3
 800639e:	f025 0503 	bic.w	r5, r5, #3
 80063a2:	3508      	adds	r5, #8
 80063a4:	2d0c      	cmp	r5, #12
 80063a6:	bf38      	it	cc
 80063a8:	250c      	movcc	r5, #12
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	4607      	mov	r7, r0
 80063ae:	db01      	blt.n	80063b4 <_malloc_r+0x1c>
 80063b0:	42a9      	cmp	r1, r5
 80063b2:	d905      	bls.n	80063c0 <_malloc_r+0x28>
 80063b4:	230c      	movs	r3, #12
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	2600      	movs	r6, #0
 80063ba:	4630      	mov	r0, r6
 80063bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006494 <_malloc_r+0xfc>
 80063c4:	f000 f868 	bl	8006498 <__malloc_lock>
 80063c8:	f8d8 3000 	ldr.w	r3, [r8]
 80063cc:	461c      	mov	r4, r3
 80063ce:	bb5c      	cbnz	r4, 8006428 <_malloc_r+0x90>
 80063d0:	4629      	mov	r1, r5
 80063d2:	4638      	mov	r0, r7
 80063d4:	f7ff ffc0 	bl	8006358 <sbrk_aligned>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	4604      	mov	r4, r0
 80063dc:	d155      	bne.n	800648a <_malloc_r+0xf2>
 80063de:	f8d8 4000 	ldr.w	r4, [r8]
 80063e2:	4626      	mov	r6, r4
 80063e4:	2e00      	cmp	r6, #0
 80063e6:	d145      	bne.n	8006474 <_malloc_r+0xdc>
 80063e8:	2c00      	cmp	r4, #0
 80063ea:	d048      	beq.n	800647e <_malloc_r+0xe6>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	4631      	mov	r1, r6
 80063f0:	4638      	mov	r0, r7
 80063f2:	eb04 0903 	add.w	r9, r4, r3
 80063f6:	f000 fb5d 	bl	8006ab4 <_sbrk_r>
 80063fa:	4581      	cmp	r9, r0
 80063fc:	d13f      	bne.n	800647e <_malloc_r+0xe6>
 80063fe:	6821      	ldr	r1, [r4, #0]
 8006400:	1a6d      	subs	r5, r5, r1
 8006402:	4629      	mov	r1, r5
 8006404:	4638      	mov	r0, r7
 8006406:	f7ff ffa7 	bl	8006358 <sbrk_aligned>
 800640a:	3001      	adds	r0, #1
 800640c:	d037      	beq.n	800647e <_malloc_r+0xe6>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	442b      	add	r3, r5
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	f8d8 3000 	ldr.w	r3, [r8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d038      	beq.n	800648e <_malloc_r+0xf6>
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	42a2      	cmp	r2, r4
 8006420:	d12b      	bne.n	800647a <_malloc_r+0xe2>
 8006422:	2200      	movs	r2, #0
 8006424:	605a      	str	r2, [r3, #4]
 8006426:	e00f      	b.n	8006448 <_malloc_r+0xb0>
 8006428:	6822      	ldr	r2, [r4, #0]
 800642a:	1b52      	subs	r2, r2, r5
 800642c:	d41f      	bmi.n	800646e <_malloc_r+0xd6>
 800642e:	2a0b      	cmp	r2, #11
 8006430:	d917      	bls.n	8006462 <_malloc_r+0xca>
 8006432:	1961      	adds	r1, r4, r5
 8006434:	42a3      	cmp	r3, r4
 8006436:	6025      	str	r5, [r4, #0]
 8006438:	bf18      	it	ne
 800643a:	6059      	strne	r1, [r3, #4]
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	bf08      	it	eq
 8006440:	f8c8 1000 	streq.w	r1, [r8]
 8006444:	5162      	str	r2, [r4, r5]
 8006446:	604b      	str	r3, [r1, #4]
 8006448:	4638      	mov	r0, r7
 800644a:	f104 060b 	add.w	r6, r4, #11
 800644e:	f000 f829 	bl	80064a4 <__malloc_unlock>
 8006452:	f026 0607 	bic.w	r6, r6, #7
 8006456:	1d23      	adds	r3, r4, #4
 8006458:	1af2      	subs	r2, r6, r3
 800645a:	d0ae      	beq.n	80063ba <_malloc_r+0x22>
 800645c:	1b9b      	subs	r3, r3, r6
 800645e:	50a3      	str	r3, [r4, r2]
 8006460:	e7ab      	b.n	80063ba <_malloc_r+0x22>
 8006462:	42a3      	cmp	r3, r4
 8006464:	6862      	ldr	r2, [r4, #4]
 8006466:	d1dd      	bne.n	8006424 <_malloc_r+0x8c>
 8006468:	f8c8 2000 	str.w	r2, [r8]
 800646c:	e7ec      	b.n	8006448 <_malloc_r+0xb0>
 800646e:	4623      	mov	r3, r4
 8006470:	6864      	ldr	r4, [r4, #4]
 8006472:	e7ac      	b.n	80063ce <_malloc_r+0x36>
 8006474:	4634      	mov	r4, r6
 8006476:	6876      	ldr	r6, [r6, #4]
 8006478:	e7b4      	b.n	80063e4 <_malloc_r+0x4c>
 800647a:	4613      	mov	r3, r2
 800647c:	e7cc      	b.n	8006418 <_malloc_r+0x80>
 800647e:	230c      	movs	r3, #12
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	4638      	mov	r0, r7
 8006484:	f000 f80e 	bl	80064a4 <__malloc_unlock>
 8006488:	e797      	b.n	80063ba <_malloc_r+0x22>
 800648a:	6025      	str	r5, [r4, #0]
 800648c:	e7dc      	b.n	8006448 <_malloc_r+0xb0>
 800648e:	605b      	str	r3, [r3, #4]
 8006490:	deff      	udf	#255	; 0xff
 8006492:	bf00      	nop
 8006494:	20004cc0 	.word	0x20004cc0

08006498 <__malloc_lock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_lock+0x8>)
 800649a:	f7ff bf01 	b.w	80062a0 <__retarget_lock_acquire_recursive>
 800649e:	bf00      	nop
 80064a0:	20004cbc 	.word	0x20004cbc

080064a4 <__malloc_unlock>:
 80064a4:	4801      	ldr	r0, [pc, #4]	; (80064ac <__malloc_unlock+0x8>)
 80064a6:	f7ff befc 	b.w	80062a2 <__retarget_lock_release_recursive>
 80064aa:	bf00      	nop
 80064ac:	20004cbc 	.word	0x20004cbc

080064b0 <__ssputs_r>:
 80064b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	688e      	ldr	r6, [r1, #8]
 80064b6:	461f      	mov	r7, r3
 80064b8:	42be      	cmp	r6, r7
 80064ba:	680b      	ldr	r3, [r1, #0]
 80064bc:	4682      	mov	sl, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	4690      	mov	r8, r2
 80064c2:	d82c      	bhi.n	800651e <__ssputs_r+0x6e>
 80064c4:	898a      	ldrh	r2, [r1, #12]
 80064c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064ca:	d026      	beq.n	800651a <__ssputs_r+0x6a>
 80064cc:	6965      	ldr	r5, [r4, #20]
 80064ce:	6909      	ldr	r1, [r1, #16]
 80064d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064d4:	eba3 0901 	sub.w	r9, r3, r1
 80064d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064dc:	1c7b      	adds	r3, r7, #1
 80064de:	444b      	add	r3, r9
 80064e0:	106d      	asrs	r5, r5, #1
 80064e2:	429d      	cmp	r5, r3
 80064e4:	bf38      	it	cc
 80064e6:	461d      	movcc	r5, r3
 80064e8:	0553      	lsls	r3, r2, #21
 80064ea:	d527      	bpl.n	800653c <__ssputs_r+0x8c>
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7ff ff53 	bl	8006398 <_malloc_r>
 80064f2:	4606      	mov	r6, r0
 80064f4:	b360      	cbz	r0, 8006550 <__ssputs_r+0xa0>
 80064f6:	6921      	ldr	r1, [r4, #16]
 80064f8:	464a      	mov	r2, r9
 80064fa:	f7ff fed3 	bl	80062a4 <memcpy>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	6126      	str	r6, [r4, #16]
 800650c:	6165      	str	r5, [r4, #20]
 800650e:	444e      	add	r6, r9
 8006510:	eba5 0509 	sub.w	r5, r5, r9
 8006514:	6026      	str	r6, [r4, #0]
 8006516:	60a5      	str	r5, [r4, #8]
 8006518:	463e      	mov	r6, r7
 800651a:	42be      	cmp	r6, r7
 800651c:	d900      	bls.n	8006520 <__ssputs_r+0x70>
 800651e:	463e      	mov	r6, r7
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	4632      	mov	r2, r6
 8006524:	4641      	mov	r1, r8
 8006526:	f000 faab 	bl	8006a80 <memmove>
 800652a:	68a3      	ldr	r3, [r4, #8]
 800652c:	1b9b      	subs	r3, r3, r6
 800652e:	60a3      	str	r3, [r4, #8]
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	4433      	add	r3, r6
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	2000      	movs	r0, #0
 8006538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653c:	462a      	mov	r2, r5
 800653e:	f000 fac9 	bl	8006ad4 <_realloc_r>
 8006542:	4606      	mov	r6, r0
 8006544:	2800      	cmp	r0, #0
 8006546:	d1e0      	bne.n	800650a <__ssputs_r+0x5a>
 8006548:	6921      	ldr	r1, [r4, #16]
 800654a:	4650      	mov	r0, sl
 800654c:	f7ff feb8 	bl	80062c0 <_free_r>
 8006550:	230c      	movs	r3, #12
 8006552:	f8ca 3000 	str.w	r3, [sl]
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	f04f 30ff 	mov.w	r0, #4294967295
 8006562:	e7e9      	b.n	8006538 <__ssputs_r+0x88>

08006564 <_svfiprintf_r>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	4698      	mov	r8, r3
 800656a:	898b      	ldrh	r3, [r1, #12]
 800656c:	061b      	lsls	r3, r3, #24
 800656e:	b09d      	sub	sp, #116	; 0x74
 8006570:	4607      	mov	r7, r0
 8006572:	460d      	mov	r5, r1
 8006574:	4614      	mov	r4, r2
 8006576:	d50e      	bpl.n	8006596 <_svfiprintf_r+0x32>
 8006578:	690b      	ldr	r3, [r1, #16]
 800657a:	b963      	cbnz	r3, 8006596 <_svfiprintf_r+0x32>
 800657c:	2140      	movs	r1, #64	; 0x40
 800657e:	f7ff ff0b 	bl	8006398 <_malloc_r>
 8006582:	6028      	str	r0, [r5, #0]
 8006584:	6128      	str	r0, [r5, #16]
 8006586:	b920      	cbnz	r0, 8006592 <_svfiprintf_r+0x2e>
 8006588:	230c      	movs	r3, #12
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	e0d0      	b.n	8006734 <_svfiprintf_r+0x1d0>
 8006592:	2340      	movs	r3, #64	; 0x40
 8006594:	616b      	str	r3, [r5, #20]
 8006596:	2300      	movs	r3, #0
 8006598:	9309      	str	r3, [sp, #36]	; 0x24
 800659a:	2320      	movs	r3, #32
 800659c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065a4:	2330      	movs	r3, #48	; 0x30
 80065a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800674c <_svfiprintf_r+0x1e8>
 80065aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ae:	f04f 0901 	mov.w	r9, #1
 80065b2:	4623      	mov	r3, r4
 80065b4:	469a      	mov	sl, r3
 80065b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ba:	b10a      	cbz	r2, 80065c0 <_svfiprintf_r+0x5c>
 80065bc:	2a25      	cmp	r2, #37	; 0x25
 80065be:	d1f9      	bne.n	80065b4 <_svfiprintf_r+0x50>
 80065c0:	ebba 0b04 	subs.w	fp, sl, r4
 80065c4:	d00b      	beq.n	80065de <_svfiprintf_r+0x7a>
 80065c6:	465b      	mov	r3, fp
 80065c8:	4622      	mov	r2, r4
 80065ca:	4629      	mov	r1, r5
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff ff6f 	bl	80064b0 <__ssputs_r>
 80065d2:	3001      	adds	r0, #1
 80065d4:	f000 80a9 	beq.w	800672a <_svfiprintf_r+0x1c6>
 80065d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065da:	445a      	add	r2, fp
 80065dc:	9209      	str	r2, [sp, #36]	; 0x24
 80065de:	f89a 3000 	ldrb.w	r3, [sl]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80a1 	beq.w	800672a <_svfiprintf_r+0x1c6>
 80065e8:	2300      	movs	r3, #0
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065f2:	f10a 0a01 	add.w	sl, sl, #1
 80065f6:	9304      	str	r3, [sp, #16]
 80065f8:	9307      	str	r3, [sp, #28]
 80065fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006600:	4654      	mov	r4, sl
 8006602:	2205      	movs	r2, #5
 8006604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006608:	4850      	ldr	r0, [pc, #320]	; (800674c <_svfiprintf_r+0x1e8>)
 800660a:	f7f9 fdf1 	bl	80001f0 <memchr>
 800660e:	9a04      	ldr	r2, [sp, #16]
 8006610:	b9d8      	cbnz	r0, 800664a <_svfiprintf_r+0xe6>
 8006612:	06d0      	lsls	r0, r2, #27
 8006614:	bf44      	itt	mi
 8006616:	2320      	movmi	r3, #32
 8006618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800661c:	0711      	lsls	r1, r2, #28
 800661e:	bf44      	itt	mi
 8006620:	232b      	movmi	r3, #43	; 0x2b
 8006622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006626:	f89a 3000 	ldrb.w	r3, [sl]
 800662a:	2b2a      	cmp	r3, #42	; 0x2a
 800662c:	d015      	beq.n	800665a <_svfiprintf_r+0xf6>
 800662e:	9a07      	ldr	r2, [sp, #28]
 8006630:	4654      	mov	r4, sl
 8006632:	2000      	movs	r0, #0
 8006634:	f04f 0c0a 	mov.w	ip, #10
 8006638:	4621      	mov	r1, r4
 800663a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800663e:	3b30      	subs	r3, #48	; 0x30
 8006640:	2b09      	cmp	r3, #9
 8006642:	d94d      	bls.n	80066e0 <_svfiprintf_r+0x17c>
 8006644:	b1b0      	cbz	r0, 8006674 <_svfiprintf_r+0x110>
 8006646:	9207      	str	r2, [sp, #28]
 8006648:	e014      	b.n	8006674 <_svfiprintf_r+0x110>
 800664a:	eba0 0308 	sub.w	r3, r0, r8
 800664e:	fa09 f303 	lsl.w	r3, r9, r3
 8006652:	4313      	orrs	r3, r2
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	46a2      	mov	sl, r4
 8006658:	e7d2      	b.n	8006600 <_svfiprintf_r+0x9c>
 800665a:	9b03      	ldr	r3, [sp, #12]
 800665c:	1d19      	adds	r1, r3, #4
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	9103      	str	r1, [sp, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	bfbb      	ittet	lt
 8006666:	425b      	neglt	r3, r3
 8006668:	f042 0202 	orrlt.w	r2, r2, #2
 800666c:	9307      	strge	r3, [sp, #28]
 800666e:	9307      	strlt	r3, [sp, #28]
 8006670:	bfb8      	it	lt
 8006672:	9204      	strlt	r2, [sp, #16]
 8006674:	7823      	ldrb	r3, [r4, #0]
 8006676:	2b2e      	cmp	r3, #46	; 0x2e
 8006678:	d10c      	bne.n	8006694 <_svfiprintf_r+0x130>
 800667a:	7863      	ldrb	r3, [r4, #1]
 800667c:	2b2a      	cmp	r3, #42	; 0x2a
 800667e:	d134      	bne.n	80066ea <_svfiprintf_r+0x186>
 8006680:	9b03      	ldr	r3, [sp, #12]
 8006682:	1d1a      	adds	r2, r3, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	9203      	str	r2, [sp, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	bfb8      	it	lt
 800668c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006690:	3402      	adds	r4, #2
 8006692:	9305      	str	r3, [sp, #20]
 8006694:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800675c <_svfiprintf_r+0x1f8>
 8006698:	7821      	ldrb	r1, [r4, #0]
 800669a:	2203      	movs	r2, #3
 800669c:	4650      	mov	r0, sl
 800669e:	f7f9 fda7 	bl	80001f0 <memchr>
 80066a2:	b138      	cbz	r0, 80066b4 <_svfiprintf_r+0x150>
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	eba0 000a 	sub.w	r0, r0, sl
 80066aa:	2240      	movs	r2, #64	; 0x40
 80066ac:	4082      	lsls	r2, r0
 80066ae:	4313      	orrs	r3, r2
 80066b0:	3401      	adds	r4, #1
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b8:	4825      	ldr	r0, [pc, #148]	; (8006750 <_svfiprintf_r+0x1ec>)
 80066ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066be:	2206      	movs	r2, #6
 80066c0:	f7f9 fd96 	bl	80001f0 <memchr>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d038      	beq.n	800673a <_svfiprintf_r+0x1d6>
 80066c8:	4b22      	ldr	r3, [pc, #136]	; (8006754 <_svfiprintf_r+0x1f0>)
 80066ca:	bb1b      	cbnz	r3, 8006714 <_svfiprintf_r+0x1b0>
 80066cc:	9b03      	ldr	r3, [sp, #12]
 80066ce:	3307      	adds	r3, #7
 80066d0:	f023 0307 	bic.w	r3, r3, #7
 80066d4:	3308      	adds	r3, #8
 80066d6:	9303      	str	r3, [sp, #12]
 80066d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066da:	4433      	add	r3, r6
 80066dc:	9309      	str	r3, [sp, #36]	; 0x24
 80066de:	e768      	b.n	80065b2 <_svfiprintf_r+0x4e>
 80066e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80066e4:	460c      	mov	r4, r1
 80066e6:	2001      	movs	r0, #1
 80066e8:	e7a6      	b.n	8006638 <_svfiprintf_r+0xd4>
 80066ea:	2300      	movs	r3, #0
 80066ec:	3401      	adds	r4, #1
 80066ee:	9305      	str	r3, [sp, #20]
 80066f0:	4619      	mov	r1, r3
 80066f2:	f04f 0c0a 	mov.w	ip, #10
 80066f6:	4620      	mov	r0, r4
 80066f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066fc:	3a30      	subs	r2, #48	; 0x30
 80066fe:	2a09      	cmp	r2, #9
 8006700:	d903      	bls.n	800670a <_svfiprintf_r+0x1a6>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0c6      	beq.n	8006694 <_svfiprintf_r+0x130>
 8006706:	9105      	str	r1, [sp, #20]
 8006708:	e7c4      	b.n	8006694 <_svfiprintf_r+0x130>
 800670a:	fb0c 2101 	mla	r1, ip, r1, r2
 800670e:	4604      	mov	r4, r0
 8006710:	2301      	movs	r3, #1
 8006712:	e7f0      	b.n	80066f6 <_svfiprintf_r+0x192>
 8006714:	ab03      	add	r3, sp, #12
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	462a      	mov	r2, r5
 800671a:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <_svfiprintf_r+0x1f4>)
 800671c:	a904      	add	r1, sp, #16
 800671e:	4638      	mov	r0, r7
 8006720:	f3af 8000 	nop.w
 8006724:	1c42      	adds	r2, r0, #1
 8006726:	4606      	mov	r6, r0
 8006728:	d1d6      	bne.n	80066d8 <_svfiprintf_r+0x174>
 800672a:	89ab      	ldrh	r3, [r5, #12]
 800672c:	065b      	lsls	r3, r3, #25
 800672e:	f53f af2d 	bmi.w	800658c <_svfiprintf_r+0x28>
 8006732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006734:	b01d      	add	sp, #116	; 0x74
 8006736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673a:	ab03      	add	r3, sp, #12
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	462a      	mov	r2, r5
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <_svfiprintf_r+0x1f4>)
 8006742:	a904      	add	r1, sp, #16
 8006744:	4638      	mov	r0, r7
 8006746:	f000 f879 	bl	800683c <_printf_i>
 800674a:	e7eb      	b.n	8006724 <_svfiprintf_r+0x1c0>
 800674c:	08006c24 	.word	0x08006c24
 8006750:	08006c2e 	.word	0x08006c2e
 8006754:	00000000 	.word	0x00000000
 8006758:	080064b1 	.word	0x080064b1
 800675c:	08006c2a 	.word	0x08006c2a

08006760 <_printf_common>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	4616      	mov	r6, r2
 8006766:	4699      	mov	r9, r3
 8006768:	688a      	ldr	r2, [r1, #8]
 800676a:	690b      	ldr	r3, [r1, #16]
 800676c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006770:	4293      	cmp	r3, r2
 8006772:	bfb8      	it	lt
 8006774:	4613      	movlt	r3, r2
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800677c:	4607      	mov	r7, r0
 800677e:	460c      	mov	r4, r1
 8006780:	b10a      	cbz	r2, 8006786 <_printf_common+0x26>
 8006782:	3301      	adds	r3, #1
 8006784:	6033      	str	r3, [r6, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	0699      	lsls	r1, r3, #26
 800678a:	bf42      	ittt	mi
 800678c:	6833      	ldrmi	r3, [r6, #0]
 800678e:	3302      	addmi	r3, #2
 8006790:	6033      	strmi	r3, [r6, #0]
 8006792:	6825      	ldr	r5, [r4, #0]
 8006794:	f015 0506 	ands.w	r5, r5, #6
 8006798:	d106      	bne.n	80067a8 <_printf_common+0x48>
 800679a:	f104 0a19 	add.w	sl, r4, #25
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	6832      	ldr	r2, [r6, #0]
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dc26      	bgt.n	80067f6 <_printf_common+0x96>
 80067a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067ac:	1e13      	subs	r3, r2, #0
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	bf18      	it	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	0692      	lsls	r2, r2, #26
 80067b6:	d42b      	bmi.n	8006810 <_printf_common+0xb0>
 80067b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067bc:	4649      	mov	r1, r9
 80067be:	4638      	mov	r0, r7
 80067c0:	47c0      	blx	r8
 80067c2:	3001      	adds	r0, #1
 80067c4:	d01e      	beq.n	8006804 <_printf_common+0xa4>
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	f003 0306 	and.w	r3, r3, #6
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	bf02      	ittt	eq
 80067d2:	68e5      	ldreq	r5, [r4, #12]
 80067d4:	6833      	ldreq	r3, [r6, #0]
 80067d6:	1aed      	subeq	r5, r5, r3
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	bf0c      	ite	eq
 80067dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067e0:	2500      	movne	r5, #0
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bfc4      	itt	gt
 80067e6:	1a9b      	subgt	r3, r3, r2
 80067e8:	18ed      	addgt	r5, r5, r3
 80067ea:	2600      	movs	r6, #0
 80067ec:	341a      	adds	r4, #26
 80067ee:	42b5      	cmp	r5, r6
 80067f0:	d11a      	bne.n	8006828 <_printf_common+0xc8>
 80067f2:	2000      	movs	r0, #0
 80067f4:	e008      	b.n	8006808 <_printf_common+0xa8>
 80067f6:	2301      	movs	r3, #1
 80067f8:	4652      	mov	r2, sl
 80067fa:	4649      	mov	r1, r9
 80067fc:	4638      	mov	r0, r7
 80067fe:	47c0      	blx	r8
 8006800:	3001      	adds	r0, #1
 8006802:	d103      	bne.n	800680c <_printf_common+0xac>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295
 8006808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680c:	3501      	adds	r5, #1
 800680e:	e7c6      	b.n	800679e <_printf_common+0x3e>
 8006810:	18e1      	adds	r1, r4, r3
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	2030      	movs	r0, #48	; 0x30
 8006816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800681a:	4422      	add	r2, r4
 800681c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006824:	3302      	adds	r3, #2
 8006826:	e7c7      	b.n	80067b8 <_printf_common+0x58>
 8006828:	2301      	movs	r3, #1
 800682a:	4622      	mov	r2, r4
 800682c:	4649      	mov	r1, r9
 800682e:	4638      	mov	r0, r7
 8006830:	47c0      	blx	r8
 8006832:	3001      	adds	r0, #1
 8006834:	d0e6      	beq.n	8006804 <_printf_common+0xa4>
 8006836:	3601      	adds	r6, #1
 8006838:	e7d9      	b.n	80067ee <_printf_common+0x8e>
	...

0800683c <_printf_i>:
 800683c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	7e0f      	ldrb	r7, [r1, #24]
 8006842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006844:	2f78      	cmp	r7, #120	; 0x78
 8006846:	4691      	mov	r9, r2
 8006848:	4680      	mov	r8, r0
 800684a:	460c      	mov	r4, r1
 800684c:	469a      	mov	sl, r3
 800684e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006852:	d807      	bhi.n	8006864 <_printf_i+0x28>
 8006854:	2f62      	cmp	r7, #98	; 0x62
 8006856:	d80a      	bhi.n	800686e <_printf_i+0x32>
 8006858:	2f00      	cmp	r7, #0
 800685a:	f000 80d4 	beq.w	8006a06 <_printf_i+0x1ca>
 800685e:	2f58      	cmp	r7, #88	; 0x58
 8006860:	f000 80c0 	beq.w	80069e4 <_printf_i+0x1a8>
 8006864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800686c:	e03a      	b.n	80068e4 <_printf_i+0xa8>
 800686e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006872:	2b15      	cmp	r3, #21
 8006874:	d8f6      	bhi.n	8006864 <_printf_i+0x28>
 8006876:	a101      	add	r1, pc, #4	; (adr r1, 800687c <_printf_i+0x40>)
 8006878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068e9 	.word	0x080068e9
 8006884:	08006865 	.word	0x08006865
 8006888:	08006865 	.word	0x08006865
 800688c:	08006865 	.word	0x08006865
 8006890:	08006865 	.word	0x08006865
 8006894:	080068e9 	.word	0x080068e9
 8006898:	08006865 	.word	0x08006865
 800689c:	08006865 	.word	0x08006865
 80068a0:	08006865 	.word	0x08006865
 80068a4:	08006865 	.word	0x08006865
 80068a8:	080069ed 	.word	0x080069ed
 80068ac:	08006915 	.word	0x08006915
 80068b0:	080069a7 	.word	0x080069a7
 80068b4:	08006865 	.word	0x08006865
 80068b8:	08006865 	.word	0x08006865
 80068bc:	08006a0f 	.word	0x08006a0f
 80068c0:	08006865 	.word	0x08006865
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006865 	.word	0x08006865
 80068cc:	08006865 	.word	0x08006865
 80068d0:	080069af 	.word	0x080069af
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	1d1a      	adds	r2, r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	602a      	str	r2, [r5, #0]
 80068dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068e4:	2301      	movs	r3, #1
 80068e6:	e09f      	b.n	8006a28 <_printf_i+0x1ec>
 80068e8:	6820      	ldr	r0, [r4, #0]
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	0607      	lsls	r7, r0, #24
 80068ee:	f103 0104 	add.w	r1, r3, #4
 80068f2:	6029      	str	r1, [r5, #0]
 80068f4:	d501      	bpl.n	80068fa <_printf_i+0xbe>
 80068f6:	681e      	ldr	r6, [r3, #0]
 80068f8:	e003      	b.n	8006902 <_printf_i+0xc6>
 80068fa:	0646      	lsls	r6, r0, #25
 80068fc:	d5fb      	bpl.n	80068f6 <_printf_i+0xba>
 80068fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006902:	2e00      	cmp	r6, #0
 8006904:	da03      	bge.n	800690e <_printf_i+0xd2>
 8006906:	232d      	movs	r3, #45	; 0x2d
 8006908:	4276      	negs	r6, r6
 800690a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800690e:	485a      	ldr	r0, [pc, #360]	; (8006a78 <_printf_i+0x23c>)
 8006910:	230a      	movs	r3, #10
 8006912:	e012      	b.n	800693a <_printf_i+0xfe>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	6820      	ldr	r0, [r4, #0]
 8006918:	1d19      	adds	r1, r3, #4
 800691a:	6029      	str	r1, [r5, #0]
 800691c:	0605      	lsls	r5, r0, #24
 800691e:	d501      	bpl.n	8006924 <_printf_i+0xe8>
 8006920:	681e      	ldr	r6, [r3, #0]
 8006922:	e002      	b.n	800692a <_printf_i+0xee>
 8006924:	0641      	lsls	r1, r0, #25
 8006926:	d5fb      	bpl.n	8006920 <_printf_i+0xe4>
 8006928:	881e      	ldrh	r6, [r3, #0]
 800692a:	4853      	ldr	r0, [pc, #332]	; (8006a78 <_printf_i+0x23c>)
 800692c:	2f6f      	cmp	r7, #111	; 0x6f
 800692e:	bf0c      	ite	eq
 8006930:	2308      	moveq	r3, #8
 8006932:	230a      	movne	r3, #10
 8006934:	2100      	movs	r1, #0
 8006936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800693a:	6865      	ldr	r5, [r4, #4]
 800693c:	60a5      	str	r5, [r4, #8]
 800693e:	2d00      	cmp	r5, #0
 8006940:	bfa2      	ittt	ge
 8006942:	6821      	ldrge	r1, [r4, #0]
 8006944:	f021 0104 	bicge.w	r1, r1, #4
 8006948:	6021      	strge	r1, [r4, #0]
 800694a:	b90e      	cbnz	r6, 8006950 <_printf_i+0x114>
 800694c:	2d00      	cmp	r5, #0
 800694e:	d04b      	beq.n	80069e8 <_printf_i+0x1ac>
 8006950:	4615      	mov	r5, r2
 8006952:	fbb6 f1f3 	udiv	r1, r6, r3
 8006956:	fb03 6711 	mls	r7, r3, r1, r6
 800695a:	5dc7      	ldrb	r7, [r0, r7]
 800695c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006960:	4637      	mov	r7, r6
 8006962:	42bb      	cmp	r3, r7
 8006964:	460e      	mov	r6, r1
 8006966:	d9f4      	bls.n	8006952 <_printf_i+0x116>
 8006968:	2b08      	cmp	r3, #8
 800696a:	d10b      	bne.n	8006984 <_printf_i+0x148>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	07de      	lsls	r6, r3, #31
 8006970:	d508      	bpl.n	8006984 <_printf_i+0x148>
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	4299      	cmp	r1, r3
 8006978:	bfde      	ittt	le
 800697a:	2330      	movle	r3, #48	; 0x30
 800697c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006984:	1b52      	subs	r2, r2, r5
 8006986:	6122      	str	r2, [r4, #16]
 8006988:	f8cd a000 	str.w	sl, [sp]
 800698c:	464b      	mov	r3, r9
 800698e:	aa03      	add	r2, sp, #12
 8006990:	4621      	mov	r1, r4
 8006992:	4640      	mov	r0, r8
 8006994:	f7ff fee4 	bl	8006760 <_printf_common>
 8006998:	3001      	adds	r0, #1
 800699a:	d14a      	bne.n	8006a32 <_printf_i+0x1f6>
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	b004      	add	sp, #16
 80069a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	f043 0320 	orr.w	r3, r3, #32
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	4833      	ldr	r0, [pc, #204]	; (8006a7c <_printf_i+0x240>)
 80069b0:	2778      	movs	r7, #120	; 0x78
 80069b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	6829      	ldr	r1, [r5, #0]
 80069ba:	061f      	lsls	r7, r3, #24
 80069bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80069c0:	d402      	bmi.n	80069c8 <_printf_i+0x18c>
 80069c2:	065f      	lsls	r7, r3, #25
 80069c4:	bf48      	it	mi
 80069c6:	b2b6      	uxthmi	r6, r6
 80069c8:	07df      	lsls	r7, r3, #31
 80069ca:	bf48      	it	mi
 80069cc:	f043 0320 	orrmi.w	r3, r3, #32
 80069d0:	6029      	str	r1, [r5, #0]
 80069d2:	bf48      	it	mi
 80069d4:	6023      	strmi	r3, [r4, #0]
 80069d6:	b91e      	cbnz	r6, 80069e0 <_printf_i+0x1a4>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	f023 0320 	bic.w	r3, r3, #32
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	2310      	movs	r3, #16
 80069e2:	e7a7      	b.n	8006934 <_printf_i+0xf8>
 80069e4:	4824      	ldr	r0, [pc, #144]	; (8006a78 <_printf_i+0x23c>)
 80069e6:	e7e4      	b.n	80069b2 <_printf_i+0x176>
 80069e8:	4615      	mov	r5, r2
 80069ea:	e7bd      	b.n	8006968 <_printf_i+0x12c>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	6826      	ldr	r6, [r4, #0]
 80069f0:	6961      	ldr	r1, [r4, #20]
 80069f2:	1d18      	adds	r0, r3, #4
 80069f4:	6028      	str	r0, [r5, #0]
 80069f6:	0635      	lsls	r5, r6, #24
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	d501      	bpl.n	8006a00 <_printf_i+0x1c4>
 80069fc:	6019      	str	r1, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <_printf_i+0x1ca>
 8006a00:	0670      	lsls	r0, r6, #25
 8006a02:	d5fb      	bpl.n	80069fc <_printf_i+0x1c0>
 8006a04:	8019      	strh	r1, [r3, #0]
 8006a06:	2300      	movs	r3, #0
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	4615      	mov	r5, r2
 8006a0c:	e7bc      	b.n	8006988 <_printf_i+0x14c>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	1d1a      	adds	r2, r3, #4
 8006a12:	602a      	str	r2, [r5, #0]
 8006a14:	681d      	ldr	r5, [r3, #0]
 8006a16:	6862      	ldr	r2, [r4, #4]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f7f9 fbe8 	bl	80001f0 <memchr>
 8006a20:	b108      	cbz	r0, 8006a26 <_printf_i+0x1ea>
 8006a22:	1b40      	subs	r0, r0, r5
 8006a24:	6060      	str	r0, [r4, #4]
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a30:	e7aa      	b.n	8006988 <_printf_i+0x14c>
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4649      	mov	r1, r9
 8006a38:	4640      	mov	r0, r8
 8006a3a:	47d0      	blx	sl
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d0ad      	beq.n	800699c <_printf_i+0x160>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	079b      	lsls	r3, r3, #30
 8006a44:	d413      	bmi.n	8006a6e <_printf_i+0x232>
 8006a46:	68e0      	ldr	r0, [r4, #12]
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	4298      	cmp	r0, r3
 8006a4c:	bfb8      	it	lt
 8006a4e:	4618      	movlt	r0, r3
 8006a50:	e7a6      	b.n	80069a0 <_printf_i+0x164>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4632      	mov	r2, r6
 8006a56:	4649      	mov	r1, r9
 8006a58:	4640      	mov	r0, r8
 8006a5a:	47d0      	blx	sl
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d09d      	beq.n	800699c <_printf_i+0x160>
 8006a60:	3501      	adds	r5, #1
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	9903      	ldr	r1, [sp, #12]
 8006a66:	1a5b      	subs	r3, r3, r1
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	dcf2      	bgt.n	8006a52 <_printf_i+0x216>
 8006a6c:	e7eb      	b.n	8006a46 <_printf_i+0x20a>
 8006a6e:	2500      	movs	r5, #0
 8006a70:	f104 0619 	add.w	r6, r4, #25
 8006a74:	e7f5      	b.n	8006a62 <_printf_i+0x226>
 8006a76:	bf00      	nop
 8006a78:	08006c35 	.word	0x08006c35
 8006a7c:	08006c46 	.word	0x08006c46

08006a80 <memmove>:
 8006a80:	4288      	cmp	r0, r1
 8006a82:	b510      	push	{r4, lr}
 8006a84:	eb01 0402 	add.w	r4, r1, r2
 8006a88:	d902      	bls.n	8006a90 <memmove+0x10>
 8006a8a:	4284      	cmp	r4, r0
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	d807      	bhi.n	8006aa0 <memmove+0x20>
 8006a90:	1e43      	subs	r3, r0, #1
 8006a92:	42a1      	cmp	r1, r4
 8006a94:	d008      	beq.n	8006aa8 <memmove+0x28>
 8006a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a9e:	e7f8      	b.n	8006a92 <memmove+0x12>
 8006aa0:	4402      	add	r2, r0
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	428a      	cmp	r2, r1
 8006aa6:	d100      	bne.n	8006aaa <memmove+0x2a>
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ab2:	e7f7      	b.n	8006aa4 <memmove+0x24>

08006ab4 <_sbrk_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d06      	ldr	r5, [pc, #24]	; (8006ad0 <_sbrk_r+0x1c>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	f7fa f954 	bl	8000d6c <_sbrk>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d102      	bne.n	8006ace <_sbrk_r+0x1a>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	b103      	cbz	r3, 8006ace <_sbrk_r+0x1a>
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	20004cb8 	.word	0x20004cb8

08006ad4 <_realloc_r>:
 8006ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad8:	4680      	mov	r8, r0
 8006ada:	4614      	mov	r4, r2
 8006adc:	460e      	mov	r6, r1
 8006ade:	b921      	cbnz	r1, 8006aea <_realloc_r+0x16>
 8006ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	f7ff bc57 	b.w	8006398 <_malloc_r>
 8006aea:	b92a      	cbnz	r2, 8006af8 <_realloc_r+0x24>
 8006aec:	f7ff fbe8 	bl	80062c0 <_free_r>
 8006af0:	4625      	mov	r5, r4
 8006af2:	4628      	mov	r0, r5
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	f000 f81b 	bl	8006b32 <_malloc_usable_size_r>
 8006afc:	4284      	cmp	r4, r0
 8006afe:	4607      	mov	r7, r0
 8006b00:	d802      	bhi.n	8006b08 <_realloc_r+0x34>
 8006b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b06:	d812      	bhi.n	8006b2e <_realloc_r+0x5a>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	f7ff fc44 	bl	8006398 <_malloc_r>
 8006b10:	4605      	mov	r5, r0
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d0ed      	beq.n	8006af2 <_realloc_r+0x1e>
 8006b16:	42bc      	cmp	r4, r7
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	bf28      	it	cs
 8006b1e:	463a      	movcs	r2, r7
 8006b20:	f7ff fbc0 	bl	80062a4 <memcpy>
 8006b24:	4631      	mov	r1, r6
 8006b26:	4640      	mov	r0, r8
 8006b28:	f7ff fbca 	bl	80062c0 <_free_r>
 8006b2c:	e7e1      	b.n	8006af2 <_realloc_r+0x1e>
 8006b2e:	4635      	mov	r5, r6
 8006b30:	e7df      	b.n	8006af2 <_realloc_r+0x1e>

08006b32 <_malloc_usable_size_r>:
 8006b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b36:	1f18      	subs	r0, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bfbc      	itt	lt
 8006b3c:	580b      	ldrlt	r3, [r1, r0]
 8006b3e:	18c0      	addlt	r0, r0, r3
 8006b40:	4770      	bx	lr
	...

08006b44 <_init>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr

08006b50 <_fini>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr
